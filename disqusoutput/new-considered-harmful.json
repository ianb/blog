[
    {
        "createdAt": "Tue, 30 Apr 2013", 
        "indent": 1, 
        "message": "<p>I guess I encounter too many methods and functions that create objects to worry too much about having an operator to mark when an object is being created.</p><p>\"use strict\" is a good point, and I've added a note about it to the end of the article.</p>", 
        "order": "000880219789,000880493139", 
        "who": "Ian Bicking"
    }, 
    {
        "createdAt": "Tue, 30 Apr 2013", 
        "indent": 1, 
        "message": "<p>It doesn't create a scope, it creates an object which inherits from Operator.prototype and immediately calls the Operator function in the context of this object. ;-)</p>", 
        "order": "000880182673,000880217695", 
        "who": "Radom\u00edr \u017demli\u010dka"
    }, 
    {
        "createdAt": "Tue, 30 Apr 2013", 
        "indent": 1, 
        "message": "<p>I intended to allude to it in \"Prototypes are still okay\" \u2013 I agree with Crockford's diagnosis, but not his prescription (though I'm not clear, his opinions may have evolved since Javascript The Good Parts).  I still prefer sticking with prototypes instead of using a closure to encapsulate state, while Crockford seems to like the privacy that a closure can enforce.</p><p>(I updated the article to mention Douglas Crockford specifically.)</p>", 
        "order": "000880222470,000880469680", 
        "who": "Ian Bicking"
    }, 
    {
        "createdAt": "Tue, 30 Apr 2013", 
        "indent": 0, 
        "message": "<p>I'm surprised you didn't mention Douglas Crockford who's objections to \"new\" operator as well as the technique to avoid it are well known.</p>", 
        "order": "000880222470", 
        "who": "Piotr Dobrogost"
    }, 
    {
        "createdAt": "Tue, 30 Apr 2013", 
        "indent": 0, 
        "message": "<p>I'm not really sure about this. I don't think using the new operator is bad practice. Sure, it's harmful when you don't know the right way of using it, but when you do, you immediately can see what is a constructor function a what is a normal function. When I see this:</p><p>var p = Point();</p><p>I can't be sure if it's inherited from Point.prototype or if it's some other object. But when I see this:</p><p>var p = new Point();</p><p>I can be pretty sure it's the right object (in most cases, but I keep my code clean so I don't have to worry). So I wouldn't bury this operator, just start using it the right way and don't produce a bad code. :-)</p>", 
        "order": "000880219789", 
        "who": "Radom\u00edr \u017demli\u010dka"
    }, 
    {
        "createdAt": "Tue, 30 Apr 2013", 
        "indent": 0, 
        "message": "<p>Use strict mode. Use JSHint. Done.</p><p>If you use a linter in your editor (like SublimeLinter for Sublime Text) then you get instant feedback if you make a mistake. Then new is no more problematic than anything else.</p><p>Reinventing new seems like overkill, especially since its been done hundreds of times (seriously, I think every new JS developer creates their own \"classes\" library.)</p><p>If you really want to avoid using new then, as you mention, you can polyfill Object.create. The advantage there is that it is well understood by other people reading your code and is forward compatible.</p>", 
        "order": "000880278967", 
        "who": "Mat Scales"
    }, 
    {
        "createdAt": "Tue, 30 Apr 2013", 
        "indent": 0, 
        "message": "<p>I always thought of the \"new\" operator as meaning a new scope. This way we can interpret the line \"var obj = new Operator(1, 2);\" as \"create a new scope named obj from this function\". BTW, I like your class constructor, will definitely use for my new Javascript explorations. :)</p>", 
        "order": "000880182673", 
        "who": "Roberto De Almeida"
    }
]