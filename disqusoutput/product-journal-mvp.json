[
    {
        "createdAt": "Tue, 27 Jan 2015", 
        "indent": 0, 
        "message": "<p>\"Just Get It Shipped is okay, incrementally improving products is okay, but together they are boring and uncreative.\"</p><p>So what if it's boring and uncreative?  Isn't delivering the best overall result what's important?  Can't you find other places for your team to be creative and excited?</p>", 
        "order": "001820173458", 
        "who": "wins32767"
    }, 
    {
        "createdAt": "Tue, 27 Jan 2015", 
        "indent": 0, 
        "message": "<p>You seem to imply that waterfall is a viable way of creating software (as opposed to an example of how not to do it) and that a programming language isn't a design tool. I think you should watch this presentation:<br><a href=\"http://confreaks.com/videos/282-lsrc2010-real-software-engineering\" rel=\"nofollow noopener\" title=\"http://confreaks.com/videos/282-lsrc2010-real-software-engineering\">http://confreaks.com/videos...</a><br>I think your Dijkstra quotes are from a time where we didn't have automatic compilers, but used people for \"compiling\" (e.g. \"the fact that it [compiling] is done by cheap labor\").</p><p>I think there is a real problem that people may stop the creative process if the product looks \"done\" (which is why mockup-tools like balsamic often use a \"hand-drawn\" look). I think this is mostly a problem for non-programmers, that are in awe of the code and think it is hard to do, change or throw away.</p>", 
        "order": "001820515041", 
        "who": "Anders"
    }, 
    {
        "createdAt": "Wed, 28 Jan 2015", 
        "indent": 1, 
        "message": "<p>&gt; You seem to imply that waterfall is a viable way of creating software (as opposed to an example of how not to do it)</p><p>It's certainly *possible*.  Or maybe I think that design and planning can be thought about more expansively.  OK, and as I think about it, I am still very concerned about the hierarchical nature of Waterfall, which I think is bad.  Up-front design doesn't have to mean top-down design.</p><p>&gt; and that a programming language isn't a design tool</p><p>I think I said the opposite!  Though I used the phrase \"research\" instead of \"design\".  But I'll check out the video ;)</p>", 
        "order": "001820515041,001820853821", 
        "who": "Ian Bicking"
    }, 
    {
        "createdAt": "Wed, 28 Jan 2015", 
        "indent": 1, 
        "message": "<p>&gt;  Can't you find other places for your team to be creative and excited?</p><p>Sure, they just won't be using their creativity is service of the success of the product.  This is when people start honing their tools, starting side projects, delving into their craft.  This is the birth of many an open source project.</p>", 
        "order": "001820173458,001820855994", 
        "who": "Ian Bicking"
    }, 
    {
        "createdAt": "Fri, 30 Jan 2015", 
        "indent": 0, 
        "message": "<p>I struggle with MVP because the it often reduces good ideas to half baked. It can also end up design by committee as people throw the MVP card to filibuster a particular feature. MVP really is to fight feature creep and never shipping... which happens probably more often. iPhone 1.0 didn't have an App store or cut/paste which was probably a good comprise of must have features and shipping in a reasonable amount of time.</p><p>The more strict MBA/Prod Management concept is to ship only the core features and differentiators that would have a consumer buy or use your product. Don't ship anything more as it could impact your long term sales strategy.  Apple is the king of this. They know the feature set matures (like MS Word) and their product will commoditize. They ship the minimum features to get a new user to buy. They are slow to add features and with v6 and a bigger screen, they've hit a sweet spot with China market in a somewhat mature phone hardware/software ecosystem.  They've continued to extract big money out of the market.</p><p>I digress.</p><p>My point is, use MVP as a rule of thumb to ship pragmatically. Find the balance of features that users really need and too many features that slow shipping that you miss the market.</p><p>Another idea I can't ignore is the dictatorial 'visionary' model where a single person transcends any of this and make the decisions because great art isn't designed by committee.  Steve Jobs had a vision, hired the right people, negotiated the right deals, and got teams of people to build the right product at the right time.</p>", 
        "order": "001825798656", 
        "who": "Edwin"
    }
]