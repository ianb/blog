<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ian Bicking: a blog - Ian Bicking</title><link href="https://ianbicking.org/" rel="alternate"></link><link href="https://ianbicking.org/feeds/ian-bicking.atom.xml" rel="self"></link><id>https://ianbicking.org/</id><updated>2007-09-11T15:09:00-05:00</updated><entry><title>New Blog Software (Previous)</title><link href="https://ianbicking.org/blog/2007/08/new-blog-software-previous.html" rel="alternate"></link><published>2007-08-01T12:02:00-05:00</published><updated>2007-08-01T12:02:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-01:/blog/2007/08/new-blog-software-previous.html</id><summary type="html">&lt;!-- -*- mode: rst -*- --&gt;
&lt;p&gt;I&amp;#8217;ve switched my software over to WordPress.  This was long overdue, as anyone who ever wanted to read anything at all on this site probably knows.  Sometime I should really write an article reflecting on the failures of my previous blog software.  Lets just say that flat files aren …&lt;/p&gt;</summary><content type="html">&lt;!-- -*- mode: rst -*- --&gt;
&lt;p&gt;I&amp;#8217;ve switched my software over to WordPress.  This was long overdue, as anyone who ever wanted to read anything at all on this site probably knows.  Sometime I should really write an article reflecting on the failures of my previous blog software.  Lets just say that flat files aren&amp;#8217;t so hot&amp;nbsp;either.&lt;/p&gt;
&lt;p&gt;Now that my software doesn&amp;#8217;t suck, I have lots of posts I have been embarrassed to write because every new post potentially introduced new people to my crappy&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;Hopefully everything is setup correctly, redirects, archives, and the new&amp;nbsp;feed.&lt;/p&gt;
&lt;p&gt;My one worry is WordPress comments, which suck a bit.  They shouldn&amp;#8217;t collect the horrible quantity of spam that the old site has, so that&amp;#8217;s good, but I hate disconnected streams of comments.  I&amp;#8217;ve tried to modify the theme on this site to be more roomy, with less of the excessive whitespace that has become the norm.  I hope this whitespace kick goes the way of Creating Killer Websites Using Table Based Layout.  I.e., it&amp;#8217;ll soon look dated and everyone will move on.  So I hope you&amp;#8217;ll have more than two inches of width to comment in.  Honestly I wonder if I should just ditch WordPress comments and use something else entirely, like some kind of forum software and rig in some way of including the comments in the theme.  I wanted to install &lt;a class="reference external" href="http://meidell.dk/archives/2004/09/04/nested-comments/"&gt;threaded comments&lt;/a&gt;, but the installation process is rather&amp;nbsp;invasive.&lt;/p&gt;
&lt;p&gt;For editing I turned TinyMCE off (ugh), and installed &lt;a class="reference external" href="http://goldenspud.com/rotr/index.php/2006/12/15/using-restructuredtext-with-wordpress/"&gt;a restructured text plugin&lt;/a&gt;.   It took a while to figure out, since I have to include &lt;tt class="docutils literal"&gt;.. &lt;span class="pre"&gt;-*-&lt;/span&gt; mode: rst &lt;span class="pre"&gt;-*-&lt;/span&gt;&lt;/tt&gt; in the header of each post.  Oh well, a minor inconvenience.  I used &lt;a class="reference external" href="http://wordpress.org/extend/plugins/text-control/"&gt;Text Control&lt;/a&gt; to enable Markdown in comments, but I had to replace the actual &lt;tt class="docutils literal"&gt;markdown.php&lt;/tt&gt; it used, which was&amp;nbsp;broken.&lt;/p&gt;
</content><category term="misc"></category><category term="Non-technical"></category></entry><entry><title>Old Archives</title><link href="https://ianbicking.org/blog/2007/08/old-archives.html" rel="alternate"></link><published>2007-08-01T21:46:00-05:00</published><updated>2007-08-01T21:46:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-01:/blog/2007/08/old-archives.html</id><content type="html"></content><category term="misc"></category><category term="Programming"></category></entry><entry><title>Atom Models</title><link href="https://ianbicking.org/blog/2007/08/atom-models.html" rel="alternate"></link><published>2007-08-02T10:30:00-05:00</published><updated>2007-08-02T10:30:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-02:/blog/2007/08/atom-models.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been doing a bit more with Atom&amp;nbsp;lately.&lt;/p&gt;
&lt;p&gt;First, I started writing a library to manipulate Atom feeds and entries.  For the moment this is located in &lt;a class="reference external" href="http://svn.colorstudy.com/home/ianb/atom.py"&gt;atom.py&lt;/a&gt;.  It uses &lt;a class="reference external" href="http://codespeak.net/lxml/"&gt;lxml&lt;/a&gt;, as does everything markup related I do these&amp;nbsp;days.&lt;/p&gt;
&lt;p&gt;I came upon a revelation of sorts …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been doing a bit more with Atom&amp;nbsp;lately.&lt;/p&gt;
&lt;p&gt;First, I started writing a library to manipulate Atom feeds and entries.  For the moment this is located in &lt;a class="reference external" href="http://svn.colorstudy.com/home/ianb/atom.py"&gt;atom.py&lt;/a&gt;.  It uses &lt;a class="reference external" href="http://codespeak.net/lxml/"&gt;lxml&lt;/a&gt;, as does everything markup related I do these&amp;nbsp;days.&lt;/p&gt;
&lt;p&gt;I came upon a revelation of sorts when I was writing the library.  I first started with a library that looked like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Feed(object):
    def __init__(self, title, ...):
        self.title = title
        ..
    &amp;#64;classmethod
    def parse(cls, xml):
        if isinstance(xml, basestring):
            xml = etree.XML(xml)
        title = xml.xpath('//title').text
        ...
        return cls(title, ...)
    def serialize(self):
        el = etree.Element('{%s}feed' % atom_ns)
        title = etree.Element('{%s}title' % atom_ns)
        title.text = self.title
        el.append(title)
        ...
        return el
&lt;/pre&gt;
&lt;p&gt;Obviously there&amp;#8217;s ways to improve this and make it less verbose, and I went down that path for a while.  But then I decided the whole path was wrong.  Atom &lt;em&gt;is&lt;/em&gt; &lt;span class="caps"&gt;XML&lt;/span&gt;.  It&amp;#8217;s not the representation of some object I&amp;#8217;m creating.  If I have something that can&amp;#8217;t be represented in &lt;span class="caps"&gt;XML&lt;/span&gt;, it isn&amp;#8217;t Atom, and it doesn&amp;#8217;t belong in my Atom-related&amp;nbsp;objects.&lt;/p&gt;
&lt;p&gt;So instead I started making lxml more convenient when using Atom.  I don&amp;#8217;t keep any information except what is in the markup, I just make it more convenient to access that&amp;nbsp;information.&lt;/p&gt;
&lt;p&gt;I used lots of &lt;a class="reference external" href="http://users.rcn.com/python/download/Descriptor.htm"&gt;descriptors&lt;/a&gt; to do this, as the same patterns happened over and over.  For instance, the Feed object is fairly&amp;nbsp;simple:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Feed(AtomElement):
    entries = _findall_property('entry')
    author = _element_property('author')
&lt;/pre&gt;
&lt;p&gt;Which basically means that &lt;tt class="docutils literal"&gt;feed.entries&lt;/tt&gt; returns all &lt;tt class="docutils literal"&gt;&amp;lt;entry&amp;gt;&lt;/tt&gt; elements, and &lt;tt class="docutils literal"&gt;feed.author&lt;/tt&gt; returns the single &lt;tt class="docutils literal"&gt;author&lt;/tt&gt; element.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s also accessors for text elements (like &lt;tt class="docutils literal"&gt;&amp;lt;id&amp;gt;&lt;/tt&gt;) and date containing elements (like &lt;tt class="docutils literal"&gt;&amp;lt;updated&amp;gt;&lt;/tt&gt;) and just to access &lt;span class="caps"&gt;XML&lt;/span&gt; attributes as Python&amp;nbsp;attributes.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a number of&amp;nbsp;advantages:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No hidden&amp;nbsp;state.&lt;/li&gt;
&lt;li&gt;No deferred errors, since everything is always represented in the   &lt;a class="reference external" href="http://en.wikipedia.org/wiki/XML_Information_Set"&gt;&lt;span class="caps"&gt;XML&lt;/span&gt; infoset&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;All &lt;span class="caps"&gt;XML&lt;/span&gt; extensions work, even though my classes don&amp;#8217;t know anything   in particular about them.  There&amp;#8217;s a full &lt;span class="caps"&gt;API&lt;/span&gt; for manipulating the   &lt;span class="caps"&gt;XML&lt;/span&gt; that you can use, you don&amp;#8217;t have to use my&amp;nbsp;APIs.&lt;/li&gt;
&lt;li&gt;Even more obscure kinds of extensions work fine, like a custom attribute on an element.  There&amp;#8217;s absolutely zero normalization that&amp;nbsp;happens.&lt;/li&gt;
&lt;li&gt;I only have to write the parts where the normal &lt;span class="caps"&gt;XML&lt;/span&gt; (lxml) APIs are inconvenient, so the implementation stays&amp;nbsp;simple.&lt;/li&gt;
&lt;li&gt;There&amp;#8217;s no confusion over which object I might be talking about in my code.  There&amp;#8217;s no distinction between the &lt;span class="caps"&gt;XML&lt;/span&gt; object and the domain&amp;nbsp;object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since then I&amp;#8217;ve been working on a &lt;a class="reference external" href="https://svn.openplans.org/svn/TaggerClient/trunk/javascript/atom.js"&gt;Javascript library&lt;/a&gt; for handling Atom.  It&amp;#8217;s not as elegant.  I am trying to keep to this same principle, but of course I can&amp;#8217;t actually extend the &lt;span class="caps"&gt;DOM&lt;/span&gt; and so I can&amp;#8217;t add convenience methods.  So instead I&amp;#8217;m making a class that lightly wraps the &lt;span class="caps"&gt;DOM&lt;/span&gt; objects, with explicit getters and setters that simply read and modify those &lt;span class="caps"&gt;DOM&lt;/span&gt;&amp;nbsp;objects.&lt;/p&gt;
&lt;p&gt;One thing that I have found very useful in my development on the Javascript side is doctest-style testing.  You can see the &lt;a class="reference external" href="https://svn.openplans.org/svn/TaggerClient/trunk/javascript/tests/test.html"&gt;test&lt;/a&gt;, but to run it you have to check it out (it uses some &lt;tt class="docutils literal"&gt;svn:externals&lt;/tt&gt; which you don&amp;#8217;t get through the direct svn access).  After using that testing some more and being pleased with the result, I decided to package the Javascript doctest runner a bit better.  I removed the framework dependencies, did a bit of renaming (now it is &lt;em&gt;doctestjs&lt;/em&gt; or &lt;tt class="docutils literal"&gt;doctest.js&lt;/tt&gt; instead of &lt;em&gt;jsdoctest&lt;/em&gt;), wrote up &lt;a class="reference external" href="http://svn.colorstudy.com/doctestjs/trunk/docs/index.html"&gt;fairly comprehensive docs&lt;/a&gt;, and uploaded it to &lt;a class="reference external" href="http://openjsan.org/doc/i/ia/ianb/doctestjs/0.9/"&gt;&lt;span class="caps"&gt;JSAN&lt;/span&gt;&lt;/a&gt; (though at the moment the trunk from svn is probably better to use).  I think it&amp;#8217;s an excellent way of doing unit testing in Javascript, much better than any of the alternatives I&amp;#8217;ve seen.  It even has some notable advantages over &lt;a class="reference external" href="http://python.org/doc/current/lib/module-doctest.html"&gt;Python&amp;#8217;s doctest&lt;/a&gt;, like if you are using &lt;a class="reference external" href="http://www.getfirebug.com/"&gt;Firebug&lt;/a&gt; (which you must if you do Javascript development) you get a console session that runs in the same namespace as your tests, so you can easily do inspection of the objects if there&amp;#8217;s a&amp;nbsp;failure.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not sure about &lt;span class="caps"&gt;JSAN&lt;/span&gt;.  It&amp;#8217;s nice to have an index.  But I think they copy stuff from &lt;span class="caps"&gt;CPAN&lt;/span&gt; a bit too much.  Why should you have a text &lt;span class="caps"&gt;README&lt;/span&gt; file?  That&amp;#8217;s just silly; of course Javascript documentation should be &lt;span class="caps"&gt;HTML&lt;/span&gt;.  They batch processing.  Processing one package a day
on the fly shouldn&amp;#8217;t be overwhelming.  They want a &lt;span class="caps"&gt;MANIFEST&lt;/span&gt; file.  The standard metadata file is &lt;span class="caps"&gt;YAML&lt;/span&gt;, not &lt;span class="caps"&gt;JSON&lt;/span&gt;.  This should all be a little more Javascripty in my opinion.  But they also accept any kind of upload, so there&amp;#8217;s nothing stopping you from ignoring what you don&amp;#8217;t
care about.  I&amp;#8217;ll probably improve the packaging of doctestjs a bit in the future, and still ignore the parts I think are&amp;nbsp;silly.&lt;/p&gt;
</content><category term="misc"></category><category term="Javascript"></category><category term="Programming"></category><category term="Python"></category></entry><entry><title>Environmental Theater</title><link href="https://ianbicking.org/blog/2007/08/environmental-theater.html" rel="alternate"></link><published>2007-08-02T19:38:00-05:00</published><updated>2007-08-02T19:38:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-02:/blog/2007/08/environmental-theater.html</id><summary type="html">&lt;p&gt;If you read &lt;a class="reference external" href="http://www.schneier.com/blog/"&gt;Bruce Schneier&lt;/a&gt;, as any good geek should, you probably are familiar with the term &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Security_theater"&gt;&amp;#8220;security theater&amp;#8221;&lt;/a&gt;: measures that provide the feeling of security while doing little or nothing to actually provide&amp;nbsp;security.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, digression.  We had this recycling program in Chicago where we put our recyclables in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you read &lt;a class="reference external" href="http://www.schneier.com/blog/"&gt;Bruce Schneier&lt;/a&gt;, as any good geek should, you probably are familiar with the term &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Security_theater"&gt;&amp;#8220;security theater&amp;#8221;&lt;/a&gt;: measures that provide the feeling of security while doing little or nothing to actually provide&amp;nbsp;security.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, digression.  We had this recycling program in Chicago where we put our recyclables in blue bags into the trash, and they pick the blue bags out of the trash.  One imagines fancy computerized systems.  In reality I think there&amp;#8217;s just some people who watch trash go by on a
conveyor&amp;nbsp;belt.&lt;/p&gt;
&lt;p&gt;This all seemed fishy, but I hate waste on principle so I would dutifully recycled my trash, washed out containers, all that stuff. You&amp;#8217;d sometimes hear an environmentalist criticize the program because there was little perceived benefit, and so people didn&amp;#8217;t actually recycle much.  The system seemed a little improbable to me too, but then I also realized that recycling is a balance and it&amp;#8217;s easy to put more effort into recycling programs than is saved through the recycling itself.  So maybe this was efficient, all things&amp;nbsp;considered.&lt;/p&gt;
&lt;p&gt;Then I learned that actually only &lt;a class="reference external" href="http://www.chicagotribune.com/news/nationworld/chi-0610250063oct25,1,4280486.story"&gt;8% of recycling in blue bags is recovered&lt;/a&gt;. 92% of the time when I clean things out and put them carefully in their own container, I might as well have just thrown them away.  This really pissed me off, because it made it obvious that there never was an honest attempt to reduce waste through recycling.  Blue bags were just what they would give people to make them stop complaining about&amp;nbsp;recycling.&lt;/p&gt;
&lt;p&gt;The irony is that the environmentalists didn&amp;#8217;t complain about the recovery rates (which always were estimated at a low amount).  They complained about how many people were recycling.  Of course with a recovery rate that low it didn&amp;#8217;t &lt;em&gt;matter&lt;/em&gt; how many people were recycling.  The entire program was a total farce.  Now that the program is going away there doesn&amp;#8217;t seem to be much anger about how deceptive the program was, and I don&amp;#8217;t know if anyone is paying attention to the actual environmental impact of the new&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;Even if they recover the recycling it might still just be a game. Recycling is filled with farce.  Metal recycling is great.  That&amp;#8217;s why there&amp;#8217;s trucks that roam the alleys around Chicago looking for scrap metal.  There&amp;#8217;s a market and someone is willing to pay for the results.  There&amp;#8217;s not much of a market for anything else; maybe some glass, maybe a little&amp;nbsp;plastic.&lt;/p&gt;
&lt;p&gt;People actually get &lt;em&gt;angry&lt;/em&gt; when recycling programs restrict the plastics they will take.  It doesn&amp;#8217;t occur to them that some plastics are simply garbage.  They are worthless, and moving them around in special recycling containers just wastes everyone&amp;#8217;s time.  They are angry because they want to pretend they aren&amp;#8217;t being wasteful.  They aren&amp;#8217;t getting enough environmental&amp;nbsp;theater.&lt;/p&gt;
&lt;p&gt;A more concerning kind of environmental theater is &lt;a class="reference external" href="http://www.theoildrum.com/node/2354"&gt;ethanol&lt;/a&gt;.  With an &lt;a class="reference external" href="http://en.wikipedia.org/wiki/EROI"&gt;&lt;span class="caps"&gt;EROI&lt;/span&gt;&lt;/a&gt; (energy invested vs. energy produced) that hovers just above one, it&amp;#8217;s not helping the environment.  Biofuels on the whole seem quite  questionable.  Brazil has more efficient ethanol, but it&amp;#8217;s paired with deforestation.  A similar thing happens when trees for palm oil replace natural forests. And of course in all these cases, if plants weren&amp;#8217;t grown for fuel then plants would be grown for some other purpose.  So I can&amp;#8217;t really see any advantage in terms of &lt;span class="caps"&gt;CO2&lt;/span&gt; emissions &amp;#8212; and when you consider the relative inefficiency compared to attaining fossil fuels, the net effect of biofuels is &lt;a class="reference external" href="http://www.ecoworld.com/blog/2007/02/12/biofuel-is-not-carbon-neutral/"&gt;probably worse&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that environmental concern is mainstream I think we need to be on the watch for environmental theater.  Many of the people who play their parts in this theater are well meaning, which can make it awkward.  These are people who believe that The Important Thing Is To Raise Awareness.  But awareness has been raised, so the time for that kind of bullshit is past.  Lying about solutions, exaggerating specific problems, being fuzzy about facts &amp;#8212; that&amp;#8217;s always been bullshit, and I&amp;#8217;ve never found it acceptable.  But it&amp;#8217;s unfortunately become the norm among advocates of all sorts in these times.  The irony is that the advocacy has been done, the case has been made, enough people are convinced, but it may be hard to move beyond the theater to meaningful action.  Especially as the well-meaning people are replaced with cynics out to make&amp;nbsp;money.&lt;/p&gt;
</content><category term="misc"></category><category term="Non-technical"></category><category term="Politics"></category></entry><entry><title>Pronouncing “Django”</title><link href="https://ianbicking.org/blog/2007/08/pronouncing-django.html" rel="alternate"></link><published>2007-08-02T19:53:00-05:00</published><updated>2007-08-02T19:53:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-02:/blog/2007/08/pronouncing-django.html</id><summary type="html">&lt;p&gt;I&amp;#8217;m not saying this to anyone in particular, but I&amp;#8217;ve heard people pronounce Django incorrectly &lt;em&gt;way&lt;/em&gt; too often.  The &amp;#8220;dj&amp;#8221; in Django is a hard J, like in the word &amp;#8220;jury&amp;#8221; or &amp;#8220;jolly&amp;#8221;.  You don&amp;#8217;t pronounce the&amp;nbsp;D.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Alex Limi tells me &lt;em&gt;I&amp;#8217;m&lt;/em&gt; wrong too …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;m not saying this to anyone in particular, but I&amp;#8217;ve heard people pronounce Django incorrectly &lt;em&gt;way&lt;/em&gt; too often.  The &amp;#8220;dj&amp;#8221; in Django is a hard J, like in the word &amp;#8220;jury&amp;#8221; or &amp;#8220;jolly&amp;#8221;.  You don&amp;#8217;t pronounce the&amp;nbsp;D.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Alex Limi tells me &lt;em&gt;I&amp;#8217;m&lt;/em&gt; wrong too, and it&amp;#8217;s a soft J, like&amp;#8230; damn, I can&amp;#8217;t think of a word that uses a soft J in&amp;nbsp;English.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not sure I can use that pronunciation, I&amp;#8217;m afraid I&amp;#8217;ll sound all Frenchy and weird.  I&amp;#8217;ll give it a go.  Zhango zhango zhango&amp;#8230;&amp;nbsp;hmm&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Another update&lt;/strong&gt;: confirming my original pronunciation, Adrian says it &lt;em&gt;is&lt;/em&gt; a hard J.  Alex is just too European for his own good.  Does the debate rage on?  Hopefully&amp;nbsp;not.&lt;/p&gt;
</content><category term="misc"></category><category term="Programming"></category><category term="Python"></category></entry><entry><title>Fast CGI that isn’t FastCGI</title><link href="https://ianbicking.org/blog/2007/08/fast-cgi-that-isnt-fastcgi.html" rel="alternate"></link><published>2007-08-03T15:33:00-05:00</published><updated>2007-08-03T15:33:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-03:/blog/2007/08/fast-cgi-that-isnt-fastcgi.html</id><summary type="html">&lt;p&gt;There&amp;#8217;s a bunch of techniques for doing deployments of long-running processes (Zope, Python server, Rails, etc).  A pretty good technique is to do &lt;span class="caps"&gt;HTTP&lt;/span&gt; proxying.  There&amp;#8217;s some details and conventions I&amp;#8217;d like to &lt;a class="reference external" href="https://ianbicking.org/http-proxying-questions.html"&gt;see for &lt;span class="caps"&gt;HTTP&lt;/span&gt;&lt;/a&gt;, but that&amp;#8217;s not my concern&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; proxying isn&amp;#8217;t …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There&amp;#8217;s a bunch of techniques for doing deployments of long-running processes (Zope, Python server, Rails, etc).  A pretty good technique is to do &lt;span class="caps"&gt;HTTP&lt;/span&gt; proxying.  There&amp;#8217;s some details and conventions I&amp;#8217;d like to &lt;a class="reference external" href="https://ianbicking.org/http-proxying-questions.html"&gt;see for &lt;span class="caps"&gt;HTTP&lt;/span&gt;&lt;/a&gt;, but that&amp;#8217;s not my concern&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; proxying isn&amp;#8217;t great for commodity hosting.  Mostly you need to set up a new long-running process, and commodity hosts don&amp;#8217;t make that easy or reliable.  &lt;a class="reference external" href="http://www.fastcgi.com/"&gt;FastCGI&lt;/a&gt; offers one solution to that, essentially putting the process management into Apache or whatever web server you are&amp;nbsp;using.&lt;/p&gt;
&lt;p&gt;The problem with FastCGI is that it is finicky.  There&amp;#8217;s lots of configuration parameters, lots of parts don&amp;#8217;t work right, and there seems to be a golden path where things actually work but it&amp;#8217;s hard to know exactly what that&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Another technique that has been used in the past instead of FastCGI is a very small &lt;span class="caps"&gt;CGI&lt;/span&gt; script.  One example in &lt;a class="reference external" href="http://python.ca/scgi/"&gt;&lt;span class="caps"&gt;SCGI&lt;/span&gt;&lt;/a&gt; is called &lt;a class="reference external" href="http://quixote.python.ca/scgi.dev/cgi2scgi.c"&gt;cgi2scgi&lt;/a&gt;.  This small script is fast to run (it compiles to 12kb), and all it does is take the &lt;span class="caps"&gt;CGI&lt;/span&gt; request and turn it into a &lt;span class="caps"&gt;SCGI&lt;/span&gt; request to a long-running&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;This is a nice start, and easy to deploy, except it doesn&amp;#8217;t handle long-running processes.  A great feature to add to something like this would be simple process management.  I imagine something where if the socket (named or a port) that the &lt;tt class="docutils literal"&gt;cgi2scgi&lt;/tt&gt; script connects to isn&amp;#8217;t up or working, it runs a script that will start the server.  If another request comes in while the server is starting up, it shouldn&amp;#8217;t try to start the server twice.  If the server is randomly killed (as is common on commodity hosters) then the next request will try to bring the server&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;Unlike FastCGI, this won&amp;#8217;t try to handle different process models or anything fancy.  It&amp;#8217;s up to the startup script to set everything up properly, start multiple worker processes if necessary, etc.  There&amp;#8217;s probably some tricky details I haven&amp;#8217;t thought of, and it&amp;#8217;s slightly annoying to write all this in C (but necessary, since it&amp;#8217;s part of the &lt;span class="caps"&gt;CGI&lt;/span&gt; script, which must be small).  But I think it can be done better than existing in-the-wild FastCGI&amp;nbsp;implementations.&lt;/p&gt;
&lt;p&gt;And when we&amp;#8217;re done, I think we could have something that would be a really good basis for commodity hosting of a whole bunch of non-&lt;span class="caps"&gt;PHP&lt;/span&gt; frameworks.  You can distribute the Linux binaries, as all the Commodity Hosts That Matter can run those (even the &lt;span class="caps"&gt;BSD&lt;/span&gt; ones should be fine).  Easy application installation practically falls right out of&amp;nbsp;that.&lt;/p&gt;
</content><category term="misc"></category><category term="Programming"></category><category term="Web"></category></entry><entry><title>Zonbu &amp; S3</title><link href="https://ianbicking.org/blog/2007/08/zonbu-s3.html" rel="alternate"></link><published>2007-08-04T13:42:00-05:00</published><updated>2007-08-04T13:42:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-04:/blog/2007/08/zonbu-s3.html</id><summary type="html">&lt;p&gt;I read &lt;a class="reference external" href="http://times.usefulinc.com/2007/08/04-zonbu"&gt;Edd Dumbill&amp;#8217;s post on the Zonbu computer&lt;/a&gt; with interest.  The &lt;a class="reference external" href="http://zonbu.com/"&gt;Zonbu&lt;/a&gt; is a small and inexpensive computer, reminiscent of the Mac Mini but running Linux.  The disk is fairly small (4Gb flash) and is intended to serve more as a cache for your network storage than as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I read &lt;a class="reference external" href="http://times.usefulinc.com/2007/08/04-zonbu"&gt;Edd Dumbill&amp;#8217;s post on the Zonbu computer&lt;/a&gt; with interest.  The &lt;a class="reference external" href="http://zonbu.com/"&gt;Zonbu&lt;/a&gt; is a small and inexpensive computer, reminiscent of the Mac Mini but running Linux.  The disk is fairly small (4Gb flash) and is intended to serve more as a cache for your network storage than as your primary&amp;nbsp;store.&lt;/p&gt;
&lt;p&gt;The network store is a frontend on &lt;a class="reference external" href="http://www.amazon.com/gp/browse.html?node=16427261"&gt;Amazon S3&lt;/a&gt;.  This is interesting but confusing, because Zonbu is selling the computer at a price of $99 if you agree to a two year contract for storage at $12.95 a month (about $300 over two&amp;nbsp;years).&lt;/p&gt;
&lt;p&gt;The underlying S3 storage is pretty cheap: $0.15 per Gb-month, and $0.10/$0.18 per Gb-upload/download (discounts for higher quantities, which probably Zonbu can get but an individual user couldn&amp;#8217;t).  So if you are storing, say, 10Gb of data, and retrieving about 10Gb per month (including all the syncing, cache misses, etc), that comes to about $3 per month.  Zonbu costs between $0.50 and $0.20 per Gb-month, depending on the plan, and you pay for capacity, not what you actually use (S3 only charges for what you really use).  I assume there are bandwidth limits but they aren&amp;#8217;t&amp;nbsp;published.&lt;/p&gt;
&lt;p&gt;As an aside, I was looking for backup systems for my dad a few months ago, and looked at some of the backup systems that included network storage.  They were often in the range of $10-20 per month, and weren&amp;#8217;t very high capacity.  I came upon &lt;a class="reference external" href="http://www.maluke.com/s3man/"&gt;S3 Backup&lt;/a&gt;, which is a fairly simple Windows program to upload to S3.  The price of S3 is way better than any of the other commercial solutions.  The billing and account setup isn&amp;#8217;t as simple as other systems (since it&amp;#8217;s not intended to be), but this seems like something that should be fixed.  There should be a consumer version of S3.  It could make it easier for software developers to make services for people without actually having to maintain infrastructure.  Or maybe more accurately, it would make this possible for &lt;em&gt;open source developers&lt;/em&gt;, since we have no interest in being the intermediary for anything as that&amp;#8217;s all liability with no payoff.  (Or maybe it&amp;#8217;s the opposite &amp;#8212; only by being an intermediary can you get payoff?  The economics of open source get&amp;nbsp;confusing.)&lt;/p&gt;
&lt;p&gt;Zonbu, as a device and company, appeals to me.  But I can&amp;#8217;t help but feel frustrated about the network storage pricing, even though those prices are completely reasonable (and it seems without draconian cancellation fees like mobile phones).  Still there&amp;#8217;s something about the equation that I just &lt;em&gt;hate&lt;/em&gt; &amp;#8212; loss leaders, unnecessarily intermediated transactions, hidden costs, and a price structure that depends on people not fully utilizing what they pay for.  And I &lt;em&gt;really like&lt;/em&gt; the S3 pricing &amp;#8212; you pay for what you use and the pricing is completely transparent.  What I like about it is that at no point is Amazon expecting you to act irrationally, and for Amazon to profit from your irrational choices.  They aren&amp;#8217;t expecting you to reserve more than you need.  They aren&amp;#8217;t going to punish you if you don&amp;#8217;t reserve&amp;nbsp;enough.&lt;/p&gt;
&lt;p&gt;Another part of why I like S3&amp;#8217;s structure is that Amazon (well, Amazon Web Services) owns this particular space in terms of services, and it&amp;#8217;s not because of advertising or because they cornered the market or used proprietary anything to restrict choices or made secret business deals with anyone.  They simply are providing a service with enough quality and efficiency that no one else can compete (at least at the moment).  When quality and efficiency drives market choices it makes me feel all fuzzy and capitalist. This happens infrequently enough that perhaps I get a little overly excitable about resellers with different price&amp;nbsp;structures.&lt;/p&gt;
</content><category term="misc"></category><category term="Non-technical"></category></entry><entry><title>Atompub &amp; OpenID</title><link href="https://ianbicking.org/blog/2007/08/atompub-openid.html" rel="alternate"></link><published>2007-08-06T11:38:00-05:00</published><updated>2007-08-06T11:38:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-06:/blog/2007/08/atompub-openid.html</id><summary type="html">&lt;p&gt;One of the thinmgs I would like to do is to interact with &lt;a class="reference external" href="http://atompub.org/rfc4287.html"&gt;Atompub (aka Atom Publishing Protocol)&lt;/a&gt; stores in Javascript through the browser.  Since this effectively the browser itself interacting with the Atompub server, browser-like authentication methods would be nice.  But services like Atompub don&amp;#8217;t work nicely with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the thinmgs I would like to do is to interact with &lt;a class="reference external" href="http://atompub.org/rfc4287.html"&gt;Atompub (aka Atom Publishing Protocol)&lt;/a&gt; stores in Javascript through the browser.  Since this effectively the browser itself interacting with the Atompub server, browser-like authentication methods would be nice.  But services like Atompub don&amp;#8217;t work nicely with the kinds of authentication methods that normal websites use.  One of these is &lt;a class="reference external" href="http://openid.net/"&gt;OpenID&lt;/a&gt;, which is particularly&amp;nbsp;browser-focused.&lt;/p&gt;
&lt;p&gt;From the perspective of a client, OpenID basically works like&amp;nbsp;this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You need to login.  You tell the original server what your OpenID   &lt;span class="caps"&gt;URL&lt;/span&gt; is,&amp;nbsp;somehow.&lt;/li&gt;
&lt;li&gt;The original server does some redirects, maybe some popups,&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;Your OpenID server (attached to your OpenID &lt;span class="caps"&gt;URL&lt;/span&gt;) authenticates you   in some fashion, and then tells the original&amp;nbsp;server.&lt;/li&gt;
&lt;li&gt;The original server probably sets a signed cookie so that in   subsequent requests you stay logged in.  You cannot do this little   redirection dance for every request, since it&amp;#8217;s actually quite&amp;nbsp;intrusive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what happens when I have an XMLHttpRequest that needs to be authenticated?  Neither the XMLHttpRequest nor Javascript generally can do the authentication.  Only the browser can, with the user&amp;#8217;s&amp;nbsp;interaction.&lt;/p&gt;
&lt;p&gt;One thought I have is a 401 Unauthorized response, with a header&amp;nbsp;like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
WWW-Authenticate: Cookie location=&amp;quot;http://original.server/login.html&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Which means I need to open up &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://original.server/login.html&lt;/span&gt;&lt;/tt&gt; and have the user log in, and the final result is that a cookie will be set.  XMLHttpRequest sends cookies automatically I believe, so once the browser has the cookie then all the Javascript requests get the same cookie and hence&amp;nbsp;authentication.&lt;/p&gt;
&lt;p&gt;One problem, though, is that you have to wait around for a while for the login to succede, then continue on your way.  A typical situation is that you have to return to the original page you were requesting, and people often do something like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/login?redirect_to=original_url&lt;/span&gt;&lt;/tt&gt;.  In this case we might want something like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/login?opener_call=reattempt_request&lt;/span&gt;&lt;/tt&gt;, where when the login process is over we call &lt;tt class="docutils literal"&gt;window.opener.reattempt_request()&lt;/tt&gt; in&amp;nbsp;Javascript.&lt;/p&gt;
&lt;p&gt;Maybe it would make sense for that &lt;tt class="docutils literal"&gt;location&lt;/tt&gt; variable to be a &lt;a class="reference external" href="http://bitworking.org/projects/URI-Templates/draft-gregorio-uritemplate-01.html"&gt;&lt;span class="caps"&gt;URI&lt;/span&gt; Template&lt;/a&gt;, with some predefined variables, like opener, back,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;For general backward compatibility, would it be reasonable to send 307 Temporary Redirect plus &lt;span class="caps"&gt;WWW&lt;/span&gt;-Authenticate, and let XMLHttpRequests or other service clients sort it out, while normal browser requests do the normal login&amp;nbsp;redirect?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Another question/thought: is it okay to send multiple &lt;span class="caps"&gt;WWW&lt;/span&gt;-Authenticate headers, to give the client options for how it wants to do authentication?  It seems vaguely okay, according to &lt;a class="reference external" href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.47"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 2616 14.47&lt;/a&gt;.&lt;/p&gt;
</content><category term="misc"></category><category term="Javascript"></category><category term="Programming"></category><category term="Web"></category></entry><entry><title>Tempita</title><link href="https://ianbicking.org/blog/2007/08/tempita.html" rel="alternate"></link><published>2007-08-06T16:50:00-05:00</published><updated>2007-08-06T16:50:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-06:/blog/2007/08/tempita.html</id><summary type="html">&lt;p&gt;I mentioned a templating language I put into Paste &lt;a class="reference external" href="https://ianbicking.org/what-im-up-to-jun07.html"&gt;a while ago&lt;/a&gt;, but since then I extracted it into a separate package called &lt;a class="reference external" href="http://pythonpaste.org/tempita/"&gt;Tempita&lt;/a&gt;.  I think the documentation is fairly complete (it&amp;#8217;s a small language), but I&amp;#8217;ll describe it shortly&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;I wanted a text-substitution language, because I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I mentioned a templating language I put into Paste &lt;a class="reference external" href="https://ianbicking.org/what-im-up-to-jun07.html"&gt;a while ago&lt;/a&gt;, but since then I extracted it into a separate package called &lt;a class="reference external" href="http://pythonpaste.org/tempita/"&gt;Tempita&lt;/a&gt;.  I think the documentation is fairly complete (it&amp;#8217;s a small language), but I&amp;#8217;ll describe it shortly&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;I wanted a text-substitution language, because I wanted something to be used to generate Python files, config files, etc.  I also didn&amp;#8217;t want a complex &lt;span class="caps"&gt;API&lt;/span&gt;, with search paths and components or something that interacts with import machinery, or any of that.  &lt;a class="reference external" href="http://python.org/doc/current/lib/node40.html"&gt;string.Template&lt;/a&gt; is &lt;em&gt;almost&lt;/em&gt; good enough, but not&amp;nbsp;quite.&lt;/p&gt;
&lt;p&gt;I started with the idea of something vaguely like &lt;a class="reference external" href="http://www.djangoproject.com/documentation/templates/"&gt;Django Templates&lt;/a&gt;, though since I didn&amp;#8217;t care about more advanced templating features like blocks that didn&amp;#8217;t apply to my use cases.  You do variable substitution with &lt;tt class="docutils literal"&gt;{{var|filter}}&lt;/tt&gt;, and there&amp;#8217;s no escape character, and that&amp;#8217;s about where the similarity&amp;nbsp;ends.&lt;/p&gt;
&lt;p&gt;I realized there was no real reason to use anything but &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{{...}}&lt;/span&gt;&lt;/tt&gt;, so it&amp;#8217;s just &lt;tt class="docutils literal"&gt;{{if expr}}&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;{{endif}}&lt;/tt&gt;, etc.  There&amp;#8217;s an escape for arbitrary Python, similar to how Kid does it &amp;#8212; you can have blocks of Python code, but the Python code can only prepare variables and functions, it can&amp;#8217;t write anything.  I think this gives a nice escape for complex logic (for times when you can&amp;#8217;t put the logic in a &lt;tt class="docutils literal"&gt;.py&lt;/tt&gt; file), without the jumbled mish-mash of languages like &lt;span class="caps"&gt;PHP&lt;/span&gt; where you can trully mix functions and&amp;nbsp;output.&lt;/p&gt;
&lt;p&gt;Because it allows Python expressions everywhere, special tags don&amp;#8217;t seem so necessary.  Instead you can just provide functions to do whatever you need.  I wrote &lt;a class="reference external" href="http://pythonpaste.org/tempita/#bunch-and-looper"&gt;a couple little ones&lt;/a&gt; as a start.  There&amp;#8217;s a few things that are awkward still, because there&amp;#8217;s no way to define a block of template as a function, or pass the output of a block to a function.  I haven&amp;#8217;t actually needed these yet, but I can &lt;em&gt;imagine&lt;/em&gt; needing this (e.g., when creating nested&amp;nbsp;structures).&lt;/p&gt;
&lt;p&gt;I wouldn&amp;#8217;t suggest using this templating language in a web application, but I think it can be quite helpful for all the cases where you have to generate text and you &lt;em&gt;aren&amp;#8217;t&lt;/em&gt; writing a web application (e.g., a &lt;a class="reference external" href="http://www.groovie.org/articles/2007/02/11/wsgi-middleware-isnt-middleware-time-for-better-language"&gt;Framework Component&lt;/a&gt;).  In my experience the web templating languages tend to be complex to invoke and understand in these contexts (and &lt;a class="reference external" href="http://projects.dowski.com/projects/buffet"&gt;Buffet&lt;/a&gt; unfortunately doesn&amp;#8217;t help in my mind, as it&amp;#8217;s loading system is so&amp;nbsp;vague).&lt;/p&gt;
</content><category term="misc"></category><category term="Programming"></category><category term="Python"></category></entry><entry><title>XO B4</title><link href="https://ianbicking.org/blog/2007/08/xo-b4.html" rel="alternate"></link><published>2007-08-07T22:19:00-05:00</published><updated>2007-08-07T22:19:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-07:/blog/2007/08/xo-b4.html</id><summary type="html">&lt;a href='https://ianbicking.org/wp-content/uploads/2007/08/front-view.jpg' title='Front view of the XO'&gt;&lt;img class="alignright" src='https://ianbicking.org/wp-content/uploads/2007/08/front-view.thumbnail.jpg' alt='Front view of the XO'  /&gt;&lt;/a&gt;&lt;p&gt;I recently received a Beta-4 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/XO-1_(laptop)"&gt;&lt;span class="caps"&gt;XO&lt;/span&gt; laptop&lt;/a&gt;.  I won&amp;#8217;t describe the hardware on the whole, but probably a number of readers here have seen the B2 laptops so I thought I&amp;#8217;d write up a quick description of the changes I&amp;#8217;ve noticed.  If you haven&amp;#8217;t seen the …&lt;/p&gt;</summary><content type="html">&lt;a href='https://ianbicking.org/wp-content/uploads/2007/08/front-view.jpg' title='Front view of the XO'&gt;&lt;img class="alignright" src='https://ianbicking.org/wp-content/uploads/2007/08/front-view.thumbnail.jpg' alt='Front view of the XO'  /&gt;&lt;/a&gt;&lt;p&gt;I recently received a Beta-4 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/XO-1_(laptop)"&gt;&lt;span class="caps"&gt;XO&lt;/span&gt; laptop&lt;/a&gt;.  I won&amp;#8217;t describe the hardware on the whole, but probably a number of readers here have seen the B2 laptops so I thought I&amp;#8217;d write up a quick description of the changes I&amp;#8217;ve noticed.  If you haven&amp;#8217;t seen the &lt;span class="caps"&gt;XO&lt;/span&gt; in person, then the minutia of this post may be&amp;nbsp;boring.&lt;/p&gt;
&lt;p&gt;First and most substantially, the &lt;span class="caps"&gt;CPU&lt;/span&gt;, memory, and disk have all been upgraded.  It now has &lt;span class="caps"&gt;256MB&lt;/span&gt; &lt;span class="caps"&gt;RAM&lt;/span&gt;, &lt;span class="caps"&gt;1GB&lt;/span&gt; of flash disk, and a 433MHz Geode processor.  This makes a very significant impact on the&amp;nbsp;speed.&lt;/p&gt;
&lt;a href='https://ianbicking.org/wp-content/uploads/2007/08/back-cover.jpg' title='Back cover'&gt;&lt;img class="alignleft" src='https://ianbicking.org/wp-content/uploads/2007/08/back-cover.thumbnail.jpg' alt='Back cover'  /&gt;&lt;/a&gt;&lt;p&gt;It features a big colored &lt;span class="caps"&gt;XO&lt;/span&gt; on the back.  Laptops will get different random combinations of X and O colors, so you can tell one laptop from another.  I&amp;#8217;m a little disappointed to have coincidentally received an X with the same color as the laptop&amp;#8217;s&amp;nbsp;green.&lt;/p&gt;
&lt;a href='https://ianbicking.org/wp-content/uploads/2007/08/tilt.jpg' title='The screen tilt'&gt;&lt;img src='https://ianbicking.org/wp-content/uploads/2007/08/tilt.thumbnail.jpg' class="alignright" alt='The screen tilt'  /&gt;&lt;/a&gt;&lt;p&gt;The screen now tilts back a bit further than it used to.  It&amp;#8217;s now comfortable to have it on a table or my lap, where before I liked to have it higher up.  Putting the B2 and B4 side-by-side the change in tilt doesn&amp;#8217;t seem significant, but using them it&amp;#8217;s quite&amp;nbsp;noticeable.&lt;/p&gt;
&lt;a href='https://ianbicking.org/wp-content/uploads/2007/08/rubber-antenna.jpg' title='Rubber antenna'&gt;&lt;img class="alignleft" src='https://ianbicking.org/wp-content/uploads/2007/08/rubber-antenna.thumbnail.jpg' alt='Rubber antenna'  /&gt;&lt;/a&gt;&lt;p&gt;The antenna (&amp;#8220;ears&amp;#8221;) are now rubber.  This is intended to increase its durability when dropped (apparently it can sustain a &lt;a class="reference external" href="http://lists.laptop.org/pipermail/community-news/2007-July/000069.html"&gt;1.5 meter drop onto its antenna&lt;/a&gt;).  Unfortunately along the way the latching mechanism became stiffer, so I don&amp;#8217;t let people puzzle out how to open it anymore, it&amp;#8217;s requires too much forcing to&amp;nbsp;guess.&lt;/p&gt;
&lt;a href='https://ianbicking.org/wp-content/uploads/2007/08/bumps.jpg' title='Handle texture'&gt;&lt;img class="alignright" src='https://ianbicking.org/wp-content/uploads/2007/08/bumps.thumbnail.jpg' alt='Handle texture'  /&gt;&lt;/a&gt;&lt;p&gt;The handle is now textured.  I never had any problem keeping a grip on it before, but the dots look nice.  A cute detail is that around the edge the dots turn into X&amp;#8217;s, making little &lt;span class="caps"&gt;XO&lt;/span&gt;&amp;nbsp;figures.&lt;/p&gt;
&lt;a href='https://ianbicking.org/wp-content/uploads/2007/08/top-keys.jpg' title='Top of keyboard'&gt;&lt;img class="alignleft" src='https://ianbicking.org/wp-content/uploads/2007/08/top-keys.thumbnail.jpg' alt='Top of keyboard'  /&gt;&lt;/a&gt;&lt;p&gt;The keyboard has had a few changes.  Instead of a slider for the backlight and another slider for the volume, they have been combined into one key with four sensors.  The slider that had been used for the backlight is now free to be used by applications.  The chat button changed appearances a bit, and it looks like the camera/voice button has been turned into a zoom button.  The mouse buttons now have an X on the left button and an O on the right button, to make it easier to refer to them in instructions.  The keyboard also is generally more responsive; the spacebar doesn&amp;#8217;t seem to have any dead spots anymore, and the keys are more reliable when tapped.  It&amp;#8217;s still a &lt;em&gt;very&lt;/em&gt; small keyboard if you try to touch type, but it&amp;#8217;s not impossible (at some point I seem to have lost the ability to hunt and peck, but I can get&amp;nbsp;by).&lt;/p&gt;
&lt;p&gt;There are now small white LEDs under the plastic for both the microphone and camera.  Whenever these are in use, the light turns on.  This is done in hardware as a security measure, so malicious software can&amp;#8217;t surreptitiously record things.  The plastic around the screen is also now a light color of gray instead of white; from what I understand to make the screen seem higher contrast, I suppose because the white of the plastic could otherwise overpower the white of the&amp;nbsp;screen.&lt;/p&gt;
&lt;p&gt;The laptop also came with an &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lithium_iron_phosphate_battery"&gt;LiFePO4&lt;/a&gt; battery, which is lighter and higher capacity than the NiMH batteries used before.  The total difference in weight isn&amp;#8217;t very noticeable.  (Li-Ion batteries haven&amp;#8217;t been an option in the &lt;span class="caps"&gt;XO&lt;/span&gt; because of safety&amp;nbsp;concerns.)&lt;/p&gt;
&lt;p&gt;The software has had more changes, but that&amp;#8217;s an entirely different&amp;nbsp;topic.&lt;/p&gt;
</content><category term="misc"></category><category term="OLPC"></category></entry><entry><title>Opening Python Classes</title><link href="https://ianbicking.org/blog/2007/08/opening-python-classes.html" rel="alternate"></link><published>2007-08-08T14:03:00-05:00</published><updated>2007-08-08T14:03:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-08:/blog/2007/08/opening-python-classes.html</id><summary type="html">&lt;p&gt;So, I was reading through comments to despam my old posts before archiving them, and came upon &lt;a class="reference external" href="http://dan.chokola.com/journal/?user=dan&amp;amp;entry=2007-01-27.105426"&gt;this old reply&lt;/a&gt; to &lt;a class="reference external" href="https://ianbicking.org/re-ruby-and-python-compared.html"&gt;this old post of mine&lt;/a&gt; which was a reply to &lt;a class="reference external" href="http://web.archive.org/web/20070329162213/http://www.rexx.com/~oinkoink/Ruby_v_Python.html"&gt;this much older post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I won&amp;#8217;t reply to that post much, because it&amp;#8217;s mostly&amp;#8230; well, not useful …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So, I was reading through comments to despam my old posts before archiving them, and came upon &lt;a class="reference external" href="http://dan.chokola.com/journal/?user=dan&amp;amp;entry=2007-01-27.105426"&gt;this old reply&lt;/a&gt; to &lt;a class="reference external" href="https://ianbicking.org/re-ruby-and-python-compared.html"&gt;this old post of mine&lt;/a&gt; which was a reply to &lt;a class="reference external" href="http://web.archive.org/web/20070329162213/http://www.rexx.com/~oinkoink/Ruby_v_Python.html"&gt;this much older post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I won&amp;#8217;t reply to that post much, because it&amp;#8217;s mostly&amp;#8230; well, not useful to respond to.  But people often talk about the wonders of Open Classes in Ruby.  For Python people who aren&amp;#8217;t familiar with what that means, you can&amp;nbsp;do:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Somehow acquire SomeClassThatAlreadyExists
class SomeClassThatAlreadyExists
    def some_method(blahblahblah)
        stuff
    end
end
&lt;/pre&gt;
&lt;p&gt;And &lt;tt class="docutils literal"&gt;SomeClassThatAlreadyExists&lt;/tt&gt; has a &lt;tt class="docutils literal"&gt;some_method&lt;/tt&gt; added to it (or if that method already exists, then the method is replaced with the new&amp;nbsp;implementation).&lt;/p&gt;
&lt;p&gt;In Python when you do this, you&amp;#8217;ve defined an entirely new class that just happens to have the name &lt;tt class="docutils literal"&gt;SomeClassThatAlreadyExists&lt;/tt&gt;.  It doesn&amp;#8217;t actually effect the original class, and probably will leave you confused because of the two very different classes with the same name.  In Ruby when you define a class that already exists, you are extending the class&amp;nbsp;in-place.&lt;/p&gt;
&lt;p&gt;You can change Python classes in-place, but there&amp;#8217;s no special syntax for it, so people either think you can&amp;#8217;t do it, or don&amp;#8217;t realize that you are doing the same thing as in Ruby but without the syntactic help.  I guess this will be easier with &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-3129/"&gt;class decorators&lt;/a&gt;, but some time ago I also wrote a recipe using normal decorators that looks like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;magic_set(SomeClassThatAlreadyExists)
def some_method(self, blahblahblah):
    stuff
&lt;/pre&gt;
&lt;p&gt;The only thing that is even slightly magic about the setting is that I look at the first argument of the function to determine if you are adding an instance, class, or static method to an object, and let you add it to classes or instances.  It&amp;#8217;s really not that magic, even if it is called &lt;a class="reference external" href="http://svn.colorstudy.com/home/ianb/recipes/magicset.py"&gt;magicset&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I think with class decorators you could do&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;extend(SomeClassThatAlreadyExists)
class SomeClassThatAlreadyExists:
    def some_method(self, blahblahblah):
        stuff
&lt;/pre&gt;
&lt;p&gt;Implemented like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def extend(class_to_extend):
    def decorator(extending_class):
        class_to_extend.__dict__.update(extending_class.__dict__)
        return class_to_extend
    return decorator
&lt;/pre&gt;
</content><category term="misc"></category><category term="Programming"></category><category term="Python"></category></entry><entry><title>Defaults &amp; Inheritance</title><link href="https://ianbicking.org/blog/2007/08/defaults-inheritance.html" rel="alternate"></link><published>2007-08-10T17:45:00-05:00</published><updated>2007-08-10T17:45:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-10:/blog/2007/08/defaults-inheritance.html</id><summary type="html">&lt;p&gt;I thought I&amp;#8217;d note a way I try to make classes reasonably customizable without creating lots of classes, but letting other people create classes if they&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a common technique; I&amp;#8217;m going to use a class from &lt;a class="reference external" href="http://pythonpaste.org/wsgiproxy/"&gt;WSGIProxy&lt;/a&gt; as an example, because that&amp;#8217;s where I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I thought I&amp;#8217;d note a way I try to make classes reasonably customizable without creating lots of classes, but letting other people create classes if they&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a common technique; I&amp;#8217;m going to use a class from &lt;a class="reference external" href="http://pythonpaste.org/wsgiproxy/"&gt;WSGIProxy&lt;/a&gt; as an example, because that&amp;#8217;s where I was about to use this technique when I thought it might make an okay&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;In this example there&amp;#8217;s a &lt;span class="caps"&gt;WSGI&lt;/span&gt; application that forwards requests to another &lt;span class="caps"&gt;HTTP&lt;/span&gt; server.  There&amp;#8217;s different ways to forward requests, depending on what kind of data you want to give the remote server about the original request.  One example is Zope&amp;#8217;s VirtualHostMonster, which takes requests like &lt;tt class="docutils literal"&gt;/VirtualHostBase/http/example.org:80/rootdir/VirtualHostBase/path&lt;/tt&gt; &amp;#8212; the idea is that the server can then realize that the original request was for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://example.org/path&lt;/span&gt;&lt;/tt&gt; (and should ignore any Host headers), and that Zope is supposed to serve that from the internal path &lt;tt class="docutils literal"&gt;/rootdir/path&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a problem with this particular pattern, because there&amp;#8217;s no way to mount, say, &lt;tt class="docutils literal"&gt;/blog&lt;/tt&gt; onto some Zope &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/sitename/blog-application&lt;/span&gt;&lt;/tt&gt; path, because there&amp;#8217;s no concept like in &lt;span class="caps"&gt;WSGI&lt;/span&gt; or &lt;span class="caps"&gt;CGI&lt;/span&gt; of SCRIPT_NAME &amp;#8212; the base &lt;em&gt;path&lt;/em&gt; of the request.  It only handles the base &lt;em&gt;host&lt;/em&gt;.  So I didn&amp;#8217;t just want to settle on&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m kind of inclined to prefer headers, like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;X-Script-Name:&lt;/span&gt; /blog&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;X-Forwarded-Server:&lt;/span&gt; example.org&lt;/tt&gt;, etc.  But I want to support both&amp;nbsp;forms.&lt;/p&gt;
&lt;p&gt;The common way to do this&amp;nbsp;is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class WSGIProxyApp(object):

    def __init__(self, host): ...

    def __call__(self, environ, start_response):
        # actual application interface...
        # Constructs the base request:
        request = self.construct_request(environ)
        # Uses one of these conventions:
        self.update_headers(environ, request)
        ... do stuff with request ...

    def update_headers(self, orig_environ, request):
        raise NotImplementedError

class VirtualHostMonsterApp(WSGIProxyApp):

    def update_headers(self, orig_environ, request):
        request.environ['SCRIPT_NAME'] = (
            '/VirtualHostRoot/%(wsgi.scheme)s/%(HTTP_HOST)s/VirtualHostRoot/'
            % orig_environ)

class HeaderSetterApp(WSGIProxyApp):

    def update_headers(self, orig_environ, request):
        request.environ['HTTP_X_SCRIPT_NAME'] = orig_environ['SCRIPT_NAME']
        # and so on...
&lt;/pre&gt;
&lt;p&gt;Then you use one of the subclasses depending on your needs. Personally I think this really sucks.  For one thing, you may have to determine which class to use based on some configuration parameter, which can get awkward.  And you might want to subclass the class to change the functionality some yourself, but you have to subclass &lt;em&gt;both&lt;/em&gt; of them.  There&amp;#8217;s patterns to handle this, with policies and factories and other crap; but it&amp;#8217;s &lt;em&gt;not a hard problem&lt;/em&gt;, and those patterns are hard solutions to a problem that &lt;em&gt;shouldn&amp;#8217;t&lt;/em&gt; be&amp;nbsp;hard.&lt;/p&gt;
&lt;p&gt;Also, it&amp;#8217;s harder to inform people about the options available to them, and somewhat harder to use these classes.  So I tend to do something&amp;nbsp;like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class WSGIProxyApp(object):
    default_forwarding_style = 'headers'

    def __init__(self, host, forwarding_style=None):
        ...
        if forwarding_style is None:
            forwarding_style = self.default_forwarding_style
        self.forwarding_style = forwarding_style

    def __call__(self, environ, start_response):
        ...
        method = self.forwarding_style
        if isinstance(method, str):
            method = getattr(self, 'forward_'+self.forwarding_style)
        method(environ, request)
        ...

    def forward_headers(self, orig_environ, request): ...
    def forward_virtual_host_monster(self, orig_environ, request): ...
&lt;/pre&gt;
&lt;p&gt;This way it&amp;#8217;s just a simple parameter to change the style.  You can pass in your own function, or use one of the named methods already available.  The &lt;tt class="docutils literal"&gt;default_forwarding_style&lt;/tt&gt; class variable lets you change the default in subclasses.  If the default was in the function signature it would be much more awkard to change it, because you&amp;#8217;d have to override the method and its signature with just that one change, then delegate back to the superclass&amp;nbsp;method.&lt;/p&gt;
</content><category term="misc"></category><category term="Programming"></category><category term="Python"></category></entry><entry><title>Atom Publishing Protocol: Atompub</title><link href="https://ianbicking.org/blog/2007/08/atom-publishing-protocol-atompub.html" rel="alternate"></link><published>2007-08-12T13:50:00-05:00</published><updated>2007-08-12T13:50:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-12:/blog/2007/08/atom-publishing-protocol-atompub.html</id><summary type="html">&lt;p&gt;Doing stuff with the Atom Publishing Protocol, I&amp;#8217;ve noticed that it goes by two (shortened) names: &lt;span class="caps"&gt;APP&lt;/span&gt; and Atompub.  I&amp;#8217;d become used to calling it &lt;span class="caps"&gt;APP&lt;/span&gt;, but I&amp;#8217;ve decided to make a conscious effort to call it Atompub from now on, and I encourage you all to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Doing stuff with the Atom Publishing Protocol, I&amp;#8217;ve noticed that it goes by two (shortened) names: &lt;span class="caps"&gt;APP&lt;/span&gt; and Atompub.  I&amp;#8217;d become used to calling it &lt;span class="caps"&gt;APP&lt;/span&gt;, but I&amp;#8217;ve decided to make a conscious effort to call it Atompub from now on, and I encourage you all to do the same.  You cannot usefully search for &amp;#8220;&lt;span class="caps"&gt;APP&lt;/span&gt;&amp;#8221;, and it&amp;#8217;s pronunciation is ambiguous.  Atompub is a much better&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;And as long as we&amp;#8217;re &lt;a class="reference external" href="https://ianbicking.org/2007/08/02/pronouncing-django/"&gt;talking about names&lt;/a&gt;, I&amp;#8217;ll note that the &lt;a class="reference external" href="http://mail.python.org/pipermail/catalog-sig/2007-July/001460.html"&gt;Cheese Shop is now called PyPI again&lt;/a&gt;.  I &lt;em&gt;think&lt;/em&gt; we are supposed to pronounce it &lt;em&gt;pih-pee&lt;/em&gt;, distinct from &lt;a class="reference external" href="http://codespeak.net/pypy/"&gt;PyPy&lt;/a&gt; which is pie-pie.  (Blast, PyPI is down; the Zope guys have been making a static stripped-down mirror for use with Setuptools, &lt;a class="reference external" href="http://download.zope.org/ppix/"&gt;over here&lt;/a&gt;)&lt;/p&gt;
</content><category term="misc"></category><category term="Python"></category><category term="Web"></category></entry><entry><title>Of Microformats and the Semantic Web</title><link href="https://ianbicking.org/blog/2007/08/of-microformats-and-the-semantic-web.html" rel="alternate"></link><published>2007-08-14T11:52:00-05:00</published><updated>2007-08-14T11:52:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-14:/blog/2007/08/of-microformats-and-the-semantic-web.html</id><summary type="html">&lt;p&gt;I was talking a little with &lt;a class="reference external" href="http://eikeon.com/"&gt;Daniel Krech&lt;/a&gt; (author of &lt;a class="reference external" href="http://rdflib.net/"&gt;rdflib&lt;/a&gt;) about Semantic Web stuff and &lt;a class="reference external" href="http://microformats.org/"&gt;microformats&lt;/a&gt; and what they all mean. And he was saying that microformats were nice, because you could &lt;em&gt;do&lt;/em&gt; something with them, but it would be nice to see that&amp;nbsp;generalized.&lt;/p&gt;
&lt;p&gt;By &amp;#8220;generalized&amp;#8221; I think …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was talking a little with &lt;a class="reference external" href="http://eikeon.com/"&gt;Daniel Krech&lt;/a&gt; (author of &lt;a class="reference external" href="http://rdflib.net/"&gt;rdflib&lt;/a&gt;) about Semantic Web stuff and &lt;a class="reference external" href="http://microformats.org/"&gt;microformats&lt;/a&gt; and what they all mean. And he was saying that microformats were nice, because you could &lt;em&gt;do&lt;/em&gt; something with them, but it would be nice to see that&amp;nbsp;generalized.&lt;/p&gt;
&lt;p&gt;By &amp;#8220;generalized&amp;#8221; I think he meant a general way of expressing arbitrary relationships.  As an example, in &lt;a class="reference external" href="http://microformats.org/wiki/hcard"&gt;hCard&lt;/a&gt; you can&amp;nbsp;do:&lt;/p&gt;
&lt;pre class="code html literal-block"&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;773-555-3821&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The hCard specification (itself leaning heavily on vCard) defines &lt;tt class="docutils literal"&gt;tel&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;type&lt;/tt&gt;, and there&amp;#8217;s a general pattern of what &lt;tt class="docutils literal"&gt;value&lt;/tt&gt; means.  But if you want to describe some new kind of structure, there&amp;#8217;s no way to do that really; there&amp;#8217;s no marital status format, for instance (which would be useful for a singles search engine, as an&amp;nbsp;example).&lt;/p&gt;
&lt;p&gt;So I started thinking: can you really generalize it?  And I started to think about &lt;a class="reference external" href="http://bitworking.org/news/193/Do-we-need-WADL"&gt;Joe Gregorio&amp;#8217;s attack of &lt;span class="caps"&gt;WADL&lt;/span&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here is the very &lt;a class="reference external" href="http://bitworking.org/projects/pastebin/main.cgi/bin/7"&gt;first example in the &lt;span class="caps"&gt;WADL&lt;/span&gt; specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That &lt;span class="caps"&gt;WADL&lt;/span&gt; file is a description of a search interface. But &lt;a class="reference external" href="http://bitworking.org/projects/pastebin/main.cgi/bin/8"&gt;here     is how you should really do it&lt;/a&gt;. That&amp;#8217;s     an &lt;a class="reference external" href="http://www.opensearch.org/Home"&gt;OpenSearch&lt;/a&gt; document, that     also describes a search&amp;nbsp;interface.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: What&amp;#8217;s the&amp;nbsp;difference?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: A&amp;nbsp;mime-type.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: That doesn&amp;#8217;t seem like much, does it make a&amp;nbsp;difference?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Yes, it makes a big difference. When you get an OpenSearch     document there is a whole data model and a set of interactions you     know are possible because you read the OpenSearch     specification. By reading that spec you know how to construct     search queries. When I get a &lt;span class="caps"&gt;WADL&lt;/span&gt; document it might describe     anything, from how to construct a search, to the &lt;a class="reference external" href="http://bitworking.org/projects/atom/"&gt;&lt;span class="caps"&gt;APP&lt;/span&gt;&lt;/a&gt;, to &lt;a class="reference external" href="http://bitworking.org/news/JEP"&gt;&lt;span class="caps"&gt;JEP&lt;/span&gt;&lt;/a&gt;, to &lt;span class="caps"&gt;XML&lt;/span&gt;-&lt;span class="caps"&gt;RPC&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;So when I say the difference is a &amp;#8216;mime-type&amp;#8217;, what I mean is that     there is an entire spec somewhere which describes what that     document means, and that meaning may include hypertext     functionality, ala (X)&lt;span class="caps"&gt;HTML&lt;/span&gt;, XForms, and&amp;nbsp;OpenSearch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This made me think of shared understanding more than explicit descriptions.  OpenSearch, &lt;span class="caps"&gt;APP&lt;/span&gt;, and Atom are very well described, but I think that&amp;#8217;s only half of it: they are useful when they describe something that many people already&amp;nbsp;understand.&lt;/p&gt;
&lt;p&gt;Digressing slightly, one &amp;#8220;semantic markup&amp;#8221; ideal that still bugs me is &lt;tt class="docutils literal"&gt;&amp;lt;strong&amp;gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;lt;em&amp;gt;&lt;/tt&gt; vs. &lt;tt class="docutils literal"&gt;&amp;lt;b&amp;gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;lt;i&amp;gt;&lt;/tt&gt;.  When I compose text I choose to make some words bold and some italic.  I have no idea what &amp;#8220;strong&amp;#8221; and &amp;#8220;emphasis&amp;#8221; are even supposed to mean.  When I&amp;#8217;m composing text, I don&amp;#8217;t actually know &lt;em&gt;why&lt;/em&gt; I choose one or the other.  If I sat down and thought about it I&amp;#8217;m sure I could come up with a set of rules that describe when bold is appropriate and when italic is appropriate.  But that is reflecting on my choice, it is not describing my choice.  There is no intermediate semantic meaning between what I am saying and bold and italic.  I &lt;em&gt;think&lt;/em&gt; in bold and italic.  Readers in turn find meaning in the text itself; they do not parse my writing into semantic markup in their&amp;nbsp;brain.&lt;/p&gt;
&lt;p&gt;I think there&amp;#8217;s some connection between this and the shared understanding that microformats represents, and a more generalized &lt;span class="caps"&gt;RDF&lt;/span&gt; model does not represent.  I know what hCard means; not just in an intellectual way, but I can imagine a dozen functional uses of it without hardly trying, and of course I am entirely clear on what contact information &lt;em&gt;means&lt;/em&gt;.  Moreover, I know what it means without actually figuring out what it means; if you asked me to articulate what contact information means I&amp;#8217;d have to think a little, and I&amp;#8217;m sure many people would come up with bad answers or be stumped.  And yet they all actually understand what it&amp;nbsp;means.&lt;/p&gt;
&lt;p&gt;Bringing this back to Joe&amp;#8217;s post, if I write something that produces or consumes Atom, Atompub, or OpenSearch, I understand the &lt;em&gt;why&lt;/em&gt; of my code.  With both &lt;span class="caps"&gt;WADL&lt;/span&gt; and &lt;span class="caps"&gt;RDF&lt;/span&gt; my code is divorced of the why.  This isn&amp;#8217;t about my personal understanding either; explaining it to &lt;em&gt;me&lt;/em&gt; doesn&amp;#8217;t serve any purpose, because with any exchange format it has to make sense to many many people to be useful.  Even an education campaign won&amp;#8217;t fix this: education by description is far inferior to education by doing, and there&amp;#8217;s no &amp;#8220;doing&amp;#8221; to &lt;span class="caps"&gt;WADL&lt;/span&gt; and &lt;span class="caps"&gt;RDF&lt;/span&gt; right&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;That said, what is sufficiently obvious in the future may not be obvious now.  Maybe we&amp;#8217;ll all get smarter.  Maybe someone will pioneer this stuff in a way that is really useful (Facebook?), and grow the public&amp;#8217;s intuition about describing relationships in an abstract way. But &lt;em&gt;until then&lt;/em&gt; I think microformats are going about this the right way, describing those things that are most easily&amp;nbsp;describable.&lt;/p&gt;
</content><category term="misc"></category><category term="Programming"></category><category term="Web"></category></entry><entry><title>Reflection and Description Of Meaning</title><link href="https://ianbicking.org/blog/2007/08/reflection-and-description-of-meaning.html" rel="alternate"></link><published>2007-08-14T14:18:00-05:00</published><updated>2007-08-14T14:18:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-14:/blog/2007/08/reflection-and-description-of-meaning.html</id><summary type="html">&lt;p&gt;After writing my &lt;a class="reference external" href="https://ianbicking.org/2007/08/14/of-microformats-and-the-semantic-web/"&gt;last post&lt;/a&gt; I thought I might follow up with a bit of cognitive speculation. Since the &lt;a class="reference external" href="https://ianbicking.org/2007/08/14/of-microformats-and-the-semantic-web/#comment-148"&gt;first comment&lt;/a&gt; was exactly about the issue I was thinking about writing on, I might as well follow up&amp;nbsp;quickly.&lt;/p&gt;
&lt;p&gt;Jeff Snell&amp;nbsp;replied:&lt;/p&gt;
&lt;blockquote&gt;
You parse semantic markup in rich text all …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;After writing my &lt;a class="reference external" href="https://ianbicking.org/2007/08/14/of-microformats-and-the-semantic-web/"&gt;last post&lt;/a&gt; I thought I might follow up with a bit of cognitive speculation. Since the &lt;a class="reference external" href="https://ianbicking.org/2007/08/14/of-microformats-and-the-semantic-web/#comment-148"&gt;first comment&lt;/a&gt; was exactly about the issue I was thinking about writing on, I might as well follow up&amp;nbsp;quickly.&lt;/p&gt;
&lt;p&gt;Jeff Snell&amp;nbsp;replied:&lt;/p&gt;
&lt;blockquote&gt;
You parse semantic markup in rich text all the time. When     formatting changes, you apply a reason. &lt;span class="caps"&gt;RFC&lt;/span&gt;&amp;#8217;s don&amp;#8217;t capitalize     &lt;span class="caps"&gt;MUST&lt;/span&gt; and &lt;span class="caps"&gt;SHOULD&lt;/span&gt; because the author is thinking in upper-case     versus lower-case. They&amp;#8217;re putting a strong emphasis on those     words. As a reader, you take special notice of those words being     formatted that way and immediately recognize that they contain a     special importance. So I think that readers &lt;strong&gt;do parse writing     into semantic markup inside their brains.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Emphasis not added.  Wait, bold isn&amp;#8217;t emphasis, it&amp;#8217;s strong!  So sorry, &lt;span class="caps"&gt;STRONG&lt;/span&gt; not&amp;nbsp;added.&lt;/p&gt;
&lt;p&gt;I think the reasoning here is flawed, in that it supposes that &lt;em&gt;reflection&lt;/em&gt; on how we think is an accurate way of &lt;em&gt;describing&lt;/em&gt; how we&amp;nbsp;think.&lt;/p&gt;
&lt;p&gt;A few years ago I got interested in cognition for a while and particularly some of the new theories on consciousness.  One of the parts that really stuck with me was the difference in how we think about thinking, and how thinking really works (as revealed with timing experiments).  That is, our conscious thought (the thinking-about-thinking) happened after the actual thought; we make up reasons for our actions when we&amp;#8217;re challenged, but if we aren&amp;#8217;t challenged to explain our actions there&amp;#8217;s no consciousness at all (of course, you can challenge yourself to explain your reasoning &amp;#8212; but you usually won&amp;#8217;t).  And then we revise history so that our reasoning precedes our decision, but that&amp;#8217;s not always very accurate. This gets around the infinite-loop problem, where either there&amp;#8217;s always another level of meta-consciousness reasoning about the lower level of consciousness, or there&amp;#8217;s a potentially infinite sequence of &lt;em&gt;whys&lt;/em&gt; that have to be answered for every decision.  And of course sometimes we really &lt;em&gt;do&lt;/em&gt; make rational decisions and there are several levels of &lt;em&gt;why&lt;/em&gt; answered before we commit.  But this is not the most common case, and there&amp;#8217;s always a limit to how much reflection we can do.  There are always decisions made without conscious consideration &amp;#8212; if only to free ourselves to focus on the important&amp;nbsp;decisions.&lt;/p&gt;
&lt;p&gt;And so as both a reader and a writer, I &lt;em&gt;think&lt;/em&gt; in terms of italic and bold.  As a reader and a writer there is of course translation from one form to another.  There&amp;#8217;s some idea inside of me that I want to get out in my writing, there&amp;#8217;s some idea outside of me that I want to understand as a reader.  But just because I &lt;em&gt;can&lt;/em&gt; describe some intermediate form of semantic meaning, it doesn&amp;#8217;t mean that that meaning is actually there.  Instead I &lt;em&gt;invent&lt;/em&gt; things like &amp;#8220;strong&amp;#8221; and &amp;#8220;emphasis&amp;#8221; when I&amp;#8217;m asked to decide why I chose a particular text style.  But the real decision is intuitive &amp;#8212; I map directly from my ideas to words on the page, or vice versa for&amp;nbsp;reading.&lt;/p&gt;
&lt;p&gt;Obviously this is not true for all markup.  But my intuition as both a reader and a writer about bold and italic is strong enough that I feel confident there&amp;#8217;s no intermediary representation.  This is not unlike the fact I don&amp;#8217;t consider the phonetics of most words (though admittedly I did when trying to spell &amp;#8220;phonetics&amp;#8221;); common words are opaque tokens that I read in their entirety without consideration of their component letters.  And a good reader reads text words without consideration of their vocal equivalents (though as a writer I read my own writing out loud&amp;#8230; is that typical?  I&amp;#8217;m guessing it is).  A good reader can of course vocalize if asked, but that doesn&amp;#8217;t mean the vocalization is an accurate representation of their original reading&amp;nbsp;experience.&lt;/p&gt;
&lt;p&gt;Though it&amp;#8217;s kind of an aside, I think the use of &lt;span class="caps"&gt;MUST&lt;/span&gt; and &lt;span class="caps"&gt;SHOULD&lt;/span&gt; in RFCs fits with this theory.  By using all caps they emphasize the word over the prose, they make the reader see the words as tokens unique from &amp;#8220;must&amp;#8221; and &amp;#8220;should&amp;#8221;, with special meanings that are related to but also much more strict than their usual English meaning.  The caps are a way of disturbing our natural way of determining meaning because they need a more exact&amp;nbsp;language.&lt;/p&gt;
</content><category term="misc"></category><category term="HTML"></category><category term="Non-technical"></category></entry><entry><title>DictMixin</title><link href="https://ianbicking.org/blog/2007/08/dictmixin.html" rel="alternate"></link><published>2007-08-17T00:02:00-05:00</published><updated>2007-08-17T00:02:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-17:/blog/2007/08/dictmixin.html</id><summary type="html">&lt;p&gt;Quite some time ago I gave a little presentation on &lt;a class="reference external" href="http://python.org/doc/current/lib/module-UserDict.html"&gt;DictMixin&lt;/a&gt; at &lt;a class="reference external" href="http://chipy.org"&gt;ChiPy&lt;/a&gt;.  If you haven&amp;#8217;t used DictMixin before, it&amp;#8217;s a class that implements all the derivative methods of dictionaries so you only have to implement the most minimal set: &lt;tt class="docutils literal"&gt;__getitem__&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__setitem__&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__delitem__&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;keys&lt;/tt&gt;.  It&amp;#8217;s a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quite some time ago I gave a little presentation on &lt;a class="reference external" href="http://python.org/doc/current/lib/module-UserDict.html"&gt;DictMixin&lt;/a&gt; at &lt;a class="reference external" href="http://chipy.org"&gt;ChiPy&lt;/a&gt;.  If you haven&amp;#8217;t used DictMixin before, it&amp;#8217;s a class that implements all the derivative methods of dictionaries so you only have to implement the most minimal set: &lt;tt class="docutils literal"&gt;__getitem__&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__setitem__&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__delitem__&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;keys&lt;/tt&gt;.  It&amp;#8217;s a lot better than subclassing &lt;tt class="docutils literal"&gt;dict&lt;/tt&gt; directly, as you have to implement a lot more, and &lt;tt class="docutils literal"&gt;dict&lt;/tt&gt; implies a specific kind of storage.  With DictMixin you can get the information from&amp;nbsp;anywhere.&lt;/p&gt;
&lt;p&gt;I thought of a couple examples, and wrote some &lt;a class="reference external" href="http://python.org/doc/current/lib/module-doctest.html"&gt;doctests&lt;/a&gt; for them; I thought satisfying the doctests would itself be the presentation. I&amp;#8217;m not sure how it worked; it was a fairly experienced crowd, but the switch from code to test can be&amp;nbsp;disorienting.&lt;/p&gt;
&lt;p&gt;One of the examples I used was a filesystem access layer. Representing a filesystem as a dictionary is nothing new, but the simplicity of the representation worked well.  Here&amp;#8217;s how it&amp;nbsp;works:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An &lt;tt class="docutils literal"&gt;FSDict&lt;/tt&gt; represents one&amp;nbsp;directory.&lt;/li&gt;
&lt;li&gt;The keys are the filenames in the&amp;nbsp;directory.&lt;/li&gt;
&lt;li&gt;The values are the contents of the files&amp;nbsp;(strings).&lt;/li&gt;
&lt;li&gt;When there is a subdirectory, it is another FSDict&amp;nbsp;instance.&lt;/li&gt;
&lt;li&gt;When you assign a dictionary-like object to a key, it creates a   FSDict from that&amp;nbsp;object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dictionaries have lots of methods, like &lt;tt class="docutils literal"&gt;items()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;update()&lt;/tt&gt;, etc.  But using DictMixin you just implement the four methods.  First, the&amp;nbsp;setup:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class FSDict(DictMixin):
    def __init__(self, path):
        self.path = path
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Creation&lt;/em&gt; of a dictionary is not part of the dictionary interface. This seems a little strange at first, but the &lt;tt class="docutils literal"&gt;dict&lt;/tt&gt; &lt;em&gt;class&lt;/em&gt; interface isn&amp;#8217;t the same as the dictionary &lt;em&gt;instance&lt;/em&gt; interface.  So &lt;tt class="docutils literal"&gt;FSDict.__init__&lt;/tt&gt; doesn&amp;#8217;t bear any particular relation to &lt;tt class="docutils literal"&gt;dict.__init__&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Now the other methods&amp;#8230; in each case, strings and dictionaries (files and directories) are treated&amp;nbsp;differently.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def __getitem__(self, item):
    fn = os.path.join(self.path, item)
    if not os.path.exists(fn):
        raise KeyError(&amp;quot;File %s does not exist&amp;quot; % fn)
    if os.path.isdir(fn):
        return self.__class__(fn)
    f = open(fn, 'rb')
    c = f.read()
    f.close()
    return c
&lt;/pre&gt;
&lt;p&gt;Note the use of &lt;tt class="docutils literal"&gt;self.__class__(fn)&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;FSDict(fn)&lt;/tt&gt;. This makes the class subclassable if you retain the &lt;tt class="docutils literal"&gt;FSDict.__init__&lt;/tt&gt; signature.  This way subclasses will create new instances using the subclass.  Note also that &lt;tt class="docutils literal"&gt;KeyError&lt;/tt&gt; is part of the dictionary interface (an important part!), so we can&amp;#8217;t raise &lt;tt class="docutils literal"&gt;IOError&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Now,&amp;nbsp;assignment&amp;#8230;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def __setitem__(self, item, value):
    if item in self:
        del self[item]
    fn = os.path.join(self.path, item)
    if isinstance(value, str):
        f = open(fn, 'wb')
        f.write(value)
        f.close()
    else:
        # Assume it is a dictionary
        os.mkdir(fn)
        f = self[item]
        f.update(value)
&lt;/pre&gt;
&lt;p&gt;Note that with subdirectories (represented as nested dictionaries) we let &lt;tt class="docutils literal"&gt;DictMixin.update&lt;/tt&gt; do all the hard work, and just create an empty directory to be&amp;nbsp;filled.&lt;/p&gt;
&lt;p&gt;Deletion&amp;#8230;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def __delitem__(self, item):
    fn = os.path.join(self.path, item)
    if not os.path.exists(fn):
        raise KeyError(&amp;quot;File %s does not exist&amp;quot; % fn)
    if os.path.isdir(fn):
        ## one way...
        self[item].clear()
        os.rmdir(fn)
        ## another way...
        #shutil.rmtree(fn)
    else:
        os.unlink(fn)
&lt;/pre&gt;
&lt;p&gt;Enumeration&amp;#8230;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def keys(self):
    return os.listdir(self.path)
&lt;/pre&gt;
&lt;p&gt;So, to recursively copy &lt;tt class="docutils literal"&gt;'/foo/bar'&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;'/dest/path/bar'&lt;/tt&gt; you&amp;nbsp;do:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
FSDict('/dest/path')['bar'] = FSDict('/foo')['bar']
&lt;/pre&gt;
&lt;p&gt;It doesn&amp;#8217;t really matter if &lt;tt class="docutils literal"&gt;'/foo/bar'&lt;/tt&gt; is a directory or file. There&amp;#8217;s a number of other clever things that come out of this.  I think it&amp;#8217;s an example of the power of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Closure_%28mathematics%29"&gt;a closed set&lt;/a&gt; &amp;#8212; dictionaries are expressable from these four operations, and all the other methods can be derived from there.  If you find this interesting, you might want to read the &lt;a class="reference external" href="http://svn.python.org/view/python/trunk/Lib/UserDict.py?view=markup"&gt;source for DictMixin&lt;/a&gt;; it&amp;#8217;s only about 95&amp;nbsp;lines.&lt;/p&gt;
&lt;p&gt;My article &lt;a class="reference external" href="https://ianbicking.org/templating-via-dict-wrappers.html"&gt;templating via dict wrappers&lt;/a&gt; has some other similar dict&amp;nbsp;tricks.&lt;/p&gt;
</content><category term="misc"></category><category term="Programming"></category><category term="Python"></category></entry><entry><title>WebOb</title><link href="https://ianbicking.org/blog/2007/08/webob.html" rel="alternate"></link><published>2007-08-18T19:37:00-05:00</published><updated>2007-08-18T19:37:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-18:/blog/2007/08/webob.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve have it in my head to extract/rewrite parts of &lt;a class="reference external" href="http://pythonpaste.org"&gt;Paste&lt;/a&gt; lately.  &lt;a class="reference external" href="https://ianbicking.org/2007/08/06/tempita/"&gt;Tempita&lt;/a&gt; was one&amp;nbsp;example.&lt;/p&gt;
&lt;p&gt;The request and response functions in Paste grew very organically.  I wasn&amp;#8217;t trying to create a framework, so I studiously avoided anything that might look like a request or response object …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve have it in my head to extract/rewrite parts of &lt;a class="reference external" href="http://pythonpaste.org"&gt;Paste&lt;/a&gt; lately.  &lt;a class="reference external" href="https://ianbicking.org/2007/08/06/tempita/"&gt;Tempita&lt;/a&gt; was one&amp;nbsp;example.&lt;/p&gt;
&lt;p&gt;The request and response functions in Paste grew very organically.  I wasn&amp;#8217;t trying to create a framework, so I studiously avoided anything that might look like a request or response object.  I felt that would be stepping on toes or something.  Eventually, though, &lt;a class="reference external" href="http://groovie.org/"&gt;Ben Bangert&lt;/a&gt; really wanted a request object for &lt;a class="reference external" href="http://pylonshq.com/"&gt;Pylons&lt;/a&gt;, and it went in &lt;a class="reference external" href="http://pythonpaste.org/module-paste.wsgiwrappers.html"&gt;paste.wsgiwrappers&lt;/a&gt;.  And at a certain point I decided that the class-based access was really just fine, and doing lots of &lt;tt class="docutils literal"&gt;function(environ, &lt;span class="pre"&gt;...)&lt;/span&gt;&lt;/tt&gt; was no better than &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Request(environ).function(...)&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So I started &lt;a class="reference external" href="http://pythonpaste.org/webob/"&gt;WebOb&lt;/a&gt;.  WebOb has Request, Response, and some exceptions, incorporating the functionality of Paste&amp;#8217;s &lt;tt class="docutils literal"&gt;paste.request&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;paste.response&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;paste.wsgilib&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;paste.httpexceptions&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;paste.httpheaders&lt;/tt&gt;.  And some extra&amp;nbsp;stuff.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve included a comparison with &lt;a class="reference external" href="http://pythonpaste.org/webob/differences.html"&gt;a few other framework request/response objects&lt;/a&gt;.  What this doesn&amp;#8217;t note, though, is that WebOb has a much larger &lt;a class="reference external" href="http://pythonpaste.org/webob/class-webob.Request.html"&gt;Request&lt;/a&gt; and &lt;a class="reference external" href="http://pythonpaste.org/webob/class-webob.Response.html"&gt;Response&lt;/a&gt; objects.  I&amp;#8217;ve taken almost all the &lt;a class="reference external" href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html"&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; headers&lt;/a&gt; and mapped them to parsed attributes.  So &lt;tt class="docutils literal"&gt;req.if_modified_since&lt;/tt&gt; returns a &lt;tt class="docutils literal"&gt;datetime&lt;/tt&gt; object, and &lt;tt class="docutils literal"&gt;req.if_none_match&lt;/tt&gt; returns a somewhat set-like object, as a few examples.  I created a lot of view-like objects for this, representing the canonical form of the information in several other forms (the &lt;span class="caps"&gt;WSGI&lt;/span&gt; request environment, and the status/headers/body of the&amp;nbsp;response).&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s fairly well tested and includes almost everything I think it should include, but I reserve the right to change the &lt;span class="caps"&gt;API&lt;/span&gt; any way I want until 1.0; this means if you have &lt;em&gt;any&lt;/em&gt; opinion on the &lt;span class="caps"&gt;API&lt;/span&gt; I have nothing to stop me from taking your opinions into&amp;nbsp;account.&lt;/p&gt;
&lt;p&gt;Oh, and it has &lt;a class="reference external" href="http://pythonpaste.org/webob/"&gt;docs&lt;/a&gt;, really.  They may not be the best docs, but they mention most everything and are automatically tested for accuracy.  If you just want a sense of the feel, maybe the &lt;a class="reference external" href="http://pythonpaste.org/webob/file-example.html"&gt;file-serving example&lt;/a&gt; would be a good place to start (though really you&amp;#8217;ll only read about the Response object&amp;nbsp;there).&lt;/p&gt;
</content><category term="misc"></category><category term="Programming"></category><category term="Python"></category><category term="Web"></category></entry><entry><title>The Shrinking Python Web Framework World</title><link href="https://ianbicking.org/blog/2007/08/the-shrinking-python-web-framework-world.html" rel="alternate"></link><published>2007-08-21T23:25:00-05:00</published><updated>2007-08-21T23:25:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-21:/blog/2007/08/the-shrinking-python-web-framework-world.html</id><summary type="html">&lt;p&gt;When I was writing the summary of &lt;a class="reference external" href="http://pythonpaste.org/webob/differences.html"&gt;differences between WebOb and other request objects&lt;/a&gt;, to remind myself of web frameworks I might have forgotten I went to the &lt;a class="reference external" href="http://wiki.python.org/moin/WebFrameworks"&gt;WebFrameworks page&lt;/a&gt; on the Python&amp;nbsp;wiki.&lt;/p&gt;
&lt;p&gt;Looking through that page I&amp;#8217;m reminded how many framework options there have been.  And I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I was writing the summary of &lt;a class="reference external" href="http://pythonpaste.org/webob/differences.html"&gt;differences between WebOb and other request objects&lt;/a&gt;, to remind myself of web frameworks I might have forgotten I went to the &lt;a class="reference external" href="http://wiki.python.org/moin/WebFrameworks"&gt;WebFrameworks page&lt;/a&gt; on the Python&amp;nbsp;wiki.&lt;/p&gt;
&lt;p&gt;Looking through that page I&amp;#8217;m reminded how many framework options there have been.  And I was further reminded of how few relevant options there are now.  From all this, there have emerged just a few options: Django, Pylons, TurboGears, Zope.  No offense to anyone left out of that list &amp;#8212; I know there&amp;#8217;s some other actively developed frameworks out there.  But frankly they aren&amp;#8217;t serious choices; they might be fine internal tools, or interesting experiments, but they are clearly on a different tier (and they all have questionable&amp;nbsp;futures).&lt;/p&gt;
&lt;p&gt;And now that &lt;a class="reference external" href="http://groups.google.com/group/turbogears/browse_thread/thread/d1d2e416023e7033"&gt;TurboGears 2 will be based on Pylons&lt;/a&gt; the list looks smaller&amp;nbsp;still.&lt;/p&gt;
&lt;p&gt;For a long, long time (longer than most of those frameworks have existed) people have complained about the proliferation of web frameworks in Python.  Those of us involved in developing web frameworks in Python haven&amp;#8217;t been able to respond all that well. Complaining doesn&amp;#8217;t magically lead to solutions, and you can&amp;#8217;t just will there to be a single Python web framework.  You can work towards that, but that&amp;#8217;s what we&amp;#8217;ve been doing&amp;#8230; mostly people don&amp;#8217;t seem to notice.  It&amp;#8217;s just not an easy thing to work towards; the problem space for a web framework isn&amp;#8217;t well defined, its end goal is far more vague than most people immediately realize, and it involves &lt;em&gt;consensus&lt;/em&gt;, which makes everything much harder.  We said the market would decide, which is kind of a cop out (the market decides through the decisions of developers) but that&amp;#8217;s the best answer we&amp;nbsp;had.&lt;/p&gt;
&lt;p&gt;But after all this time, it seems clear that we are getting much closer to that goal.  If you squint &lt;em&gt;really&lt;/em&gt; hard, you can almost imagine we &lt;em&gt;are&lt;/em&gt; there.  The &lt;em&gt;total&lt;/em&gt; list of frameworks only gets longer over time &amp;#8212; that&amp;#8217;s how open source works &amp;#8212; but the list of &lt;em&gt;choices&lt;/em&gt; has become quite&amp;nbsp;compact.&lt;/p&gt;
&lt;p&gt;How we get to the next level is a little less clear.  We&amp;#8217;ve gotten this way largely through attrition, but that&amp;#8217;s not going to get us any further.  I&amp;#8217;ll at least assure people that we are discussing this stuff &amp;#8212; it&amp;#8217;s slow going, but everyone is interested.  And if anyone actually wants to do some leg work to move this forward, a lot of the work is actually technical, not political, so don&amp;#8217;t be afraid to jump&amp;nbsp;in.&lt;/p&gt;
</content><category term="misc"></category><category term="Programming"></category><category term="Python"></category><category term="Web"></category></entry><entry><title>Doctest for Ruby</title><link href="https://ianbicking.org/blog/2007/08/doctest-for-ruby.html" rel="alternate"></link><published>2007-08-23T11:10:00-05:00</published><updated>2007-08-23T11:10:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-08-23:/blog/2007/08/doctest-for-ruby.html</id><summary type="html">&lt;p&gt;Finally, &lt;a class="reference external" href="http://clintonforbes.blogspot.com/2007/08/doctest-for-ruby-and-rails.html"&gt;someone wrote a version of doctest for Ruby&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Recently I&amp;#8217;ve been writing most of my tests using &lt;a class="reference external" href="http://python.org/doc/current/lib/doctest-simple-testfile.html"&gt;stand-alone doctest files&lt;/a&gt;.  It&amp;#8217;s a great way to do &lt;span class="caps"&gt;TDD&lt;/span&gt; &amp;#8212; mostly because the cognitive load is so low.  Also, I write my examples but don&amp;#8217;t write my output, then …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Finally, &lt;a class="reference external" href="http://clintonforbes.blogspot.com/2007/08/doctest-for-ruby-and-rails.html"&gt;someone wrote a version of doctest for Ruby&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Recently I&amp;#8217;ve been writing most of my tests using &lt;a class="reference external" href="http://python.org/doc/current/lib/doctest-simple-testfile.html"&gt;stand-alone doctest files&lt;/a&gt;.  It&amp;#8217;s a great way to do &lt;span class="caps"&gt;TDD&lt;/span&gt; &amp;#8212; mostly because the cognitive load is so low.  Also, I write my examples but don&amp;#8217;t write my output, then copy the output after visually confirming it is correct.  So the basic pattern&amp;nbsp;is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Figure out &lt;em&gt;what&lt;/em&gt; I want to&amp;nbsp;do&lt;/li&gt;
&lt;li&gt;Figure out &lt;em&gt;how&lt;/em&gt; I want to test&amp;nbsp;it&lt;/li&gt;
&lt;li&gt;Automate my&amp;nbsp;conditions&lt;/li&gt;
&lt;li&gt;Manually inspect whether the output is correct (i.e., implement and&amp;nbsp;debug)&lt;/li&gt;
&lt;li&gt;Copy the output so that in the future the manual process is automated (&lt;a class="reference external" href="http://www.cis.upenn.edu/~edloper/projects/doctestmode/"&gt;doctest-mode&lt;/a&gt; for Emacs makes this particularly&amp;nbsp;easy)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result is a really good balance of manual and automated testing, I think giving you the benefit of both processes &amp;#8212; the ease of manual testing, and the robustness of automated&amp;nbsp;testing.&lt;/p&gt;
&lt;p&gt;Another good thing about doctest is it doesn&amp;#8217;t let you hide any boilerplate and setup.  If it&amp;#8217;s easy to use doctest, it&amp;#8217;s probably easy to use the&amp;nbsp;library.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s nothing Python-specific about doctest (e.g., &lt;a class="reference external" href="http://svn.colorstudy.com/doctestjs/trunk/docs/index.html"&gt;doctestjs&lt;/a&gt;), so it&amp;#8217;s good to see it moving to other languages.  Even if the language doesn&amp;#8217;t have a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/REPL"&gt;&lt;span class="caps"&gt;REPL&lt;/span&gt;&lt;/a&gt;, &lt;span class="caps"&gt;IMHO&lt;/span&gt; it&amp;#8217;s worth inventing it just for&amp;nbsp;this.&lt;/p&gt;
</content><category term="misc"></category><category term="Javascript"></category><category term="Programming"></category><category term="Python"></category><category term="Ruby"></category></entry><entry><title>9/11/2007</title><link href="https://ianbicking.org/blog/2007/09/9112007.html" rel="alternate"></link><published>2007-09-11T15:09:00-05:00</published><updated>2007-09-11T15:09:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2007-09-11:/blog/2007/09/9112007.html</id><summary type="html">&lt;p&gt;So, today is 9/11.  I almost missed it.  It&amp;#8217;s not like it catches you by surprise, you&amp;#8217;re not going to forget the date.  But it&amp;#8217;s just been slipping by for a few years now without much&amp;nbsp;notice.&lt;/p&gt;
&lt;p&gt;As an event it is still very &lt;em&gt;important&lt;/em&gt;.  History …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So, today is 9/11.  I almost missed it.  It&amp;#8217;s not like it catches you by surprise, you&amp;#8217;re not going to forget the date.  But it&amp;#8217;s just been slipping by for a few years now without much&amp;nbsp;notice.&lt;/p&gt;
&lt;p&gt;As an event it is still very &lt;em&gt;important&lt;/em&gt;.  History flowed from that day.  But it doesn&amp;#8217;t mean anything&amp;nbsp;anymore.&lt;/p&gt;
&lt;p&gt;Remember how everyone was saying, on those days after 9/11/2001, that they thought about life differently, about the things that really mattered and the things that didn&amp;#8217;t?  A couple years ago I felt frustrated by how quickly that seemed to disappear, how quickly genuine sentiment turned into empty rhetoric.  A few years ago that transition was frustrating, now the whole thing seems laughable.  The death of irony?  No&amp;#8230; after 9/11 our modern cynicism was down but it wasn&amp;#8217;t out.  It came back fighting, and a National Sense Of Grief was no&amp;nbsp;match.&lt;/p&gt;
&lt;p&gt;Whatever.  I&amp;#8217;m tired of it anyway.  You win Whatever, you&amp;#8217;re the&amp;nbsp;champ.&lt;/p&gt;
</content><category term="misc"></category><category term="Non-technical"></category><category term="Politics"></category></entry></feed>