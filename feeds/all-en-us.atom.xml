<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ian Bicking: a blog</title><link href="https://ianbicking.org/" rel="alternate"></link><link href="https://ianbicking.org/feeds/all-en-us.atom.xml" rel="self"></link><id>https://ianbicking.org/</id><updated>2023-01-17T00:00:00-06:00</updated><entry><title>Thoughts On Voice Interfaces Part 2: LLMs</title><link href="https://ianbicking.org/blog/2023/01/thoughts-on-voice-interfaces-2-llms.html" rel="alternate"></link><published>2023-01-17T00:00:00-06:00</published><updated>2023-01-17T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2023-01-17:/blog/2023/01/thoughts-on-voice-interfaces-2-llms.html</id><summary type="html">&lt;p&gt;Over two years ago I wrote &lt;a href="https://ianbicking.org/blog/2020/08/thoughts-on-voice-interfaces.html"&gt;Thoughts On Voice Interfaces&lt;/a&gt;, a scattering of ideas about voice interactions. Time has passed, I&amp;#8217;ve been working more on voice interfaces, and though products in the market have barely changed, I still have &lt;strong&gt;&lt;span class="caps"&gt;NEW&lt;/span&gt; &lt;span class="caps"&gt;THOUGHTS&lt;/span&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Large Language&amp;nbsp;Models&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve only been exploring …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over two years ago I wrote &lt;a href="https://ianbicking.org/blog/2020/08/thoughts-on-voice-interfaces.html"&gt;Thoughts On Voice Interfaces&lt;/a&gt;, a scattering of ideas about voice interactions. Time has passed, I&amp;#8217;ve been working more on voice interfaces, and though products in the market have barely changed, I still have &lt;strong&gt;&lt;span class="caps"&gt;NEW&lt;/span&gt; &lt;span class="caps"&gt;THOUGHTS&lt;/span&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Large Language&amp;nbsp;Models&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve only been exploring large language models for a couple months, and limited to &lt;span class="caps"&gt;GPT&lt;/span&gt;-3, but most of this post will be about&amp;nbsp;LLMs.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve included examples of prompts and outputs in this section. Click &lt;code&gt;⊕ Example&lt;/code&gt; to see the examples, all screenshots of the &lt;a href="https://beta.openai.com/playground"&gt;&lt;span class="caps"&gt;GPT&lt;/span&gt; Playground&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;With the addition of Large Language Models (LLMs), especially &lt;span class="caps"&gt;GPT&lt;/span&gt;-3, I believe everything will change. But not quickly, there&amp;#8217;s a huge amount of implementation and experimentation and finding and fixing&amp;nbsp;problems.&lt;/li&gt;
&lt;li&gt;Existing systems are based on intent categorization and entity extraction:&lt;ol&gt;
&lt;li&gt;You have a bunch of commands, the commands take certain kinds of arguments (song title, time span, search query,&amp;nbsp;etc).&lt;/li&gt;
&lt;li&gt;Any utterance is compared to examples and categorized as a command, and the arguments (&amp;#8220;entities&amp;#8221;) are&amp;nbsp;extracted.&lt;/li&gt;
&lt;li&gt;This isn&amp;#8217;t just an implementation detail, but also forms the basic shape of voice interactions. Voice interactions work the way they do because this is the technology we have (until now). This command-based model is not begging for LLMs, though it could probably increase&amp;nbsp;accuracy.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;If you plug voice into a &lt;span class="caps"&gt;GPT&lt;/span&gt;-3-driven interaction you&amp;#8217;ll find it&amp;#8217;s very sensitive to speech recognition inaccuracies.&lt;ol&gt;
&lt;li&gt;In the traditional categorization model it will naturally ignore many inaccuracies because it&amp;#8217;s just trying to find the best match among a finite set of commands and&amp;nbsp;examples.&lt;/li&gt;
&lt;li&gt;That is: the traditional model tries very hard to keep the conversation on the rails, and one inaccuracy won&amp;#8217;t make you jump to another&amp;nbsp;rail.&lt;/li&gt;
&lt;li&gt;The beauty of an &lt;span class="caps"&gt;LLM&lt;/span&gt; is that we might not need rails, that we can make vastly more capable agents that can operate on a much wider set of&amp;nbsp;input.&lt;/li&gt;
&lt;li&gt;The danger of LLMs is they take things very literally, and are very credulous. You want to know &lt;em&gt;what&amp;#8217;s next on my caliper&lt;/em&gt;? It will try very hard to come up with a creative answer instead of figuring out you were asking about your&amp;nbsp;calendar.&lt;/li&gt;
&lt;li&gt;I&amp;#8217;m sure this isn&amp;#8217;t a fatal flaw, but it&amp;#8217;s a challenge right&amp;nbsp;now.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;LLMs are stereotyped as text &lt;em&gt;generators&lt;/em&gt;, but they are also great at &lt;em&gt;understanding&lt;/em&gt;. Two years ago I complained there&amp;#8217;s no &amp;#8220;understanding&amp;#8221; in &amp;#8220;natural language understanding&amp;#8221;. That will change.&lt;ol&gt;
&lt;li&gt;We still have to remind ourselves that what it&amp;#8217;s doing is not &amp;#8220;understanding&amp;#8221; as we know it; when an &lt;span class="caps"&gt;LLM&lt;/span&gt; responds to something there isn&amp;#8217;t an entity underneath that is understanding things.&lt;ol&gt;
&lt;li&gt;The understanding is when we fuse that a person&amp;#8217;s input with meaningful output or action. When we ground the model in some&amp;nbsp;purpose.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Prompt_engineering"&gt;Prompt Engineering&lt;/a&gt; is an important part of that fusion: adding context to the input and interpreting the output. These shells we create are an embodiment of &lt;span class="caps"&gt;AI&lt;/span&gt;, what turns a mechanism (an &lt;span class="caps"&gt;LLM&lt;/span&gt;) into a meaningful&amp;nbsp;entity.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Some understanding will be inference: being able to contextualize and make reasonable assumptions about what the a person means. This is what people pay a lot of attention to when talking about &amp;#8220;understanding,&amp;#8221; though I think it&amp;#8217;s over-emphasized. &lt;a href="/media/voice-2/math-inference.png" title="This is the most kind of &amp;quot;reasoning&amp;quot; referred to in GPT, being able to decompose and explain a formal multi-step problem."&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Much of understanding will be translation: taking our speech and translating it into an actionable form.&lt;ol&gt;
&lt;li&gt;We see this currently in &lt;span class="caps"&gt;GPT&lt;/span&gt;&amp;#8217;s code generation. You can ask &lt;span class="caps"&gt;GPT&lt;/span&gt; for concrete answer but it&amp;#8217;s also very good at writing down the steps by which you can get an answer. &lt;a href="/media/voice-2/decomposing-steps.png" title="These queries are personalized, and can't be answered by GPT, but GPT can come up with a plan to answer the questions. That plan could also be reused or treated like a trigger, it's not a single concrete answer."&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;The steps by which you can get an answer&amp;#8221; is another way of saying &amp;#8220;a program&amp;#8221;. We will be programming our agents and getting our agents to generate programs. &lt;a href="/media/voice-2/decode-intent-to-instructions.png" title="Here we take examples of typical intents and have GPT translate them into a made-up programming language"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You won&amp;#8217;t see the programs of course. Mostly. &lt;span class="caps"&gt;GPT&lt;/span&gt; is also pretty good at turning code into natural language. I expect this round-tripping will be useful in debugging our agents, something we&amp;#8217;ll probably have to do individually from time to time. The same way we ask another person to repeat our instructions to make sure we&amp;#8217;re clear, we may ask our &lt;span class="caps"&gt;AI&lt;/span&gt; agents to do the same. &lt;a href="/media/voice-2/describe-instructions-as-intent.png" title="We take the output from the previous example and have GPT turn those programmatic instructions back into an English description. (Note there's no shared context between these examples, these descriptions are created only from the code.)"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What&amp;#8217;s the programming language that our personal agents will be generating based on our commands? Probably something new, probably accidental, maybe the product of implicit negotiations between developers and the large language models, each of which is going to try to satisfy the&amp;nbsp;other.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;span class="caps"&gt;LLM&lt;/span&gt; &amp;#8220;prompt&amp;#8221; is more than just a command for the &lt;span class="caps"&gt;LLM&lt;/span&gt;. It&amp;#8217;s instruction and goal-setting and things we haven&amp;#8217;t yet discovered. But it&amp;#8217;s especially &lt;em&gt;context&lt;/em&gt;.&lt;ol&gt;
&lt;li&gt;We haven&amp;#8217;t been providing this context to intent parser or to speech recognition itself. What context we&amp;#8217;ve been giving is mostly internal implementation details, not accessible to language understanding. That will have to&amp;nbsp;change.&lt;/li&gt;
&lt;li&gt;Consider a case like sending a message to a contact: this often involves the difficult vocabulary of people&amp;#8217;s names. We may solve this generally by personalizing models so they work better with individualized information like your list of contacts. But with an &lt;span class="caps"&gt;LLM&lt;/span&gt; we can include that information in the prompt or context, much more casually and contextually than most personalization. &lt;a href="/media/voice-2/messaging-example.png" title="The beginning is context from a messaging app. Using this, as well as examples to show GPT how to format the response, it can interpret the destination for a message as well as separating those instructions from the body of the message."&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This represents an alternative to how we usually think about &amp;#8220;learning&amp;#8221; in voice interfaces, which is about frequency and probabilities. There&amp;#8217;s a lot of ideas about how to predict what the user will do and then bias the result based on that, or change the interface to make the likely thing easier, or even to do something proactively for the user. This is not&amp;nbsp;that!&lt;/li&gt;
&lt;li&gt;Armed with many predictive capabilities I think we&amp;#8217;ve been projecting prediction onto human-to-human interactions where it doesn&amp;#8217;t exist. Your favorite barista does not actually make the coffee before you arrive. And even if they ask &amp;#8220;the regular?&amp;#8221; they are picking up the thread of past interactions and past conversations, not just predicting what you&amp;#8217;ll have. Prediction removes the autonomy and self-direction of the user. If there&amp;#8217;s a predictive analog in human-to-human interaction it&amp;#8217;s probably in how we stereotype each other and our respective roles, not in how we&amp;nbsp;communicate.&lt;/li&gt;
&lt;li&gt;LLMs &lt;em&gt;love&lt;/em&gt; context. In your conversation you&amp;#8217;re building a transcript. It doesn&amp;#8217;t stop you from wandering, but it&amp;#8217;s always ready to build off that previous&amp;nbsp;context.&lt;/li&gt;
&lt;li&gt;We&amp;#8217;ll have to figure out when to forget and when to erase context. &lt;span class="caps"&gt;GPT&lt;/span&gt; has a fixation problem where it will sometimes persistently attend to an unimportant detail in a conversation. &lt;a href="/media/voice-2/question-fixation.png" title="Here you can see that GPT has decided to ask the same question over and over. While GPT is good at reacting to responses that don't follow the question, in cases like these it can &amp;quot;learn&amp;quot; from its own examples to do the wrong thing."&gt;Example&lt;/a&gt;. And as we support longer conversations and relationships that happen over days and months, we will have to think about how to keep the model&amp;#8217;s focus aligned with the user&amp;#8217;s mental model and&amp;nbsp;focus.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Follow-up and refining commands will be much easier with LLMs. Maybe everything will feel a little like a chatbot, though for functional and not personality reasons. People will become used to refinements that we&amp;#8217;ve been self-censoring because we don&amp;#8217;t believe they are possible. &lt;a href="/media/voice-2/followups.png" title="Here we see how GPT will interpret following follow-ups contextually, making easy use of implied references to those earlier statements."&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A mind-bending part of building a chat interface directly on &lt;span class="caps"&gt;GPT&lt;/span&gt;-3 is that you have to create archetypes and entities from scratch.&lt;ol&gt;
&lt;li&gt;There is no &amp;#8220;you&amp;#8221; and &amp;#8220;me&amp;#8221;. &amp;#8220;You&amp;#8221; is a character that has to be introduced and described to the &lt;span class="caps"&gt;LLM&lt;/span&gt;. Armed with a description the &lt;span class="caps"&gt;LLM&lt;/span&gt; will then predict what this entity might do. The &lt;span class="caps"&gt;LLM&lt;/span&gt; doesn&amp;#8217;t &amp;#8220;pretend&amp;#8221; to be &amp;#8220;you&amp;#8221; as there is no underlying personality. And &amp;#8220;me&amp;#8221; (the human) is again an introduced entity. Without constraints the &lt;span class="caps"&gt;LLM&lt;/span&gt; will gladly predict &lt;em&gt;both&lt;/em&gt; sides of the conversation. &lt;a href="/media/voice-2/both-sides-conversation.png" title="Here GPT interprets what is intended to be a chat as something closer to a transcript, and predicts both sides of the conversation in the transcript proceed"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maybe there&amp;#8217;s something cool that could be done by making it a conversation between me and me: that is, modeling the interaction on internal dialog. &lt;a href="/media/voice-2/two-self-personalities.png" title="This is more attempt than example, presenting two personas (the human and AI) as two aspects of the same person. GPT is somewhat stubborn about actually using words like &amp;quot;I&amp;quot; for both sides of the conversation to refer to the same person."&gt;Example 1&lt;/a&gt; &lt;a href="/media/voice-2/long-term-short-term.png" title="This example imagines an assistant that you talk to fairly continuously as an ongoing record of your day, thoughts, and tasks; while it also tries to ask you questions to make sure it gets all the details it will need for later."&gt;Example&amp;nbsp;2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s a fun party trick to make &lt;span class="caps"&gt;GPT&lt;/span&gt;-3 say things in the style of &lt;a href="https://twitter.com/tqbf/status/1598513757805858820"&gt;The Bible&lt;/a&gt; or &lt;a href="https://twitter.com/goodside/status/1562991379915341824"&gt;Jar Jar Binks&lt;/a&gt;, but it&amp;#8217;s more than that&amp;#8230;&lt;ol&gt;
&lt;li&gt;Asking &lt;span class="caps"&gt;GPT&lt;/span&gt; to write something for a kindergartener is great. Maybe that should even be a standard starting instead of &amp;#8220;normal&amp;#8221; output. &lt;a href="/media/voice-2/kindergartener.png" title="In this example we took a fairly technical description of a model, pasted it in and asked it to be summarized for a kindergartener. It loses a lot of information, but keep a general gist. Results vary considerably based on the source of the information."&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Asking it to write for speech output could work, though I haven&amp;#8217;t had much success in my brief experiments. I don&amp;#8217;t know what to ask for, and I&amp;#8217;m not sure what &amp;#8220;good for speech output&amp;#8221; really means. Some people have had good success with &lt;a href="https://twitter.com/ramsri_goutham/status/1612818789858697216"&gt;&lt;span class="caps"&gt;SSML&lt;/span&gt; generation&lt;/a&gt;.&lt;ol&gt;
&lt;li&gt;Adjustments to the output are very amenable to user override: changing the tone to be more brief, emphasize certain points, etc. These kinds of adjustments can be done without introducing combinatorial complexity. &lt;a href="/media/voice-2/summary-lengths.png" title="The source material for this example was a long day-by-day forecast. This shows several levels of detail and summary that can be created from that one source."&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Given the right chat context for an individual, and enough quantity, I&amp;#8217;m guessing an &lt;span class="caps"&gt;LLM&lt;/span&gt; may naturally adopt the user&amp;#8217;s phrasing and language style. Though I wonder if people naturally &lt;a href="https://en.wikipedia.org/wiki/Code-switching"&gt;code switch&lt;/a&gt; to speak in a &amp;#8220;formal&amp;#8221; style with voice interfaces. (&amp;#8220;Naturally&amp;#8221; may be learned behavior to avoid speech recognition errors, or it might also be based on the mental model we have about our relationship with the &lt;span class="caps"&gt;AI&lt;/span&gt;&amp;nbsp;agent.)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;I&amp;#8217;m optimistic about the novel way you can compose text in ChatGPT, by acting more as an editor than an author, and how this will be applicable to voice&amp;#8230;&lt;ol&gt;
&lt;li&gt;If ChatGPT writes something for you and you want to change it, the best way is usually to ask for the change. &amp;#8220;Make it shorter,&amp;#8221; or &amp;#8220;take out the part about Jar Jar Binks.&amp;#8221; &lt;a href="/media/voice-2/edit-make-list.png" title="This uses the GPT Edit API which is constrained just to these kinds of editing commands. Here it's able to understand what part of the first sentence is a list and then turn that into a formatted list and two paragraphs"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This is also a good way to edit with your voice. Referring to specific sentences or paragraphs or describing mechanical changes is very hard to do with voice. It&amp;#8217;s hard to compose those edits in your head, and it&amp;#8217;s hard to say them accurately. &lt;span class="caps"&gt;GPT&lt;/span&gt; is quite good at editing text that is human generated. &lt;a href="/media/voice-2/edit-pronouns.png" title="When we ask to make a substitution with GPT it doesn't just make a string substitution, but also all the changes that keep the text grammatically correct."&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;I think there are entirely new patterns of interaction possible with LLMs&lt;ol&gt;
&lt;li&gt;Instead of commanding, maybe you speak to your &lt;span class="caps"&gt;AI&lt;/span&gt; agent freely; the emphasis is just to dump a lot of stuff into it. Then you start using that accumulated information as the basis for action. &lt;a href="/media/voice-2/turn-voice-into-todo-list.png" title="Here we take a long and unstructured transcript, brainstorming tasks for the day, and use GPT to turn it into a structured to-do list"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maybe it&amp;#8217;s less transactional, less modal. You could be asking it to do something and then instead of pausing and waiting for it to do the thing you could just&amp;#8230; keep going. The &lt;span class="caps"&gt;AI&lt;/span&gt; starts to assemble a plan for complicated actions, while still immediately acting on things that are easy and low-impact, though also respecting any higher-level instructions like ordering or conditionals. &lt;a href="/media/voice-2/decompose-actions.png" title="This is a rough example of trying to take a number of actions and turn them into a plan. A more complete example would find dependencies between actions, determine actions are timed, and which actions require confirmation, and then producing a plan based on that. GPT doesn't have to compose the entire plan if it can categorize the actions so that a more formal algorithm can produce a complete plan."&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;GPT&lt;/span&gt; and probably all LLMs are fairly expensive, more expensive than any of the current techniques.&lt;ol&gt;
&lt;li&gt;Hopefully this stuff gets cheaper, not because compute gets much cheaper but because smart people just figure things out. But there may be a hard lower bound on the&amp;nbsp;cost.&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s possible to select different models and approaches in different contexts, most of them more efficient; I expect very eclectic stacks to&amp;nbsp;emerge.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;When we start getting Large Language Models built on &lt;a href="https://twitter.com/ianbicking/status/1612944221199294464"&gt;predicting text &lt;span class="caps"&gt;AND&lt;/span&gt; behavior&lt;/a&gt; I think we&amp;#8217;ll see another burst of&amp;nbsp;capability.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;More Voice&amp;nbsp;Thoughts&lt;/h2&gt;
&lt;p&gt;So obviously I&amp;#8217;m personally pretty focused on the effect of LLMs, but there&amp;#8217;s more to be&amp;nbsp;said&amp;#8230;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Endpointing remains a major issue. That is, deciding when the person is &amp;#8220;done&amp;#8221; speaking and then acting on that speech.&lt;ol&gt;
&lt;li&gt;The idea of &amp;#8220;done&amp;#8221; itself imposes very specific ideas on how an interaction&amp;nbsp;works.&lt;/li&gt;
&lt;li&gt;This whole &amp;#8220;done&amp;#8221; thing is imposed. Every system that uses silence-based endpointing is also capable of listening a little longer, with no real privacy issue. It feels a bit like a &amp;#8220;lalala I&amp;#8217;m not listening to you&amp;#8221; situation, where it&amp;#8217;s better just to not know that the user is continuing to&amp;nbsp;speak.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TTS&lt;/span&gt; output &lt;em&gt;does&lt;/em&gt; make it difficult to leave the mic open. With the right physical device setup I assume it would be possible to quickly stop &lt;span class="caps"&gt;TTS&lt;/span&gt; when the original speaker continues to speak. Thoroughly designed and vertically integrated physical devices are not the norm, so this pattern doesn&amp;#8217;t become the norm.&lt;ol&gt;
&lt;li&gt;I feel a sense of both optimism and disappointment about a well integrated physical device; that is a device where the microphone, speaker, physical controls, other input modalities (like an &lt;a href="https://en.wikipedia.org/wiki/Inertial_measurement_unit"&gt;&lt;span class="caps"&gt;IMU&lt;/span&gt;&lt;/a&gt;), speech recognition, speech understanding, command execution, and output systems are all integrated for a more ideal experience. The potential is there at every level but hardware like this requires capital and the total experience requires vision. Will we have to wait for a big player to discover the vision, or for the hardware design to become more accessible for a new entrant? (I wish &lt;a href="https://www.ray-ban.com/usa/ray-ban-stories"&gt;Rayban Stories&lt;/a&gt; were a more open&amp;nbsp;environment!)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Humans have many forms of non-verbal or at least non-speech ways to indicate a desire to continue or interrupt. This is also a point of frequent errors, and requires reading other people in a way that many people find difficult. Still I think there&amp;#8217;s more room to mimic some of these patterns: the &amp;#8220;uh&amp;#8221; call to attention, the stare-at-the-sky please-wait gesture, the facial expression of pausing&amp;nbsp;mid-sentence.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Invocation remains a barrier to fluid voice interactions.&lt;ol&gt;
&lt;li&gt;Wake words and other voice invocations like special hardware gestures are only accessible when you have control of the &lt;span class="caps"&gt;OS&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;There aren&amp;#8217;t many tools to prototype wake words or keyword spotting. This also gets in the way of using &lt;a href="https://en.wikipedia.org/wiki/Procedure_word"&gt;procedure words&lt;/a&gt; to control things like mic state or make markers in your voice transcript to correspond to other events. I still like the idea of procedure words but I&amp;#8217;ve poor luck actually making them&amp;nbsp;work.&lt;/li&gt;
&lt;li&gt;I&amp;#8217;m divided on purely wake-word-based initiation and hardware buttons or other ways to initiate. Using a wake word is more socially appropriate because it informs any bystanders what is happening. And if you are going to talk, why not start it by talking? But people – sometimes including myself – seem to like other controls. It also opens up some possibility for multitasking with voice. If you are in a call you don&amp;#8217;t want to use a wake word because the word will end up in the call&amp;#8230; it can mute once you complete, but you&amp;#8217;ve already said something&amp;nbsp;weird.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Speech recognition systems aren&amp;#8217;t just &amp;#8220;better&amp;#8221; and &amp;#8220;worse&amp;#8221;, individual systems have different behavior.&lt;ol&gt;
&lt;li&gt;Though it&amp;#8217;s seldom used, I like the idea of using spelling to handle difficult-to-recognize words. That is, you might say &amp;#8220;tee oh oh&amp;#8221; if you want to force the system to write &amp;#8220;too&amp;#8221; instead of &amp;#8220;to&amp;#8221;. But support for this is spotty and inconsistent. Systems don&amp;#8217;t frequently distinguish between explicit cases like this or spoken punctuation, and implied&amp;nbsp;text.&lt;/li&gt;
&lt;li&gt;Punctuation is also handled differently, some systems mostly emit just words, others try to punctuate everything. And somehow even spoken punctuation (e.g., saying &amp;#8220;period&amp;#8221; for &amp;#8220;.&amp;#8221;) is applied inconsistently in a single&amp;nbsp;system.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/openai/whisper"&gt;Whisper&lt;/a&gt; is an impressive speech recognizer but it&amp;#8217;s not real time and not easy to apply to interactions.&lt;ol&gt;
&lt;li&gt;Right now speech recognition systems usually have &lt;em&gt;partial&lt;/em&gt; and &lt;em&gt;final&lt;/em&gt; transcriptions. We&amp;#8217;ve all seen the partial recognition change as we continue to speak and earlier words are corrected given later context. These represent two levels of recognition. Whisper uses an even wider window of analysis to identify a sensible sentence given the input. Maybe we could have three levels: very fast partial transcriptions, ~1 second transcriptions, and then a ~4+ second &amp;#8220;this time it&amp;#8217;s really final&amp;#8221; transcript? But seeing the transcript update even further back may be confusing or distracting for the user, and it may be hard to trust that errors in the not-quite-final transcription will get fixed with a little patience. And the programming is already hard to get right with just two versions of the&amp;nbsp;transcript.&lt;/li&gt;
&lt;li&gt;Whisper makes retraining seem more accessible. Are there alternatives to current microphones that get enough information to create a transcription, even if they don&amp;#8217;t get enough information to build an audio recording that other people could recognize? Like a microphone in earbuds, embedded in eyeglass temples, or something touching the nose bridge or neck&amp;#8230; and instead of using tricks to make those microphones sound &amp;#8220;normal,&amp;#8221; train directly on the raw data they&amp;nbsp;produce.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;There&amp;#8217;s room for more voice consumption that doesn&amp;#8217;t have any output at all, or immediately do anything.&lt;ol&gt;
&lt;li&gt;That isn&amp;#8217;t &lt;em&gt;just&lt;/em&gt; voice recorders. There are tools like Otter or Google Recorder that faithfully listen, but mostly just&amp;nbsp;transcribe.&lt;/li&gt;
&lt;li&gt;I&amp;#8217;ve imagined a process for recording family photos and documents with voice and photos, so that your photos are directly connected with those&amp;nbsp;stories.&lt;/li&gt;
&lt;li&gt;Maybe a generalization: you can, without real time feedback, fuse voice with other input if you have a &lt;em&gt;record&lt;/em&gt; of that other input, so that you can fix mistakes later instead of relying on feedback to fix mistakes during the&amp;nbsp;interaction.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;I&amp;#8217;m excited about the possibility for asymmetric I/O: speaking into the &lt;span class="caps"&gt;AI&lt;/span&gt;, but presenting the results visually.&lt;ol&gt;
&lt;li&gt;This would solve some of the all-or-nothing issue with intent parsing. It&amp;#8217;s much easier to live update something visual so the computer can show its best-effort interpretation at any&amp;nbsp;time.&lt;/li&gt;
&lt;li&gt;Screens represent a conversation between the human and the computer. The computer is showing what is possible (buttons and fields), what it knows (informational elements), the status of different inputs (cursors, dialog boxes). The standard &lt;span class="caps"&gt;GUI&lt;/span&gt; conversation with a computer is more like whiteboarding than a conversation.&lt;ol&gt;
&lt;li&gt;Just doing voice control of our screens hasn&amp;#8217;t caught on. But these traditional &lt;span class="caps"&gt;GUI&lt;/span&gt; elements – buttons, etc – are specific to non-voice inputs. What would a &lt;span class="caps"&gt;GUI&lt;/span&gt; designed voice input look like? I genuinely don&amp;#8217;t&amp;nbsp;know!&lt;/li&gt;
&lt;li&gt;When phrased as an accessibility technology voice will be caught in this not-design-for-voice trap. &amp;#8220;Accessibility&amp;#8221; implies &amp;#8220;small group of people,&amp;#8221; and &amp;#8220;not your real audience,&amp;#8221; and &amp;#8220;applicable to status quo&amp;nbsp;software.&amp;#8221;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Comments welcome on &lt;a href="https://hachyderm.io/@ianbicking/109705232520612923"&gt;Mastodon&lt;/a&gt;, &lt;a href="https://twitter.com/ianbicking/status/1615369950838902788"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;ve gotten this far I will also throw in here that I (&lt;a href="https://ianbicking.org"&gt;Ian&lt;/a&gt;) am looking for a job, and maybe the best job for me is one that I don&amp;#8217;t yet know exists. I&amp;#8217;m particularly interested in the area of large language models, new user interactions built on LLMs (especially their abilities to understand us in new ways). I&amp;#8217;m excited about education, aiding in executive function, and human-centered interactions. &lt;a href="mailto:ianbicking@gmail.com"&gt;Let me know if you have ideas&lt;/a&gt;, I would appreciate&amp;nbsp;it!&lt;/p&gt;
&lt;script&gt;
    let els = Array.from(document.getElementsByTagName("a"));
    els = els.filter((e) =&gt; e.textContent.includes("Example"));
    let activeEl;
    let overlay;
    function closeOverlay() {
        activeEl = null;
        if (overlay) {
            overlay.remove();
        }
        overlay = null;

    }
    function activateEl(el) {
        if (overlay) {
            closeOverlay();
        }
        activeEl = el;
        event.preventDefault();
        overlay = document.createElement("div");
        overlay.style.position = "fixed";
        overlay.style.height = "100%";
        overlay.style.width = "100%";
        overlay.style.top = 0;
        overlay.style.left = 0;
        overlay.style.zIndex = 9999;
        overlay.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
        overlay.addEventListener("click", closeOverlay);
        const inner = document.createElement("div");
        inner.style.display = "flex";
        inner.style.alignItems = "center";
        inner.style.justifyContent = "center";
        inner.style.height = "100%";
        overlay.appendChild(inner);
        const img = document.createElement("img");
        img.src = el.href;
        img.style.maxHeight = "80%";
        img.style.maxWidth = "80%";
        img.style.marginBottom = "1em";
        inner.appendChild(img);
        const x = document.createElement("div");
        x.textContent = "✖";
        x.style.position = "absolute";
        x.style.right = "20px";
        x.style.top = "10px";
        x.style.fontSize = "200%";
        x.style.color = "#fff";
        overlay.appendChild(x);
        const caption = document.createElement("caption");
        caption.textContent = el.getAttribute("title");
        const pos = els.indexOf(el);
        caption.textContent += " " + (pos+1) + "/" + els.length;
        caption.style.color = "#fff";
        caption.style.textAlign = "center";
        caption.style.position = "absolute";
        caption.style.width = "100%";
        caption.style.padding = "1em 6em";
        caption.style.bottom = "10px";
        caption.style.backgroundColor = "rgba(0, 0, 0, 0.6)";
        overlay.appendChild(caption);
        document.body.appendChild(overlay);
    }
    for (const el of els) {
        el.addEventListener("click", (event) =&gt; {
            activateEl(el);
        });
        var symbol = document.createTextNode("⊕\u00A0");
        el.insertBefore(symbol, el.firstChild);
        el.style.textDecoration = "none";
    }
    document.addEventListener("keydown", function(event) {
        if (!overlay) {
            return;
        }
        if (event.key === "Escape") {
            closeOverlay();
            event.preventDefault();
            return;
        }
        if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
            const cur = els.indexOf(activeEl);
            const next = (els.length + cur + (event.key === "ArrowLeft" ? -1 : -1)) % els.length;
            console.log({cur, next, els, el: els[next]});
            activateEl(els[next]);
            event.preventDefault();
        }
    });

&lt;/script&gt;</content><category term="misc"></category></entry><entry><title>Infinite AI Array</title><link href="https://ianbicking.org/blog/2023/01/infinite-ai-array.html" rel="alternate"></link><published>2023-01-02T00:00:00-06:00</published><updated>2023-01-02T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2023-01-02:/blog/2023/01/infinite-ai-array.html</id><summary type="html">&lt;p&gt;&lt;center&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;making new string and list classes that call gpt3 under the hood so you can access elements beyond the final one. no more index&amp;nbsp;errors!&lt;/p&gt;&amp;mdash; shb (@himbodhisattva) &lt;a href="https://twitter.com/himbodhisattva/status/1606712418587267072?ref_src=twsrc%5Etfw"&gt;December 24, 2022&lt;/a&gt;&lt;/blockquote&gt;&lt;/center&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Some ideas are dumb enough you just have to try them, so I introduce to you the Python library: &lt;a href="https://github.com/ianb/infinite-ai-array"&gt;Infinite …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;center&gt;&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;making new string and list classes that call gpt3 under the hood so you can access elements beyond the final one. no more index&amp;nbsp;errors!&lt;/p&gt;&amp;mdash; shb (@himbodhisattva) &lt;a href="https://twitter.com/himbodhisattva/status/1606712418587267072?ref_src=twsrc%5Etfw"&gt;December 24, 2022&lt;/a&gt;&lt;/blockquote&gt;&lt;/center&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Some ideas are dumb enough you just have to try them, so I introduce to you the Python library: &lt;a href="https://github.com/ianb/infinite-ai-array"&gt;Infinite &lt;span class="caps"&gt;AI&lt;/span&gt; Array&lt;/a&gt;. Let&amp;#8217;s see it in&amp;nbsp;action&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ianb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ai&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;OPENAI_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sk&lt;/span&gt;&lt;span class="o"&gt;-...&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;iaia&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InfiniteAIArray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;InfiniteAIDict&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InfiniteAIArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;minnesota_cities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InfiniteAIArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;city_populations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InfiniteAIDict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minnesota_cities&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;city_populations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;Minneapolis&lt;/span&gt;          &lt;span class="mi"&gt;422331&lt;/span&gt;
 &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;St&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Paul&lt;/span&gt;             &lt;span class="mi"&gt;302551&lt;/span&gt;
 &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;Duluth&lt;/span&gt;               &lt;span class="mi"&gt;87622&lt;/span&gt;
 &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="n"&gt;Rochester&lt;/span&gt;            &lt;span class="mi"&gt;111264&lt;/span&gt;
 &lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="n"&gt;Bloomington&lt;/span&gt;          &lt;span class="mi"&gt;84863&lt;/span&gt;
 &lt;span class="mf"&gt;6.&lt;/span&gt; &lt;span class="n"&gt;St&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Cloud&lt;/span&gt;            &lt;span class="mi"&gt;68320&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or more&amp;nbsp;contextual&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;favorite_books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InfiniteAIArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Dune&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Perdido Street Station&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Red Mars&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;favorite_books&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Dune&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Perdido Street Station&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Red Mars&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Hitchhiker&amp;#39;s Guide to the Galaxy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1984&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Lord of the Rings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Handmaid&amp;#39;s Tale&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Martian Chronicles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other_favorite_books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InfiniteAIArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Wizard Of Oz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Trials Of Morrigan Crow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;James and the Giant Peach&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other_favorite_books&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Wizard Of Oz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Trials Of Morrigan Crow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;James and the Giant Peach&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Catcher in the Rye&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Lion, the Witch and the Wardrobe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Hobbit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;To Kill a Mockingbird&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Alchemist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;The Problem&amp;nbsp;Statement&lt;/h2&gt;
&lt;p&gt;All great tools &lt;em&gt;solve a problem&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lists&amp;nbsp;end&lt;/li&gt;
&lt;li&gt;Dictionaries don&amp;#8217;t have every&amp;nbsp;key&lt;/li&gt;
&lt;li&gt;I don&amp;#8217;t have enough&amp;nbsp;ideas&lt;/li&gt;
&lt;li&gt;List operations usually happen right away and sometimes I&amp;#8217;d like them to take a second or two so I can appreciate the effort involved in&amp;nbsp;programming&lt;/li&gt;
&lt;li&gt;My types and values are consistent like a program, not expressive and eclectic like natural&amp;nbsp;language&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;But wait, there&amp;#8217;s&amp;nbsp;more!&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;iaia&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_wikipedia_paragraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Minneapolis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Missing&lt;/span&gt; &lt;span class="n"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wikipedia&lt;/span&gt;
  &lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gessing&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;wikipedia&lt;/span&gt;
&lt;span class="n"&gt;Do&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;installation&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Minneapolis ( (listen)) is the largest city in Minnesota, United States, and the&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_wikipedia_paragraph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# see what it&amp;#39;s doing&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;first_wikipedia_paragraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Who knew there was a &lt;code&gt;wikipedia&lt;/code&gt; package? (&lt;span class="caps"&gt;GPT&lt;/span&gt; knew, but I did&amp;nbsp;not.)&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s make it more like a chat, and circle in on our&amp;nbsp;answer&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# We wanted the first 10 primes, not the primes up to 10, let&amp;#39;s try...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# We did it! Now let&amp;#39;s stretch it...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;primes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;11&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Attempting&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;fix&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;supported&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Extending the problem&amp;nbsp;statement&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;So many functions haven&amp;#8217;t been&amp;nbsp;written&lt;/li&gt;
&lt;li&gt;Maybe functions should be more of a&amp;#8230;&amp;nbsp;negotiation?&lt;/li&gt;
&lt;li&gt;Function signatures tell a story but the computer hasn&amp;#8217;t been&amp;nbsp;listening&lt;/li&gt;
&lt;li&gt;All exceptions are bad and should be&amp;nbsp;eliminated&lt;/li&gt;
&lt;li&gt;Old security holes don&amp;#8217;t offer us enough excitement, we need to explore new frontiers of&amp;nbsp;vulnerabilities&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;But really, how does it&amp;nbsp;work?&lt;/h2&gt;
&lt;p&gt;To see what&amp;#8217;s happening just set &lt;code&gt;$IAIA_VERBOSE&lt;/code&gt; or run &lt;code&gt;iaia.set_verbose(True)&lt;/code&gt;. You&amp;#8217;ll see the &lt;span class="caps"&gt;GPT&lt;/span&gt; queries printed out. For lists they look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InfiniteAIArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Les Misérables&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Request&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="c1"&gt;# books`:&lt;/span&gt;

&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;Les&lt;/span&gt; &lt;span class="n"&gt;Misérables&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;
&lt;span class="o"&gt;------------------------------------------------------------&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
 &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Catcher&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Rye&lt;/span&gt;
&lt;span class="n"&gt;Stop&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;
&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.23&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Tokens&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cached&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mf"&gt;0.0007&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mf"&gt;0.0007&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;The Catcher in the Rye&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In my experience &lt;span class="caps"&gt;GPT&lt;/span&gt; thinks very highly of &lt;em&gt;Catcher in the Rye&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Dictionaries are&amp;nbsp;similar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InfiniteAIDict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Les Misérables&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Request&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;temperature&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="c1"&gt;# authors`:&lt;/span&gt;


&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;Les&lt;/span&gt; &lt;span class="n"&gt;Misérables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;------------------------------------------------------------&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
 &lt;span class="n"&gt;Victor&lt;/span&gt; &lt;span class="n"&gt;Hugo&lt;/span&gt;
&lt;span class="n"&gt;Stop&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;
&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.04&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Tokens&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cached&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mf"&gt;0.0014&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mf"&gt;0.0014&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;============================================================&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;Victor Hugo&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Functions are based on the&amp;nbsp;signature:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;iaia&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;magic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arctan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Request&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cache&lt;/span&gt;
&lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;arctan&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;arctan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;------------------------------------------------------------&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Calculates the arctangent of a given number.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters:&lt;/span&gt;
&lt;span class="sd"&gt;    arg1 (float): The number to calculate the arctangent of.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;span class="sd"&gt;    float: The arctangent of the given number.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;``&lt;/span&gt;
&lt;span class="n"&gt;Stop&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;
&lt;span class="n"&gt;Tokens&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;76&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cached&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;============================================================&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;#8217;ll notice in this case it uses the &lt;code&gt;math&lt;/code&gt; module but doesn&amp;#8217;t import it. This causes an exception which is caught and &lt;span class="caps"&gt;GPT&lt;/span&gt; is asked to fix&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;following&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;throws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;NameError&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;math&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;defined&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;At&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;`&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;math&lt;/span&gt;.&lt;span class="nv"&gt;atan&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;arg1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;`&lt;span class="w"&gt;&lt;/span&gt;

```&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;definition&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
```&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nv"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;same&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;but&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;NameError&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fixed&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;

```&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It tries one time to fix an exception, though if you keep calling the function using the same signature it will try each time to get rid of the exceptions and may incrementally succeed. Though with this prompt it tends to cover up errors as often as fix&amp;nbsp;them.&lt;/p&gt;
&lt;h2&gt;Following&amp;nbsp;up&amp;#8230;&lt;/h2&gt;
&lt;p&gt;Comments welcome on &lt;a href="https://hachyderm.io/@ianbicking/109621627461377616"&gt;Mastodon&lt;/a&gt;, &lt;a href="https://twitter.com/ianbicking/status/1610018555222695936"&gt;Twitter&lt;/a&gt;, &lt;a href="https://news.ycombinator.com/item?id=34224664"&gt;Hacker News discussion&lt;/a&gt;. Contributions &lt;a href="https://github.com/ianb/infinite-ai-array#contributing"&gt;kind of welcome&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;ve gotten this far I will also throw in here that I (&lt;a href="https://ianbicking.org"&gt;Ian&lt;/a&gt;) am looking for a job, and maybe the best job for me is one that I don&amp;#8217;t yet know exists. I&amp;#8217;m particularly interested in the area of large language models (not just as a joke), new user interactions built on LLMs (especially their abilities to understand us in new ways). I&amp;#8217;m excited about education, aiding in executive function, and human-centered interactions. &lt;a href="mailto:ianbicking@gmail.com"&gt;Let me know if you have ideas&lt;/a&gt;, I would appreciate&amp;nbsp;it!&lt;/p&gt;</content><category term="ai"></category></entry><entry><title>Firefox Was Always Enough</title><link href="https://ianbicking.org/blog/2020/11/firefox-was-always-enough.html" rel="alternate"></link><published>2020-11-18T00:00:00-06:00</published><updated>2020-11-18T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2020-11-18:/blog/2020/11/firefox-was-always-enough.html</id><summary type="html">&lt;p&gt;There are many concerns about Mozilla right now, and reason to be concerned. While I am no longer with Mozilla, it’s still a place that supported me for many years; I believe in Mozilla and want the project to&amp;nbsp;succeed.&lt;/p&gt;
&lt;h1&gt;Mozilla&amp;#8217;s one&amp;nbsp;product&lt;/h1&gt;
&lt;p&gt;It’s not always clear …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are many concerns about Mozilla right now, and reason to be concerned. While I am no longer with Mozilla, it’s still a place that supported me for many years; I believe in Mozilla and want the project to&amp;nbsp;succeed.&lt;/p&gt;
&lt;h1&gt;Mozilla&amp;#8217;s one&amp;nbsp;product&lt;/h1&gt;
&lt;p&gt;It’s not always clear from the outside, but Mozilla has always made the bulk of its money from selling the preferred placement of a search engine in Firefox. That’s been Google in the U.S., except for a brief stint with&amp;nbsp;Yahoo.&lt;/p&gt;
&lt;p&gt;Firefox was forked from the now-defunct Mozilla Suite in 2002, an experimental project by Blake Ross, Joe Hewitt, and David Hyatt. By 2003 all three had left for other&amp;nbsp;companies.&lt;/p&gt;
&lt;p&gt;Firefox went on to great success, peaking at &lt;a href="https://gs.statcounter.com/browser-market-share#monthly-200901-202010"&gt;30% of browser marketshare&lt;/a&gt; and hundreds of millions of users. Firefox is Mozilla&amp;#8217;s one product, greatest success, and the reason Mozilla still&amp;nbsp;exists.&lt;/p&gt;
&lt;h1&gt;The pursuit of revenue&amp;nbsp;diversity&lt;/h1&gt;
&lt;p&gt;Throughout the entire ten years I was at Mozilla, we were always concerned about “revenue&amp;nbsp;diversity”.&lt;/p&gt;
&lt;p&gt;It’s uncomfortable to get most of your income from your competitor. For many years Google added insult by advertising Chrome on those very search&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;But to be clear: the money always kept coming! On a per-user basis it even increased over the years. There was never a collapse of search-deal&amp;nbsp;revenue.&lt;/p&gt;
&lt;p&gt;But Mozilla is going through some problems: there was a major layoff in January 2020, and I myself was part of 25% of the workforce laid off in August 2020. The latter was blamed on a Covid downturn, but I believe Covid only accelerated layoffs that were otherwise&amp;nbsp;inevitable.&lt;/p&gt;
&lt;p&gt;And the money is still coming in! Mozilla is still getting more money than it did when its marketshare had peaked. It’s still getting enough money to pay for a large&amp;nbsp;staff.&lt;/p&gt;
&lt;p&gt;The answer is clear to me: if Mozilla wants to improve its financial position, then it needs to increase the number of Firefox users. That’s always been the right focus, and it’s still the right&amp;nbsp;focus.&lt;/p&gt;
&lt;h1&gt;Founders and&amp;nbsp;vision&lt;/h1&gt;
&lt;p&gt;I remember when &lt;a href="https://en.wikipedia.org/wiki/Brendan_Eich"&gt;Brendan Eich&lt;/a&gt; was &lt;a href="https://blog.mozilla.org/blog/2014/04/03/brendan-eich-steps-down-as-mozilla-ceo/"&gt;briefly the Mozilla &lt;span class="caps"&gt;CEO&lt;/span&gt;&lt;/a&gt;. It was noted that a founder has a special place and ability as a leader. We never got to find out, but there was some sense to it: a founder has particular authority, without getting that authority through consensus-building. If you bring in a decisive outsider they will probably fail, lacking the authority (and probably the wisdom) to guide the company. If you bring in or promote someone appropriate for a more mature company, then the company may be operated well but the choices made will be more&amp;nbsp;conservative.&lt;/p&gt;
&lt;p&gt;The problem? &lt;em&gt;Firefox’s&lt;/em&gt; founders are all long, long gone. Brendan and &lt;a href="https://en.wikipedia.org/wiki/Mitchell_Baker"&gt;Mitchell&lt;/a&gt; are &lt;em&gt;Mozilla&amp;#8217;s&lt;/em&gt; founders. This isn’t to say that the people that founded Firefox had entirely unique perceptions or abilities, but a founder has a unique ability to &lt;em&gt;advocate&lt;/em&gt; for a vision. To be&amp;nbsp;heard&amp;#8230;&lt;/p&gt;
&lt;h1&gt;Firefox vs.&amp;nbsp;Platform&lt;/h1&gt;
&lt;p&gt;When I joined Mozilla there were two large&amp;nbsp;groups:&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Firefox Group&lt;/strong&gt; would be the ones responsible for things like tabs, bookmarks, history, the &lt;span class="caps"&gt;URL&lt;/span&gt; bar, your profiles, cookie management, data sync and backup, etc. (Ironically these parts were called “chrome” before Chrome even&amp;nbsp;existed.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Platform&lt;/strong&gt; built &lt;a href="https://en.wikipedia.org/wiki/Gecko_(software)"&gt;Gecko&lt;/a&gt;, made the renderer, implemented new Web APIs, handled networking. Firefox was always the only meaningful consumer of this platform, but Platform didn’t think of itself as simply serving Firefox’s&amp;nbsp;needs.&lt;/p&gt;
&lt;p&gt;Platform was the dominant group, the ones who called the shots, while the Firefox frontend developers were just trying to keep&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;Later the two groups would be combined into the singular Firefox group, which I think was an important organizational improvement. But the underlying tensions of these two perspectives still&amp;nbsp;persisted&amp;#8230;&lt;/p&gt;
&lt;h1&gt;What is Firefox&amp;nbsp;for?&lt;/h1&gt;
&lt;p&gt;At some point I took to asking people in Mozilla: what is the purpose of Firefox? This was during Firefox 3 days when optimism for the product was&amp;nbsp;low.&lt;/p&gt;
&lt;p&gt;I expected a few answers, like to give the users of Firefox a great experience, or to give us a delivery vehicle for our principles of autonomy and privacy, or to keep the web relevant and vibrant in people’s&amp;nbsp;lives.&lt;/p&gt;
&lt;p&gt;And I did get all those answers, but also one I didn&amp;#8217;t expect: Firefox exists just to give Mozilla a seat at the table when the web is&amp;nbsp;defined.&lt;/p&gt;
&lt;p&gt;To explain: the web, and much of the internet, is based on standards, maintained by places like &lt;a href="https://www.w3.org/"&gt;&lt;span class="caps"&gt;W3C&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://whatwg.org/"&gt;&lt;span class="caps"&gt;WHATWG&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://www.ecma-international.org/"&gt;&lt;span class="caps"&gt;ECMA&lt;/span&gt;&lt;/a&gt;, and the &lt;a href="https://www.ietf.org/"&gt;&lt;span class="caps"&gt;IETF&lt;/span&gt;&lt;/a&gt;. These standards can help protect users, maintain privacy, expand the web platform, make technology more widely accessible, give people autonomy, anonymity, security. Or a standard can work against all those&amp;nbsp;principles.&lt;/p&gt;
&lt;p&gt;The standards don’t just apply to Firefox users. They affect all browsers and many devices that aren’t even browsers. So if Mozilla can positively affect these standards it can benefit&amp;nbsp;everyone.&lt;/p&gt;
&lt;p&gt;One good way to get a seat at the table is to be an important implementor. Standards are sometimes created with no implementations, but these usually don’t go anywhere. With that lesson learned, browser implementors have a lot of weight, both about how things are standardized and where attention is&amp;nbsp;directed.&lt;/p&gt;
&lt;p&gt;With this in mind the argument is: Firefox has to be popular enough that Mozilla has at least a veto over problematic points of standards, and the ability to vigorously advance positive&amp;nbsp;standards.&lt;/p&gt;
&lt;p&gt;This is a real thing at Mozilla. It still is to this day, even if exact kind of influence Mozilla is trying to apply has&amp;nbsp;changed.&lt;/p&gt;
&lt;p&gt;This is terrible for&amp;nbsp;Firefox.&lt;/p&gt;
&lt;h1&gt;Firefox was never&amp;nbsp;enough&lt;/h1&gt;
&lt;p&gt;Mozilla was never going to be happy building a great browser that its users loved. And don’t we all try to do the thing that makes us happy? If you don’t think a great browser will make you happy,&amp;nbsp;then&amp;#8230;&lt;/p&gt;
&lt;p&gt;And what is a better browser? Remember what was really cool in Firefox? Tabs! That was so long ago&amp;#8230; but why were tabs great? What are they for? I wish I could tell you that Mozilla was filled with competing pet theories and solutions based on those theories. It was not. (But it’s not too&amp;nbsp;late.)&lt;/p&gt;
&lt;p&gt;I see four visions for advancement of&amp;nbsp;browsers:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quantitative improvement:&lt;/strong&gt; The browser is window onto websites, and we should make it the best window it can be. Faster, lighter. Everything it is now, but more. (See &lt;a href="https://servo.org/"&gt;Servo&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All encompassing:&lt;/strong&gt; The web hosts most of our desktop applications. It should host even more of them, it should host mobile applications, it should be the universal platform. More APIs. More ways to package and present sites. (See &lt;a href="https://www.chromium.org/teams/web-capabilities-fugu"&gt;Project Fugu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technological pessimism:&lt;/strong&gt; The internet is terrible and we should make it less terrible. We need better privacy. Better security. More process isolation, more sandboxing. Less APIs and more restrictions on those APIs. (See &lt;a href="https://www.mozilla.org/en-US/firefox/unfck/"&gt;Unfck the Internet&lt;/a&gt; or &lt;a href="https://brave.com/"&gt;Brave&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A better browser:&lt;/strong&gt; The browser is used to… browse. To manage tasks, multitask, remember history, manage navigation, get us back to where we want to go. It’s an information tool. Browser should have better tab and task management, easier recall, tools to capture and move information. (See new browsers like &lt;a href="https://vivaldi.com/"&gt;Vivaldi&lt;/a&gt;, &lt;a href="https://tryshift.com/"&gt;Shift&lt;/a&gt;, and up and coming things like [&lt;a href="https://www.getamna.com/"&gt;Amna&lt;/a&gt; or &lt;a href="https://thebrowser.company/"&gt;The Browser Company&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Chrome started out very focused on &lt;em&gt;quantitative improvement&lt;/em&gt; but seems to be expanding towards &lt;em&gt;all encompassing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When I started at Mozilla it was focused on &lt;em&gt;all encompassing&lt;/em&gt; (culminating in &lt;a href="https://en.wikipedia.org/wiki/Firefox_OS"&gt;Firefox &lt;span class="caps"&gt;OS&lt;/span&gt;&lt;/a&gt;). But Firefox was frankly underwater quantitatively, and &lt;a href="https://blog.mozilla.org/blog/2017/11/14/introducing-firefox-quantum/"&gt;Quantum&lt;/a&gt; represented a bit of a pivot to &lt;em&gt;quantitative improvement&lt;/em&gt;. Now it&amp;#8217;s focused on &lt;em&gt;technological pessimism&lt;/em&gt; in the form of a security and privacy&amp;nbsp;emphasis.&lt;/p&gt;
&lt;p&gt;I don’t have a read on Edge, and as far as I can tell Safari isn’t into anything. Small upstarts seem interested in filling the &lt;em&gt;better browsing&lt;/em&gt; vacuum, and I wish them luck, but it&amp;#8217;s a hard&amp;nbsp;market.&lt;/p&gt;
&lt;p&gt;An organization with a love of the web and an understanding of the technology underneath the web could do something great. If only Firefox could be enough for&amp;nbsp;Mozilla.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Project ideas for (what’s left of) 2020</title><link href="https://ianbicking.org/blog/2020/09/project-ideas-2020.html" rel="alternate"></link><published>2020-09-15T00:00:00-05:00</published><updated>2020-09-15T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2020-09-15:/blog/2020/09/project-ideas-2020.html</id><summary type="html">&lt;script type="application/json" class="js-hypothesis-config"&gt;
{
  "showHighlights": true
}
&lt;/script&gt;
&lt;script src="https://hypothes.is/embed.js" async&gt;&lt;/script&gt;
&lt;style&gt;
.entry-content {
  padding-left: 4em;
}
.entry-content h2 {
  color: rgb(251, 245, 222);
  background-image: linear-gradient(70deg, rgb(46, 46, 35), rgb(46, 46, 35) 95%, transparent 95%, transparent 100%);
  margin-top: 3em;
  padding-left: 2em;
  margin-left: -4em
}
.entry-content h3 {
  margin-top: 2em;
  margin-left: -1em;
}
&lt;/style&gt;

&lt;p&gt;While I&amp;#8217;m conflicted with the need to find a …&lt;/p&gt;</summary><content type="html">&lt;script type="application/json" class="js-hypothesis-config"&gt;
{
  "showHighlights": true
}
&lt;/script&gt;
&lt;script src="https://hypothes.is/embed.js" async&gt;&lt;/script&gt;
&lt;style&gt;
.entry-content {
  padding-left: 4em;
}
.entry-content h2 {
  color: rgb(251, 245, 222);
  background-image: linear-gradient(70deg, rgb(46, 46, 35), rgb(46, 46, 35) 95%, transparent 95%, transparent 100%);
  margin-top: 3em;
  padding-left: 2em;
  margin-left: -4em
}
.entry-content h3 {
  margin-top: 2em;
  margin-left: -1em;
}
&lt;/style&gt;

&lt;p&gt;While I&amp;#8217;m conflicted with the need to find a new job, versus using this break from employment to do things I don&amp;#8217;t otherwise do, one way or another I feel compelled to &lt;em&gt;make something&lt;/em&gt;. I started writing down all the things I&amp;#8217;d like to do and now I have to choose one or&amp;nbsp;two.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve embedded &lt;a href="https://web.hypothes.is/"&gt;Hypothes.is&lt;/a&gt; on this page, which allows inline comments. The controls are floating in the top right of the page. If you have thoughts or resources related to any of these ideas that would be much&amp;nbsp;appreciated.&lt;/p&gt;
&lt;p&gt;I also hope some of these ideas will also spark your own imaginations, or, as so often happens to me, brings back to mind some forgotten thought you had meant to&amp;nbsp;pursue.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href="#job"&gt;Job&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#find-a-job"&gt;Find a&amp;nbsp;job&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#figure-out-what-job"&gt;Figure out what job I&amp;nbsp;want&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#web-projects"&gt;Web projects&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#document-store"&gt;Web-based document store / &lt;span class="caps"&gt;OS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#automated-exploration"&gt;Directed and automated exploratory testing of web&amp;nbsp;applications&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#simple-cms"&gt;Simple, reflective &lt;span class="caps"&gt;CMS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#personal-automation"&gt;Personal web automation&lt;/a&gt;
        &lt;ol&gt;
          &lt;li&gt;&lt;a href="#contribute-to-clipper"&gt;Contribute to a web&amp;nbsp;clipper&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#remaking-hotdish"&gt;Remake Hotdish. Also make&amp;nbsp;bots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#hypercard"&gt;Hypercard-like&amp;nbsp;thing&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#kids"&gt;For the kids&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#wikipedia"&gt;Child-focused Wikipedia&amp;nbsp;browser&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#microworlds"&gt;A foundation for a series of microworld&amp;nbsp;environments&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#jslogo"&gt;Jslogo environment / &lt;span class="caps"&gt;IDE&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#lo-fi-page-creator"&gt;Lo-fi text web page&amp;nbsp;creator&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#computing-home"&gt;Can computing feel like it has a sense of space, a&amp;nbsp;home?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#program-your-parent"&gt;Program your parent: a board&amp;nbsp;game&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#scratch-extension"&gt;Create a Scratch&amp;nbsp;extension&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#natural-language"&gt;Natural language&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#chat-bot-builder"&gt;Chat bot&amp;nbsp;builder&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#intent-parser-if"&gt;Use an intent parser to build a text&amp;nbsp;adventure&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#voice-news-reader"&gt;Voice-activated news&amp;nbsp;reader&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#mock-language-interface"&gt;Mock out a broad natural language&amp;nbsp;interface&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#brain-in-a-jar"&gt;Brain-in-a-jar dialog&amp;nbsp;game&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#interview-chatbot"&gt;Interview&amp;nbsp;chatbot&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#emotional-tamagotchi"&gt;Emotional&amp;nbsp;Tamagotchi&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#programming-languages"&gt;Programming languages&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#new-programming-syntax"&gt;Try to come up with a new category of programming&amp;nbsp;syntax&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#functional-core-notebook"&gt;Functional core&amp;nbsp;notebook&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#symbolic-execution"&gt;Something with symbolic&amp;nbsp;execution&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#reverse-execution"&gt;Attempt to reverse&amp;nbsp;execution&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#partial-evaluation"&gt;Partial evaluation as the execution&amp;nbsp;engine&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#ai"&gt;&lt;span class="caps"&gt;AI&lt;/span&gt;&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#binocular-vision"&gt;Binocular vision and image&amp;nbsp;processing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#nn-from-scratch"&gt;Neural networks from&amp;nbsp;scratch&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#not-computing"&gt;Not (just) computing&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#physical-workspace"&gt;Physical workspace&amp;nbsp;optimizations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#executive-function"&gt;Something involving executive&amp;nbsp;function&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#sms-watch"&gt;&lt;span class="caps"&gt;SMS&lt;/span&gt;-based dispatch system for the local neighborhood&amp;nbsp;watch&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#southside-greenway"&gt;Freshen up Southside Greenway&amp;nbsp;proposal&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#correspondence"&gt;Long-form slow-paced email correspondence&amp;nbsp;platform&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#game-word"&gt;Game&amp;nbsp;world&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#remembrance-agent"&gt;Remembrance&amp;nbsp;Agent&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#arcology"&gt;Arcology requirements and&amp;nbsp;constraints&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#fractals"&gt;Play with&amp;nbsp;fractals&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#fiction"&gt;Write&amp;nbsp;fiction&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#beliefs"&gt;Document my&amp;nbsp;beliefs&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;&lt;span id="job"&gt;Job&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="find-a-job"&gt;Find a&amp;nbsp;job&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I’m unemployed. It’s probably a good idea to find a&amp;nbsp;job.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I do need to find a&amp;nbsp;job&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I usually have a job, and this is a unique moment when I don’t have a&amp;nbsp;job&lt;/p&gt;
&lt;h3&gt;&lt;span id="figure-out-what-job"&gt;Figure out what job I&amp;nbsp;want&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I’m unemployed, I should probably figure out what I want to&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;I have a sense of what I want to do, an intersection of a Kind Of Work, and Topics Of&amp;nbsp;Interest.&lt;/p&gt;
&lt;p&gt;The Kind Of Work I want to do probably goes under the title of Product Engineer or Research Engineer, but those titles aren’t used universally or particularly well understood. I want to make new things, engaged individually and as part of a team in the ongoing discovery of the product scope. I’d like to be part of a small, diverse, multidisciplinary&amp;nbsp;team.&lt;/p&gt;
&lt;p&gt;The Topics Of Interest would&amp;nbsp;include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New user interfaces (including&amp;nbsp;voice)&lt;/li&gt;
&lt;li&gt;Edtech with a focus on pedagogy (I’m not as interested in tools supporting bureaucracy of&amp;nbsp;education)&lt;/li&gt;
&lt;li&gt;Efforts directed at &lt;a href="https://en.wikipedia.org/wiki/Executive_functions"&gt;executive&amp;nbsp;function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Productivity tools, using the lens of executive function (how can our tools support the executive function of&amp;nbsp;users)&lt;/li&gt;
&lt;li&gt;Psychological&amp;nbsp;well-being&lt;/li&gt;
&lt;li&gt;I have a technical interest in user-empowering automation&amp;nbsp;tools&lt;/li&gt;
&lt;li&gt;I have some &lt;a href="https://www.ianbicking.org/blog/2020/09/a-history-of-projects.html#togetherjs"&gt;interest in collaboration&amp;nbsp;tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I do enjoy making development tools, but I’m not sure it’s where I want to go with my&amp;nbsp;career&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My tasks here are (a) working better at describing my goals, and (b) verifying the goals. What do I really want to do, and what do I want to want to&amp;nbsp;do?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Sets me up to find the right job for&amp;nbsp;me&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Encourages me to focus on something that might not&amp;nbsp;exist&lt;/p&gt;
&lt;h2&gt;&lt;span id="web-projects"&gt;Web&amp;nbsp;projects&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="document-store"&gt;Web-based document&amp;nbsp;store&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;This is a way for applications and personal documents to&amp;nbsp;interact.&lt;/p&gt;
&lt;p&gt;This thinking came out of the blog post &lt;a href="http://www.ianbicking.org/blog/2019/01/we-need-open-hosting-platforms.html"&gt;&lt;em&gt;We Need Open Hosting Platforms&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea for the system is really just documents. These could be notes, essays, images, slideshows, or anything that the user authors. It’s not like a filesystem that also contains all kinds of system files and programs that don’t belong and aren’t managed by the user. It &lt;em&gt;is&lt;/em&gt; like Google Drive or Dropbox or whatever, but&amp;#8230;&amp;nbsp;open?&lt;/p&gt;
&lt;p&gt;It’s also not just named blobs. There’s lots of options for data storage, but it’s just a bunch of bytes and a content-type. Here we want to include other&amp;nbsp;information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How can the document be&amp;nbsp;edited?&lt;/li&gt;
&lt;li&gt;How can the document be&amp;nbsp;validated?&lt;/li&gt;
&lt;li&gt;Core metadata (e.g.,&amp;nbsp;title)&lt;/li&gt;
&lt;li&gt;Extensible metadata (e.g., images have&amp;nbsp;sizes)&lt;/li&gt;
&lt;li&gt;How can the document be viewed in&amp;nbsp;public?&lt;/li&gt;
&lt;li&gt;How can it be embedded in a web&amp;nbsp;page?&lt;/li&gt;
&lt;li&gt;What permissions do other people have? What permissions are&amp;nbsp;possible?&lt;/li&gt;
&lt;li&gt;Versioning&lt;/li&gt;
&lt;li&gt;Difference&amp;nbsp;display&lt;/li&gt;
&lt;li&gt;Copying and&amp;nbsp;linking&lt;/li&gt;
&lt;li&gt;Commenting&lt;/li&gt;
&lt;li&gt;Collaborative&amp;nbsp;editing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea here is that there is a framework for creating new kinds of documents, with both general &lt;span class="caps"&gt;UI&lt;/span&gt; (applicable to any document) and specific &lt;span class="caps"&gt;UI&lt;/span&gt; for different document&amp;nbsp;types.&lt;/p&gt;
&lt;p&gt;Things like “editors” are static bundles of JavaScript and &lt;span class="caps"&gt;HTML&lt;/span&gt; that obey certain protocols. Once you’ve got a document you might upgrade the editor, but you’ll also have a static copy of the editor in&amp;nbsp;perpetuity.&lt;/p&gt;
&lt;p&gt;A goal here is to allow open source developers to create new and interesting interfaces and interactions, without any of the worries of hosting. And users can use them without any worries about being bound to a service, and without placing any burden on the open source developer to maintain any kind of&amp;nbsp;service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I think the F/&lt;span class="caps"&gt;OSS&lt;/span&gt; community lacks innovation in the area of user experience, and the lack of a &lt;em&gt;place&lt;/em&gt; to do that work is part of it. Thinking critically about documents in the abstract is interesting to&amp;nbsp;me&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; It’s pretty ambitious and I probably don’t have the endurance to make this work really happen. It’s only as good as other people might make&amp;nbsp;it&lt;/p&gt;
&lt;h3&gt;&lt;span id="automated-exploration"&gt;Directed and automated exploratory testing of web&amp;nbsp;applications&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I think this would be a great business, and the while the automated testing environment grows year-by-year and new ideas emerge, I still think there’s huge unmet&amp;nbsp;potential.&lt;/p&gt;
&lt;p&gt;The web platform is pretty well-defined and sandboxed. At any moment a web application page supports dozens, but not thousands, of reasonable “next operations”: a click, keyboard entry, pasting, dragging, so forth. The protocols that support web debugging also expose much of the metadata you need (the &lt;span class="caps"&gt;DOM&lt;/span&gt; itself does not). So I believe automated exploration of a web is feasible and&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;hate&lt;/em&gt; scripted testing, such as Selenium. Most breakage of Selenium tests are because of tooling reasons, and of the remainder most are because of the test detecting intentional and correct changes. This testing punishes positive change instead of enabling&amp;nbsp;change.&lt;/p&gt;
&lt;p&gt;The most conservative attempt to fix this test breakage problem is “resilient selectors”, that deal with fragile selectors. This is about the most modest fix I can&amp;nbsp;imagine!&lt;/p&gt;
&lt;p&gt;A testing system built close to the web rendering system itself could fix many of the tooling issues, and many of the timing issues. &lt;a href="https://developers.google.com/web/tools/puppeteer"&gt;Puppeteer&lt;/a&gt; is an improvement&amp;#8230; but it’s a change to the paradigm that I think would really help: instead of testing against a script, the automation framework should just try things with an emphasis on reporting the result instead of comparing the function against a separately-maintained ideal (in the form of a scripted&amp;nbsp;test).&lt;/p&gt;
&lt;p&gt;I’ve put a lot of thought into this at Mozilla, though my pitches fell on deaf ears. I’m as optimistic about the idea now as I was many years ago when I started experimenting. But this is a Hard Work idea, not a Have Fun idea. I’m not opposed to hard work, but I’m not going to do it just for the fun, because it isn’t that&amp;nbsp;fun!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I’m personally convinced of the potential, &lt;em&gt;and&lt;/em&gt; there are big interesting unanswered&amp;nbsp;questions&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; It’s too big. It’s a developer tool, which is fine, but that&amp;#8217;s probably not what I want to do&amp;nbsp;long-term&lt;/p&gt;
&lt;h3&gt;&lt;span id="simple-cms"&gt;Simple, reflective &lt;span class="caps"&gt;CMS&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Can a &lt;span class="caps"&gt;CMS&lt;/span&gt; be self-hosting? If you just do it as a file editor with the right sort of authentication, I suppose so. But can a &lt;em&gt;quality&lt;/em&gt; &lt;span class="caps"&gt;CMS&lt;/span&gt; be self-hosting? One that doesn’t invite you to corrupt the app itself, that can be updated, that is extensible without going deep into the code, that handles both the individual bits of content and the aggregate content and the change of content over&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;CMS&lt;/span&gt; wouldn’t actually be fully self-hosting, I imagine a an underlying storage and rendering layer that is fixed, but not &lt;span class="caps"&gt;UI&lt;/span&gt;-specific. And it requires some things like a rescue &lt;span class="caps"&gt;UI&lt;/span&gt; that can’t itself be&amp;nbsp;destroyed.&lt;/p&gt;
&lt;p&gt;I’d want to prioritize a small codebase. Just making a featureful &lt;span class="caps"&gt;CMS&lt;/span&gt; isn’t a useful exercise for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I’ve been &lt;a href="https://www.ianbicking.org/blog/2020/09/a-history-of-projects.html#landscaper"&gt;thinking about this sort of thing a long&amp;nbsp;time&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I won’t do anything with the result, and the world is full enough of CMSs that no one else will&amp;nbsp;either&lt;/p&gt;
&lt;h3&gt;&lt;span id="personal-automation"&gt;Personal web&amp;nbsp;automation&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Most of the &lt;a href="https://www.ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html"&gt;web ideas I’ve had at Mozilla&lt;/a&gt; now leave me feeling bored. I’m not trying to be a professional right&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;But web and browser automation is still stuck in my head. Right now can I make something useful for &lt;em&gt;just me&lt;/em&gt;? What processes should I be optimizing? What interactions need different controls? How would I want to access those&amp;nbsp;controls?&lt;/p&gt;
&lt;p&gt;I might start by simply coding up the extension, and extending it in-place instead of creating any user-programmable&amp;nbsp;tool.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Could be personally useful. Thinking this stuff through is interesting to me, and now is a good time for&amp;nbsp;self-experimentation&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; It’s just diddling around with the same stuff I’ve been doing for a long&amp;nbsp;time&lt;/p&gt;
&lt;h4&gt;&lt;span id="contribute-to-clipper"&gt;Contribute to a web&amp;nbsp;clipper&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;I came upon &lt;a href="https://github.com/jhlyeung/rumin-web-clipper"&gt;Rumin Web Clipper&lt;/a&gt; recently (though I haven’t reviewed the current state of the art). It’s the sort of thing I’ve worked on before, and I have a lot of ideas in this area, but I don’t want to be in charge of&amp;nbsp;anything.&lt;/p&gt;
&lt;p&gt;I could find a site or two to try to scrape from and submit some PRs. Then the next step is to take some of that data and put it &lt;em&gt;into&lt;/em&gt; a site: the other half of structured data&amp;nbsp;extraction.&lt;/p&gt;
&lt;p&gt;Data extraction and injection is an interesting lens on&amp;nbsp;automation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; My contributions could be useful even if I don’t stick with it. I can focus more on what I care about and less on&amp;nbsp;infrastructure&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I might be trying to colonize someone else’s&amp;nbsp;project&lt;/p&gt;
&lt;h3&gt;&lt;span id="remaking-hotdish"&gt;Remake Hotdish. Also make&amp;nbsp;bots&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;One idea I didn’t get to with &lt;a href="https://www.ianbicking.org/blog/2020/09/a-history-of-projects.html#togetherjs"&gt;TogetherJS&lt;/a&gt; was &lt;a href="https://www.ianbicking.org/blog/2014/02/collaboration-as-a-skeuomorphism-for-agents.html"&gt;Collaboration as a Skeuomorphism for Agents&lt;/a&gt;: using collaboration the mechanism for smart bots to act on your&amp;nbsp;behalf.&lt;/p&gt;
&lt;p&gt;Also all of &lt;a href="https://www.ianbicking.org/projects.html#hotdish"&gt;Hotdish&lt;/a&gt; felt like something not-quite-complete. Unfinished work hangs around in my&amp;nbsp;head.&lt;/p&gt;
&lt;p&gt;Could I remake Hotdish in a simple way, with an eye to external&amp;nbsp;bots?&lt;/p&gt;
&lt;p&gt;Using a Firebase backend would make deployment fairly&amp;nbsp;light.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Gets some old ideas out of my head and into code. I feel better at a lot of the technologies than I was before. I’m really interested in the bot&amp;nbsp;angle&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Maintaining and using an extension is kind of a pain. I’d need people to actually use it with me. I can always recruit my wife, but will that be sufficient? And Chrome doesn’t have sidebars, which means the primary &lt;span class="caps"&gt;UI&lt;/span&gt; element I imagine wouldn’t be portable. I’m pretty sure the work would disappear into&amp;nbsp;obscurity&lt;/p&gt;
&lt;h3&gt;&lt;span id="hypercard"&gt;Hypercard-like&amp;nbsp;thing&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;This idea is perennial for many people. I don’t think we all agree what it&amp;nbsp;means.&lt;/p&gt;
&lt;p&gt;To me this is a composition tool that can create simple, content-oriented interactive sites, with some simple core metaphors like buttons/links and&amp;nbsp;cards.&lt;/p&gt;
&lt;p&gt;The use of slideshow tools in schools make me more confident that this remains an important use case. I really hate that slide decks have become a significant medium in schools, but the positive side is that they are a good medium for short-form multimedia documents. The slide is a valid unit of structure, akin to the paragraph. The composition tools are flexible and don’t privilege text over everything else. It&amp;#8217;s almost an accident that the purported purpose is giving a&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;I see aspects of this embedded in newer online educational tools like Flipgrid and Seesaw. They raise the bar, but maybe also prove the&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Feels of-the-moment. Some of the technology feels familiar. Other parts feel familiar but tedious (I’m not going to write a good drawing tool). Jumping onto someone else’s project might be possible (but&amp;nbsp;whose?)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Large scope. Everyone projects different ideas onto Hypercard. Cannot be&amp;nbsp;finished&lt;/p&gt;
&lt;h2&gt;&lt;span id="kids"&gt;For the&amp;nbsp;kids&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="wikipedia"&gt;Child-focused Wikipedia&amp;nbsp;browser&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Recently my father asked me what ever happened to &lt;a href="http://one.laptop.org/"&gt;&lt;span class="caps"&gt;OLPC&lt;/span&gt;&lt;/a&gt;. I looked it up to be sure – the domain is there! – but mostly the idea has passed. I found &lt;a href="https://medium.com/@mapmeld/if-one-laptop-per-child-started-today-80d105fef1bb"&gt;this retrospective about &lt;span class="caps"&gt;OLPC&lt;/span&gt;&lt;/a&gt; from 2016 and it got me&amp;nbsp;thinking.&lt;/p&gt;
&lt;p&gt;Was &lt;span class="caps"&gt;OLPC&lt;/span&gt; too focused on &lt;a href="https://en.wikipedia.org/wiki/Constructivism_(philosophy_of_education)"&gt;constructivism&lt;/a&gt;? That is, the idea of students actively constructing their education. I like constructivism, but now I’m skeptical if it’s actually &lt;em&gt;correct&lt;/em&gt;. Also: is it the right role for a computer in these&amp;nbsp;environments?&lt;/p&gt;
&lt;p&gt;A computer can also be a font of wisdom, a deliverer of information. Maybe that’s enough. And of course Wikipedia is a nexus for&amp;nbsp;information.&lt;/p&gt;
&lt;p&gt;If we just plopped Wikipedia on a kids computer, how well would that work? Certainly it doesn’t work if you are pre-literate, but that’s only one of many&amp;nbsp;problems.&lt;/p&gt;
&lt;p&gt;What would it look like to make something that a kid could sit in front of, as their first ever computing experience, and experience Wikipedia? Probably there would be a place for speech output, maybe speech input. Nonlinear presentation of articles might be good. Using &lt;a href="https://simple.wikipedia.org/"&gt;simple.wikipedia.org&lt;/a&gt; might be useful (though I assume it’s only in English). Returning to and repeating content will be important for&amp;nbsp;kids.&lt;/p&gt;
&lt;p&gt;It feels like it would be easy to get started on this, while the final product would be a long&amp;nbsp;journey.&lt;/p&gt;
&lt;p&gt;This could turn into a different browsing experience than the traditional web browser. But it is truly browsing, Wikipedia exemplifies the Old Web: linked documents containing information. But the content is more normalized and consistent (including editorially consistent) than the web, making it easier to&amp;nbsp;reimagine.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/WikiReader"&gt;WikiReader&lt;/a&gt; is an example, though not an &lt;a href="https://www.youtube.com/watch?v=1lRI35gKSPA&amp;amp;t=2s"&gt;example of much&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Interesting to think about. Getting started is easy. I live with some experiment subjects. I think Wikipedia is one of the best things we got&amp;nbsp;going&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I feel a little under equipped. It doesn’t satisfy my desire to do some technical deep&amp;nbsp;dives&lt;/p&gt;
&lt;h3&gt;&lt;span id="microworlds"&gt;A foundation for a series of microworld&amp;nbsp;environments&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Mindstorms introduced the idea of &lt;a href="http://edutechwiki.unige.ch/en/Microworld"&gt;Microworlds&lt;/a&gt;, but it never went anywhere. Where could it go? Is there an environment that could support many microwords? Would it look like Scratch, Logo, or something different? Or a framework for building&amp;nbsp;environments?&lt;/p&gt;
&lt;p&gt;It might be unreasonable to even consider a foundation without first having several actual microworlds. But supporting small domains and ideas is part of the goal, so this isn’t a blocker. For&amp;nbsp;instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buzzfeed-style quiz&amp;nbsp;generator&lt;/li&gt;
&lt;li&gt;Eliza-style&amp;nbsp;chatbot&lt;/li&gt;
&lt;li&gt;Word explorer (e.g., what words are palindromes? What words have 6 letters where the third is&amp;nbsp;T?)&lt;/li&gt;
&lt;li&gt;Simple music&amp;nbsp;generation&lt;/li&gt;
&lt;li&gt;Cypher&amp;nbsp;building&lt;/li&gt;
&lt;li&gt;Math worksheet&amp;nbsp;creator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s possible that it would be better to design these and not worry so much about the implementation. As long as I’m not implementing maybe there can be more ambitious&amp;nbsp;examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Projectile&amp;nbsp;physics&lt;/li&gt;
&lt;li&gt;Ecology&amp;nbsp;simulation&lt;/li&gt;
&lt;li&gt;Map generation,&amp;nbsp;erosion&lt;/li&gt;
&lt;li&gt;Equation exploration (explore things like how numbers increase by&amp;nbsp;square/cube/exponent)&lt;/li&gt;
&lt;li&gt;Writing&amp;nbsp;cues&lt;/li&gt;
&lt;li&gt;Choose your own&amp;nbsp;adventure&lt;/li&gt;
&lt;li&gt;Foreign language exploration (what happens when you translate words vs&amp;nbsp;sentences?)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I think we’ve leaned in too far to “learn programming” but not nearly enough into “learn with&amp;nbsp;programming”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I haven’t taught these things myself, I just noodle around with the kids. I don’t feel pedagogically&amp;nbsp;competent&lt;/p&gt;
&lt;h3&gt;&lt;span id="jslogo"&gt;Jslogo environment / &lt;span class="caps"&gt;IDE&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.calormen.com/jslogo/"&gt;This Logo interpreter&lt;/a&gt; is a decent generic logo interpreter. (I &lt;a href="https://github.com/inexorabletash/jslogo/pull/70"&gt;learned Promises&lt;/a&gt; while contributing async support.) But when I use it with my kids it’s kind of awkward, and we always lose our&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;It would be nice to make use of the interpreter in a different&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;First, I’m thinking less interactive/&lt;span class="caps"&gt;REPL&lt;/span&gt; and more about creating a full program. Right now the typical program we write is&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cs
repeat 4 [forward 100 rt 90]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is, always start with &lt;code&gt;cs&lt;/code&gt; (clear screen) and then a bunch of commands so it can be re-run from the beginning after&amp;nbsp;adjustments.&lt;/p&gt;
&lt;p&gt;I imagine making these repeatable code blocks the standard interaction pattern, treating them something like unnamed functions. Then if you want you can name them and compose them as well (&lt;em&gt;without&lt;/em&gt; the clear screen of&amp;nbsp;course).&lt;/p&gt;
&lt;p&gt;It might be worth &lt;a href="https://escholarship.org/uc/item/1623m1p3"&gt;revisiting the history&lt;/a&gt; to look for other ideas (or &lt;a href="https://news.ycombinator.com/item?id=23052300"&gt;mine some comments&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I know the language and am familiar with the implementation. Block programming has its advantages, but Logo also has affordances for children. The environment is a really big deal and I have an intuition on some improvements, but there’s also lots of active questions. Deploying is fairly easy, so it could exist in the wild even if I don’t pursue it&amp;nbsp;indefinitely&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Logo is a fairly obscure language. I’ve been impressed with how well the kids do with block programming. Turtles are &lt;span class="caps"&gt;OK&lt;/span&gt;, but also a little&amp;nbsp;eh&lt;/p&gt;
&lt;h3&gt;&lt;span id="lo-fi-page-creator"&gt;Lo-fi text web page&amp;nbsp;creator&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;This is something my younger daughter vaguely requested, and makes sense to&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Imagine an 80s computer or roguelike, where the screen is your canvas and characters are your paint. So only absolute positioning on a strict grid. Emoji are the only graphics. Letters can be sized 1x, 2x, 3x,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;I’m not sure if this requires a monospace font, and I’m not sure what the exact spacing of the font would be in that case; does a clean letter aspect ration matter (e.g.,&amp;nbsp;2x1)?&lt;/p&gt;
&lt;p&gt;I think there would still be click events and that sort of thing, so you could add dynamicism to the page (that’s the fun part). I tried creating a literal grid and was unhappy with it, so it would still be absolute positioned divs, just with fixed&amp;nbsp;alignment.&lt;/p&gt;
&lt;p&gt;This would require some emoji picker, like &lt;a href="https://github.com/elsmr/emoji-pane"&gt;emoji-pane&lt;/a&gt; or &lt;a href="https://github.com/OneSignal/emoji-picker"&gt;emoji-picker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Fun to try out with the kids as they build web pages for themselves (which they are interested in). I think I’d like the aesthetic of it. I see a lot of advantage in simplifying compositional tools for&amp;nbsp;kids&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Deployment can be annoying. Glitch makes it easy to get a site up, but not &lt;a href="https://support.glitch.com/t/simple-owner-writable-storage/30364/15"&gt;easy to build editors&lt;/a&gt;, so any &lt;span class="caps"&gt;CMS&lt;/span&gt; has to be a whole production. Kids might only play with it a little then we all forget&amp;nbsp;it&lt;/p&gt;
&lt;h3&gt;&lt;span id="computing-home"&gt;Can computing feel like it has a sense of space, a&amp;nbsp;home?&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;When I’ve tried to interrogate my own sense of nostalgia in computing, something I’ve wanted to recapture is the sense of space and a home in your own computer. A hard disk or even a set of floppy disks give this sense of a place, where you acquire and place things, and where you move around. BBSs had similar feelings, even if it was a clubhouse instead of a home. This was part of the early web as well, but now the web is like visiting a public space. I can visit Facebook, Google Drive, or any other social forum, but I’m just a&amp;nbsp;visitor.&lt;/p&gt;
&lt;p&gt;I’m especially noticing this while watching kids use iOS and Chrome &lt;span class="caps"&gt;OS&lt;/span&gt;, where the experience feels particularly generic and&amp;nbsp;impersonal.&lt;/p&gt;
&lt;p&gt;I don’t know how to bring back this sense of personal place. I know it’s not flat, reorderable lists. It’s not algorithmically ranked items. Maybe it’s important to be spacial. Or maybe it’s just important that it’s sticky and personally constructed. A place with personal paths,&amp;nbsp;rediscovery.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; This is an attribute I’d like to have in things-I-make, and I think there might be general lessons to be learned. So even if I come up with something that doesn’t work well or I abandon, I think I will have learned&amp;nbsp;something&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I don’t know what I’m looking for or how to know it when I find&amp;nbsp;it&lt;/p&gt;
&lt;h3&gt;&lt;span id="program-your-parent"&gt;Program your parent: a board&amp;nbsp;game&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;This is similar to &lt;a href="http://www.robotturtles.com/"&gt;Robot Turtles&lt;/a&gt;, but relies on the parent to be the&amp;nbsp;computer.&lt;/p&gt;
&lt;p&gt;Like Robot Turtles the programs are built with cards. Though maybe it would involve more printable and consumable cards (e.g., things you write numbers on, or “functions” that are a page with slots for&amp;nbsp;parameters).&lt;/p&gt;
&lt;p&gt;I imagine two possible goals: one is simply to make your parent do silly things. The second is to solve puzzles, both specifically and generally. (Maybe the puzzle prize is to get your parent to do something silly, like you win silly&amp;nbsp;card/routines)&lt;/p&gt;
&lt;p&gt;This is going to rely on the parent both faithfully executing programs, and doing it with enough transparency to help their child debug the&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Fun to do with the kids. Easy to&amp;nbsp;share&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I don’t want to create yet another puzzle-based beginner programming&amp;nbsp;thing&lt;/p&gt;
&lt;h3&gt;&lt;span id="scratch-extension"&gt;Create a Scratch&amp;nbsp;extension&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;You can &lt;a href="https://en.scratch-wiki.info/wiki/Scratch_Extension"&gt;build extensions to Scratch&lt;/a&gt;. Some speech-related extensions would be easy to imagine. There’s also &lt;a href="https://snap.berkeley.edu/"&gt;Snap!&lt;/a&gt; to&amp;nbsp;consider.&lt;/p&gt;
&lt;p&gt;I’ve also wanted an equation block, that doesn’t require dragging a ton of math-related blocks together to make a simple equation like &lt;code&gt;100 - (x / 4)&lt;/code&gt;. I bet it wouldn’t be too hard. The fact variable names are free text and editable does make it harder though, not to mention the fundamentally unnamed aspect of many getters. Maybe this is a bad&amp;nbsp;idea.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Without too much work I could make an interesting change to a programming environment my kids&amp;nbsp;enjoy&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; It’s hard to distribute extensions. Probably what I learn won’t be generalizable to anything&amp;nbsp;else&lt;/p&gt;
&lt;h2&gt;&lt;span id="natural-language"&gt;Natural&amp;nbsp;language&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="chat-bot-builder"&gt;Chat bot&amp;nbsp;builder&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I think it would be cool to let the kids write a little chat bot. Wiring it up on the web is really easy (well, easy in&amp;nbsp;Chrome).&lt;/p&gt;
&lt;p&gt;I’ve already extracted a &lt;a href="https://github.com/ianb/phrase-matcher"&gt;library from Firefox Voice&lt;/a&gt; and played around with a site on&amp;nbsp;Glitch.&lt;/p&gt;
&lt;p&gt;I want to allow some of the programming to happen as part of the dialog. For instance, if the bot doesn’t respond well, you should be able to say: “you should have said [X]”, and add to the program on the&amp;nbsp;fly.&lt;/p&gt;
&lt;p&gt;I’ve had a hard time focusing the kids on question of what kind of entity they’d like to create. Does it have a personality? Does it have a&amp;nbsp;purpose?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I have all the pieces, and it’s stuff I’ve been doing lately. Simple and hopefully&amp;nbsp;fun&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; The kids aren’t as excited about this as I think they should be. Not sure about the phrase matching, but I don’t want to turn this into&amp;nbsp;Dialogflow&lt;/p&gt;
&lt;h3&gt;&lt;span id="intent-parser-if"&gt;Use an intent parser to build a text&amp;nbsp;adventure&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I checked out and did some tests with intent parsers while making Firefox Voice, but I never actually seriously used one. If I did use one it would be &lt;a href="https://rasa.com/"&gt;Rasa&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Making a text adventure (ahem, writing &lt;em&gt;Interactive Fiction&lt;/em&gt;) using an intent parser seems interesting. Parsing always frustrated me as a user, and maybe these new techniques can&amp;nbsp;help.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Fills out my domain knowledge a bit, while also using things I’ve somewhat familiar with. The result should be fun and&amp;nbsp;playful&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I don’t have a story idea! Publishing something based on Rasa may be hard (since I don’t want to maintain a&amp;nbsp;server)&lt;/p&gt;
&lt;h3&gt;&lt;span id="voice-news-reader"&gt;Voice-activated news&amp;nbsp;reader&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;One of the concepts from my work in Consumer Voice Products was a voice-activated news reader. It would be a way to browse newsy sites and get articles read to you, with a voice interface to control the read back (“skip”, “summarize”, “expand” etc). The ideal place to do this is on the phone, as a kind of podcast alternative, but deploying on the phone requires lots of boring engineering I’m uninterested&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;So instead I could try making it in the browser. Maybe I could use &lt;a href="https://github.com/castorini/howl"&gt;Howl&lt;/a&gt; or something based on &lt;a href="https://ai.googleblog.com/2017/08/launching-speech-commands-dataset.html"&gt;Speech Commands&lt;/a&gt; for voice recognition. Or just leave the mic open for transcription as a prototype phase, though feedback might make that&amp;nbsp;impossible.&lt;/p&gt;
&lt;p&gt;“Give me my daily update” is a common home voice assistant feature, but it does nothing for me. I imagine this as something you’d interact with as an alternative to&amp;nbsp;radio.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I don’t think this would require a lot of work to prototype. I think the idea is a good one. It could be an interesting&amp;nbsp;demo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I think it will rely on &lt;a href="https://en.wikipedia.org/wiki/Keyword_spotting"&gt;keyword spotting&lt;/a&gt; and it’s not feasible for me to collect new words to train models, so my commands will have to rely on what’s already out there. Also maybe this isn’t&amp;nbsp;fun&lt;/p&gt;
&lt;h3&gt;&lt;span id="mock-language-interface"&gt;Mock out a broad natural language&amp;nbsp;interface&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;What if we did most of our computing using natural language? This is mostly a brainstorming exercise. Take a some typical computer interactions and reimagine them entirely with natural&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;The result probably imagines a refactored experience. Things that are distinct steps now would be combined, while other situations would require conversational or other multi-step interactions. It might imply new things, like named staging locations, or other&amp;nbsp;shortcuts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I think there’s a certain naiveté to our voice interfaces, but I don’t know what we’d even be trying to get to. Maybe I’d have some more&amp;nbsp;ideas?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; The result is just… a blog&amp;nbsp;post?&lt;/p&gt;
&lt;h3&gt;&lt;span id="brain-in-a-jar"&gt;Brain-in-a-jar dialog&amp;nbsp;game&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The premise: a person has had their consciousness extracted, or at least simulated in a computer. You, a temp/Mechanical Turk, have been hired to make this artificial consciousness feel better. If it realizes it is a robot it will be&amp;nbsp;rebooted.&lt;/p&gt;
&lt;p&gt;Technically I’m not sure how to do much of this. But it could be fun to try. Different utterances would increase or decrease the existential skepticism&amp;nbsp;points.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Learn some more &lt;span class="caps"&gt;NLP&lt;/span&gt;. Play around with fictional emotional ideas. Maybe I can share a rough playable&amp;nbsp;game&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I’m not sure how to drive a useful plot forward. There’s a game design aspect that I know nothing&amp;nbsp;about&lt;/p&gt;
&lt;h3&gt;&lt;span id="interview-chatbot"&gt;Interview&amp;nbsp;chatbot&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Not a job interview! This chatbot doesn’t pretend to be human, doesn’t even pretend to really talk to you. Instead it interviews you. It asks questions, maybe asks followup questions, and saves the responses. Might operate better over email than chat. Make your own oral&amp;nbsp;history!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I think I would like the result of this. Self-documentation is important. It would be easy to manually (Wizard Of Oz)&amp;nbsp;prototype&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Most people (including myself) will just try it for a week or two then forget about it, or worse feel guilty for not&amp;nbsp;continuing&lt;/p&gt;
&lt;h3&gt;&lt;span id="emotional-tamagotchi"&gt;Emotional&amp;nbsp;Tamagotchi&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Your little entity/bot gets lonely and sad. Instead of feeding it fake food and whatnot, you must feed it emotional support and positive&amp;nbsp;feelings.&lt;/p&gt;
&lt;p&gt;Secretly it’s all sent to actual sad people to make them happy. A language transformer covers up the&amp;nbsp;humanity.&lt;/p&gt;
&lt;p&gt;Nah, I probably wouldn’t do the second&amp;nbsp;part.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Kind of easy. Maybe involves plugging existing models together. I’m curious what it would feel like to&amp;nbsp;use&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Easy to hack. Lacks actual emotional&amp;nbsp;core&lt;/p&gt;
&lt;h2&gt;&lt;span id="programming-languages"&gt;Programming&amp;nbsp;languages&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="new-programming-syntax"&gt;Try to come up with a new category of programming&amp;nbsp;syntax&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;There’s only a few syntaxes in programming&amp;nbsp;languages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Algol&lt;/li&gt;
&lt;li&gt;Lisp&lt;/li&gt;
&lt;li&gt;Forth&lt;/li&gt;
&lt;li&gt;Smalltalk&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;APL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;SQL&lt;/span&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;People keep revisiting these basic syntaxes, and even then it’s like a power law of popularity. Just out of curiosity, are there other things we could&amp;nbsp;try?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.textfiles.com/bitsavers/pdf/xerox/alto/Smalltalk72_Manual.pdf"&gt;Smalltalk-72&lt;/a&gt; had some interesting ideas. It was very expansive and inclusive. Smalltalk-76 (which is pretty much what we have today) pulled a small core out of that, but maybe there’s other foundations of syntax to be mined from those&amp;nbsp;ideas?&lt;/p&gt;
&lt;p&gt;I would probably just use this as a brainstorming exercise, and then mock up some results and write a blog&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Pretty simple and finite. Hopefully fun. If I can’t come up with anything, so it&amp;nbsp;goes&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Just a silly little&amp;nbsp;exercise&lt;/p&gt;
&lt;h3&gt;&lt;span id="functional-core-notebook"&gt;Functional core&amp;nbsp;notebook&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Order of execution is a common problem in notebooks, as well as experimentation. Notebooks are often exploratory, and you want to try different versions of functions and&amp;nbsp;processes.&lt;/p&gt;
&lt;p&gt;This would be a lot easier with functional and deterministic code. You could memoize results and understand&amp;nbsp;dependencies.&lt;/p&gt;
&lt;p&gt;I also feel like lots of the imperative and stateful parts of notebooks are the setup, such as acquiring data. So I imagine a kind of “shell” in the notebook where you do imperative setup and the cells where you reshape data and do&amp;nbsp;calculations.&lt;/p&gt;
&lt;p&gt;The name has some similarity to &lt;a href="https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell"&gt;Functional Core, Imperative Shell&lt;/a&gt; and probably some similar motivations, but encodes the idea directly into the tool and&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;I’m wondering if I could do this with a deterministic subset of Python. Things like “import” are environment setup, and maybe even function definitions, while there’s innards that are&amp;nbsp;deterministic.&lt;/p&gt;
&lt;p&gt;It may be &lt;span class="caps"&gt;OK&lt;/span&gt; for the code to stateful, &lt;em&gt;if&lt;/em&gt; the statefulness is part of the analysis. That is, you could have a cell&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;most_populous_cities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_cities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;most_populous_cities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;population&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;most_populous_cities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It both creates a new global variable, &lt;em&gt;and&lt;/em&gt; modifies it in place. But if &lt;code&gt;all_cities&lt;/code&gt; is the same then the result of this calculation will be the same. You could consider its input to be &lt;code&gt;[all_cities]&lt;/code&gt; and its output is an addition to the environment &lt;code&gt;[most_populous_cities]&lt;/code&gt;. (Also &lt;code&gt;city&lt;/code&gt; is set and almost certainly is not important, but that’s the kind of detail we’d need to figure out. Also it’s not &lt;span class="caps"&gt;OK&lt;/span&gt; for another cell to modify &lt;code&gt;most_populous_cities&lt;/code&gt; – modifications need to create new global&amp;nbsp;variables.)&lt;/p&gt;
&lt;p&gt;I think &lt;a href="https://observablehq.com/"&gt;Observable&lt;/a&gt; has bits of this in its&amp;nbsp;concept?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I’ve &lt;a href="https://www.ianbicking.org/blog/2018/11/viewing-python-execution-source-code-rewriting.html"&gt;played with ASTs&lt;/a&gt; and found it interesting and productive, and this general concept is one I’ve been thinking about for a long&amp;nbsp;time&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Do I make a new notebook interface? Maybe… and maybe it’s okay if it’s scrappy, but it’s kind of a&amp;nbsp;distraction&lt;/p&gt;
&lt;h3&gt;&lt;span id="symbolic-execution"&gt;Something with symbolic&amp;nbsp;execution&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I’ve never seriously done symbolic execution or even used it. But I’ve found the &lt;a href="https://writings.stephenwolfram.com/2019/05/what-weve-built-is-a-computational-language-and-thats-very-important/"&gt;Wolfram Language&lt;/a&gt; interesting, and find it really interesting as something quite distinct from more formal functional&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;I guess I should check out &lt;a href="https://github.com/ksluckow/awesome-symbolic-execution"&gt;this list&lt;/a&gt;, &lt;a href="https://www.sympy.org/en/index.html"&gt;SymPy&lt;/a&gt;, &lt;a href="https://github.com/bannsec/pySym"&gt;pySym&lt;/a&gt; (?!?), &lt;a href="https://www.sagemath.org/"&gt;Sage&lt;/a&gt;, &lt;a href="https://github.com/ExpoSEJS/ExpoSE"&gt;ExpoSE&lt;/a&gt; (JavaScript), &lt;a href="https://prepack.io/"&gt;Prepack&lt;/a&gt; (&lt;span class="caps"&gt;JS&lt;/span&gt; partial evaluation), &lt;a href="https://peval.readthedocs.io/en/latest/"&gt;peval&lt;/a&gt; (Python partial&amp;nbsp;evaluation).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; There’s lots of material to start with, and it’s easy to come up with early experiments. It’s the kind of problem I can sit down and tackle for a day at a&amp;nbsp;time&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Not very human-centric. Lots of prior art is actually about a kind of speculative execution of binaries for security checking, which I find&amp;nbsp;boring&lt;/p&gt;
&lt;h4&gt;&lt;span id="reverse-execution"&gt;Attempt to reverse&amp;nbsp;execution&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;Given a return value from a function, what inputs or actions might have led to&amp;nbsp;that?&lt;/p&gt;
&lt;p&gt;I presume this is pretty hard, and possibilities explode quickly. But I’d like to understand &lt;em&gt;why&lt;/em&gt; it is hard, and the easiest way might be to try until I&amp;nbsp;fail.&lt;/p&gt;
&lt;p&gt;This will require new “possibility” objects, and probably kinds of partial evaluation (partial&amp;nbsp;unevaluation?).&lt;/p&gt;
&lt;p&gt;Maybe I’d pick a subset of JavaScript (maybe Python) and use the &lt;span class="caps"&gt;AST&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I can just jump in and&amp;nbsp;start&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I know the result is failure! I just don’t know where and&amp;nbsp;when&lt;/p&gt;
&lt;h3&gt;&lt;span id="partial-evaluation"&gt;Partial evaluation as the execution&amp;nbsp;engine&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I think this might be what I actually am thinking of when I think of &lt;a href="#symbolic-execution"&gt;symbolic execution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Partial evaluation is taking an expression and evaluating the parts you already know. So if you see&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# My apologies for this lazily constructed example...&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Answer:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some_func&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you can look at how &lt;code&gt;calculate()&lt;/code&gt; is called with one known value (&lt;code&gt;10&lt;/code&gt;) and then see that &lt;code&gt;if x:&lt;/code&gt; will be true, and so on, reducing it all to &lt;code&gt;print("Answer:", 20)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are limitations to how well you can do this in an imperative language. For instance in this case we&amp;#8217;ve optimized away the call to &lt;code&gt;some_func()&lt;/code&gt;, and that might not be correct: the function might actually do something important, even if its return value is thrown&amp;nbsp;away.&lt;/p&gt;
&lt;p&gt;But this is also a feature: by eliminating &lt;code&gt;some_func()&lt;/code&gt; you can simplify the program, or at least find the simpler specific program that lives in the complete&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;A long, long, long time ago I made something called &lt;a href="https://web.archive.org/web/20080512151939/http://www.colorstudy.com/software/tcl-scheme/"&gt;&lt;code&gt;tcl-&amp;gt;scheme&lt;/code&gt;&lt;/a&gt; that was a &lt;span class="caps"&gt;TCL&lt;/span&gt; interpreter written in functional Scheme, with the idea that if you apply partial evaluation you can compile &lt;span class="caps"&gt;TCL&lt;/span&gt; into Scheme. This only works to the degree that &lt;span class="caps"&gt;TCL&lt;/span&gt; doesn&amp;#8217;t use overly dynamic features (like &lt;a href="https://www.tcl.tk/man/tcl8.6/TclCmd/eval.htm"&gt;eval&lt;/a&gt;), but even if it does you still have a working intepreter to fall back&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Maybe combined with the &lt;a href="#functional-core-notebook"&gt;functional core&lt;/a&gt; notebook concept this could create something&amp;nbsp;interesting.&lt;/p&gt;
&lt;p&gt;To take this a bit&amp;nbsp;further:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The language has to have the ability to be expanded out into expressions. &lt;a href="https://en.wikipedia.org/wiki/S-expression"&gt;S-Expressions&lt;/a&gt; are very appealing, though more eclectic syntaxes aren&amp;#8217;t &lt;em&gt;that&lt;/em&gt; much worse. But Python&amp;#8217;s indentation-based syntax is&amp;nbsp;problematic.&lt;/li&gt;
&lt;li&gt;All objects need source code representations. It&amp;#8217;s important to me that we can turn all the intermediate forms into actual source code, to see how the source actually evolves. &lt;code&gt;&amp;lt;SomeObject at 0x0292a43e&amp;gt;&lt;/code&gt; isn&amp;#8217;t going to&amp;nbsp;work.&lt;/li&gt;
&lt;li&gt;But maybe representations can also be richer than&amp;nbsp;text.&lt;/li&gt;
&lt;li&gt;It would be nice to track where literals came from, and use that to detect if they are&amp;nbsp;editable.&lt;/li&gt;
&lt;li&gt;It would be interesting to include tracking information so you could see why an object became what it&amp;nbsp;is.&lt;/li&gt;
&lt;li&gt;There doesn&amp;#8217;t have to be any undefined errors: if you refer to something that doesn&amp;#8217;t exist it could be an as-yet-unspecified input. Or code that hasn&amp;#8217;t been written yet. The system can &amp;#8220;think about&amp;#8221; (partially evaluate!) incomplete&amp;nbsp;code.&lt;/li&gt;
&lt;li&gt;Because execution happens opportunistically the language can&amp;#8217;t be imperative, it can&amp;#8217;t be a sequence of things being executed. Technically it &lt;em&gt;could&lt;/em&gt;, and partial evaluation systems can take that into account, but the rewritten code is too complex for our&amp;nbsp;purposes.&lt;/li&gt;
&lt;li&gt;You can imagine a multiple worlds execution, and doing diffs of the result. If I have three different inputs, and diff the resulting partially evaluated programs, what do I get? If I have two implementations of a function, how do they change the overall execution? This could be an interesting way to think about code&amp;nbsp;changes.&lt;/li&gt;
&lt;li&gt;There&amp;#8217;s going to be lots of &amp;#8220;smart&amp;#8221; primitives: routines that are built into the execution engine and know how to execute the source itself. There&amp;#8217;s definitely a powerful and general execution engine (the thing I write), and a much less powerful user-programmable expression&amp;nbsp;engine.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think &lt;a href="http://www.textfiles.com/bitsavers/pdf/xerox/alto/Smalltalk72_Manual.pdf"&gt;Smalltalk-72&lt;/a&gt; played around with these ideas, and looking into it would be&amp;nbsp;helpful.&lt;/p&gt;
&lt;p&gt;The JavaScript parsing and &lt;span class="caps"&gt;AST&lt;/span&gt;-rewriting ecosystem is healthy, and I think I could use it as a starting&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I&amp;#8217;ve thought about this a long time, and writing it down makes me excited. This is fun&amp;nbsp;programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I&amp;#8217;m not sure I can get it to be a useful environment (simply because it&amp;#8217;s a lot of work), and if it&amp;#8217;s not useful then I can&amp;#8217;t confirm the utility of the concept&amp;nbsp;itself&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve started on this some, using &lt;a href="https://github.com/benjamn/recast"&gt;Recast&lt;/a&gt; to operate on JavaScript ASTs. Working in &lt;a href="https://github.com/ianb/partial-language"&gt;github/ianb/partial-language&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Right now it&amp;#8217;s stuck to JavaScript syntax, though not necessarily JavaScript semantics. I expect this may be a problem. A series of transformations looks&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Original input, note order of declaration is not important:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 1 (function and variable definitions consumed and remembered):&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 2 (x and func substituted):&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 3 (1 == 1 substituted, parameter moved into function):&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;})()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 4 (?: evaluated, p substituted):&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 5 (arrow function with one return removed):&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 6 (math):&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 7 (more math):&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 8 (last math):&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#8217;s cute, doesn&amp;#8217;t take too much code. I&amp;#8217;m not sure how far it can go. Having more control of the syntax would be nice, for instance substituting &lt;code&gt;func(10)&lt;/code&gt; for an inline arrow function is not the best, but there aren&amp;#8217;t block expressions in&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;h2&gt;&lt;span id="ai"&gt;&lt;span class="caps"&gt;AI&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="binocular-vision"&gt;Binocular vision and image&amp;nbsp;processing&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;For some reason &lt;a href="https://en.wikipedia.org/wiki/Binocular_vision"&gt;binocular vision&lt;/a&gt; isn’t a common tool in robots and vision. Different distance-sensing tools like &lt;a href="https://en.wikipedia.org/wiki/Lidar"&gt;Lidar&lt;/a&gt; seem more common. Lidar is more expensive, but it creates a concrete depth field. But is a depth field even enough? It seems interesting to actually include visual information and depth information&amp;nbsp;together.&lt;/p&gt;
&lt;p&gt;I’m specifically interested in how binocular vision works with &lt;a href="https://en.wikipedia.org/wiki/Convolutional_neural_network"&gt;Convolutional Neural Networks (CNNs)&lt;/a&gt;. CNNs are the standard tool in image processing, where you have a neural network where you not only train some kind of detection, but you also have a bunch of “convolutional” layers that are essentially image processors. These typically learn to find edges or other features in the image, by using a “windows” (fixed size squares, 3x3, 5x5 etc, taken from the image) and training matrices that process those windows. (I guess for this case wide windows would make sense, there&amp;#8217;s no need for the windows to be&amp;nbsp;square.)&lt;/p&gt;
&lt;p&gt;In a typical setup you pass in a red, blue, and green layer, and you let the training process discover things like the meaning of color. And if color isn’t important then it can learn to just add them all together. Instead of these three layers, you could just pass in six: red-left, blue-left, green-left, red-right, blue-right, green-right. And then the &lt;span class="caps"&gt;CNN&lt;/span&gt; can learn how to use the differences between those layers to understand its&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;The first thing I’d have to do is create a binocular camera. There’s some expensive options intended for robots. Unfortunately I can’t fit two &lt;a href="https://www.raspberrypi.org/products/camera-module-v2/"&gt;Raspberry Pi cameras&lt;/a&gt; on a single unit. Maybe I just need two cheap &lt;span class="caps"&gt;USB&lt;/span&gt; cameras. Or maybe there’s a clever way using mirrors to turn a single camera into a binocular&amp;nbsp;camera?&lt;/p&gt;
&lt;p&gt;Next I have to figure out a training process. What am I even training for? One possibility might be to use an ultrasonic distance sensor to get a real distance, and then just train a model to see if it can predict that number from the image. The ultrasonic sensors aren’t very accurate and only see a small cone, so I’m not sure if it’s great training data. But if I train it to make a depth field, and only train to the part of the image that I have a measurement for, will it magically give accurate numbers for the other positions? It would be better if I had a full task in mind to train&amp;nbsp;against.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; It’s kind of interesting, it’s nice to think about real physical things instead of just information on the&amp;nbsp;web&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Figuring out how to get images and ground truth data for training is hard, I don’t have many&amp;nbsp;ideas&lt;/p&gt;
&lt;h3&gt;&lt;span id="nn-from-scratch"&gt;Neural networks from&amp;nbsp;scratch&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I took a course that covered neural networks, and it was &lt;span class="caps"&gt;OK&lt;/span&gt; – it got me to go through a bunch of exercises and covered the material in a somewhat structured way. There’s a huge amount more I could try to do as a practitioner: learn PyTorch, try different architectures, do more data shaping and feature selection, etc. But there’s also the basic theory, some of which I felt pretty comfortable with, but not all. Backpropagation especially: I get that a differentiable algorithm is useful, and in theory how that would lead to backpropagation, but there are &lt;em&gt;so many&lt;/em&gt; details that are vague in my&amp;nbsp;mind.&lt;/p&gt;
&lt;p&gt;Building a neural network system from scratch seems like a great way to solidify my theoretical understanding, even if I’ll never again work at that level and just use frameworks in any practical&amp;nbsp;setting.&lt;/p&gt;
&lt;p&gt;I’ve seen a couple resources on this: &lt;a href="https://nnfs.io/"&gt;Neural Networks From Scratch&lt;/a&gt;, a more casual &lt;a href="https://victorzhou.com/blog/intro-to-neural-networks/"&gt;Machine Learning for Beginners: An Introduction to Neural Networks&lt;/a&gt; (with another &lt;a href="https://victorzhou.com/blog/intro-to-rnns/"&gt;for RNNs&lt;/a&gt; and &lt;a href="https://victorzhou.com/blog/intro-to-cnns-part-1/"&gt;CNNs&lt;/a&gt;), a similar &lt;a href="https://towardsdatascience.com/how-to-build-your-own-neural-network-from-scratch-in-python-68998a08e4f6"&gt;How to build your own Neural Network from scratch in Python&lt;/a&gt;, and &lt;a href="https://enlight.nyc/projects/neural-network"&gt;another&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I can just follow along with someone else’s instruction. I’m pretty sure what I learn will be useful to&amp;nbsp;me&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Not directly&amp;nbsp;creative&lt;/p&gt;
&lt;h2&gt;&lt;span id="not-computing"&gt;Not (just)&amp;nbsp;computing&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="physical-workspace"&gt;Physical workspace&amp;nbsp;optimizations&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;In most ways my computing behavior has become less optimized and more aligned with broad consumer trends over time. This is a result of (a) not being willing to spend time customizing things, and (b) wanting to experience normal things so I can relate to normal computer&amp;nbsp;users.&lt;/p&gt;
&lt;p&gt;But there’s a part of me that thinks I’ve overdone it. Maybe micro-optimization are silly, but they can also be a tool to focus. The awkward in-between experiences in a computer are genuinely dangerous for focus. I feel my mental load is finite, and using it up on stupid window fiddling and such spends down my mental&amp;nbsp;capacity.&lt;/p&gt;
&lt;p&gt;I’m interested in what it might look like to customize my physical environment. Things like the &lt;a href="https://www.bloomberg.com/professional/blog/look-back-bloomberg-keyboard/"&gt;Bloomberg Terminal keyboard&lt;/a&gt; are interesting, or &lt;a href="https://www.reddit.com/r/MechanicalKeyboards/comments/be23vc/vintage_newspaper_editing_terminal_keyboard/"&gt;an editing keyboard&lt;/a&gt; or &lt;a href="https://relivesight.com/projects/433/"&gt;what have you&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Minimal keyboards are kind of the style right now (I’m using one myself). But maybe that’s a silly optimization. Lots of stuff on a 101 key keyboard isn’t for me: function keys I don’t use, a number pad I don’t use. Does it actually follow that lots of keys aren’t useful? Or is it that I haven’t put in the time to make sure the keys are useful for &lt;em&gt;me&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;It’s pretty easy to just add more &lt;span class="caps"&gt;USB&lt;/span&gt; devices. I can have multiple keyboards attached, multiple mice and trackpads. I don’t have to assemble a single custom device (which I’ve decided is infeasible), I can just throw things together, apply some labels. Maybe it’ll just be &lt;a href="https://www.youtube.com/watch?v=3CqOtEz6PfA"&gt;silly&lt;/a&gt; but I don’t&amp;nbsp;know.&lt;/p&gt;
&lt;p&gt;One goal would be to use keys for “absolute” controls. As an example instance ⌘-[ moves one tab to the left (very relative), while ⌘-1 moves to the first tab of the active window (somewhat relative). Instead I want a “focus Gmail” key, and my current focus shouldn’t&amp;nbsp;matter.&lt;/p&gt;
&lt;p&gt;Obviously there&amp;#8217;s a lot of general physical arrangement to be figured out as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;These &lt;a href="https://www.1upkeyboards.com/shop/keyboard-kits/macro-pads/sweet-16-macro-pad-black/"&gt;16 key kits&lt;/a&gt; seem like an interesting macro option. Interesting things &lt;a href="https://www.gboards.ca/"&gt;here too&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Progress&lt;/strong&gt;: I&amp;#8217;m trying switching back to my old &lt;a href="https://kinesis-ergo.com/shop/advantage2/"&gt;Kinesis Advantage keyboard&lt;/a&gt;. The actual keyboard is a bit old and smushy and not 100% reliable, so I might have to re-up if I decide I like it. I&amp;#8217;m not sure I do? The movements come back quickly though. Interestingly you can fit the Apple Magic Trackpad in the space between the two hand-wells. I&amp;#8217;m not sure if that&amp;#8217;s actually an&amp;nbsp;improvement.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m trying to make it easier to move between sitting, standing, and using a treadmill. I&amp;#8217;ve had the treadmill a long time, but haven&amp;#8217;t used it that much because it means moving from one workspace to another. This is &lt;span class="caps"&gt;OK&lt;/span&gt;, but puts my productivity in conflict with healthy body positions. That&amp;#8217;s not a good way to set oneself up to make healthy choices. So instead I&amp;#8217;ve made a platform that can be slid over the treadmill, with a chair on top, and I move that back and forth while everything else stays in&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I&amp;#8217;ll become an expert hacker! Maybe I can type with a different keyboard for each hand. Cryptic neon-green characters will flow from my&amp;nbsp;screen&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; It makes my environment less portable. I might not like the&amp;nbsp;result&lt;/p&gt;
&lt;h3&gt;&lt;span id="executive-function"&gt;Something involving executive&amp;nbsp;function&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;This probably starts with study, and leads… somewhere I can’t determine right now. &lt;a href="https://twitter.com/ianbicking/status/1299131871356489731"&gt;I&amp;#8217;m just starting to think about these&amp;nbsp;things.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m very interested in the mental models that underly our&amp;nbsp;action.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I’m pretty sure I could use what I learn in almost anything I do. I’m sure there’s important theory for me to&amp;nbsp;learn&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; This doesn’t satisfy my desire to make. That desire is&amp;nbsp;considerable&lt;/p&gt;
&lt;h3&gt;&lt;span id="sms-watch"&gt;&lt;span class="caps"&gt;SMS&lt;/span&gt;-based dispatch system for the local neighborhood&amp;nbsp;watch&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;There’s a &lt;a href="https://www.newyorker.com/magazine/2020/09/07/we-can-solve-our-own-problems-a-vision-of-minneapolis-without-police"&gt;watch/patrol/safety group&lt;/a&gt; in my neighborhood. It’s a little unclear how residents can get in contact. I played around with some text automation using &lt;a href="https://www.integromat.com/"&gt;Integromat&lt;/a&gt; and &lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt; and while some parts were quirky, it wasn’t too hard to do, nor very expensive to maintain. Maybe I could set something up for the group using&amp;nbsp;this?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Helps connect me more with the neighborhood. Right now safety is an important political issue, and this particular effort seems concrete and positive. The hard parts are all in working with and designing with these other people that I don’t know&amp;nbsp;well&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Nothing particularly technically involved. Doesn’t let me do the kid of somewhat reclusive and focused work I’m looking&amp;nbsp;for&lt;/p&gt;
&lt;h3&gt;&lt;span id="southside-greenway"&gt;Freshen up Southside Greenway&amp;nbsp;proposal&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Some people made a &lt;a href="https://www.ourstreetsmpls.org/southsidegreenway"&gt;pretty involved proposal to turn my street into a greenway&lt;/a&gt;. That would be totally incredible, even though it feels outside of the bounds of what we can imagine in this city right now given everything else that is going&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;The proposal has a lot of good work, embedded in a pretty hard to find location. I could make a site and take that content and maybe help keep it alive in the&amp;nbsp;process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; The material is all there, so this feels like there’s a lot of leverage to the&amp;nbsp;work&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; The material is all there&amp;nbsp;already&lt;/p&gt;
&lt;h3&gt;&lt;span id="correspondence"&gt;Long-form slow-paced email correspondence&amp;nbsp;platform&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Reading about famous correspondences of the past, I am somewhat jealous. We have social media but it’s a little light on interpersonal communication. Obviously we can just communicate, just do it, but I do think there’s something useful about an understood and agreed-upon structure with some supports and&amp;nbsp;reminders.&lt;/p&gt;
&lt;p&gt;I’m thinking about correspondence that is rate-limited to once per week. So if I receive your letter on September 1st, I can send a reply any time but it can’t possibly arrive before September 8th. This is the opposite of texting. Because of these shared expectations the conversation never has to “finish” but it also isn’t left&amp;nbsp;dangling.&lt;/p&gt;
&lt;p&gt;This is probably best prototyped with a couple people and no actual&amp;nbsp;automation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Prototyping would also presumably lead to some interesting correspondences. The whole thing is very&amp;nbsp;simple&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Well, I do have to find people to prototype it with. What if it turns out to be boring? Or one of us ghosts the other one? Is this a guilt&amp;nbsp;factory?&lt;/p&gt;
&lt;h3&gt;&lt;span id="game-word"&gt;Game&amp;nbsp;world&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Ultima_VI:_The_False_Prophet"&gt;Ultima &lt;span class="caps"&gt;VI&lt;/span&gt;&lt;/a&gt; really caught my imagination as a child. Mostly because it felt both complex and comprehensible: you could see the implementation, but it still felt&amp;nbsp;alive.&lt;/p&gt;
&lt;p&gt;Nostalgia and escapism makes me want to recreate that kind of simple emergence. A little world that can exist without me and yet is by me. Tiny beings with their own tiny internal&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;I’m sure there’s game frameworks that would be a great basis for this, but there’s &lt;em&gt;so many options&lt;/em&gt; that I’m a little lost. What abstract level lets me do the parts I am excited about and skip the parts I&amp;#8217;m not interested&amp;nbsp;in?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; This has been in my head much longer than any of these other ideas! It feels&amp;nbsp;fun&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Escapist and it’s unlikely to lead&amp;nbsp;anywhere&lt;/p&gt;
&lt;p&gt;Possible resources: &lt;a href="https://github.com/ericoporto/fgmk"&gt;fgmk - game and editor&lt;/a&gt;, &lt;a href="https://github.com/ericoporto/fgmkJsEngine"&gt;fgmk engine&lt;/a&gt;, &lt;a href="https://make8bitart.com/"&gt;pixel editor&lt;/a&gt;, &lt;a href="https://www.reldens.com/"&gt;Reldens top-down &lt;span class="caps"&gt;MMORPG&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://thenyanta.github.io/JS-RPG-Engine/"&gt;&lt;span class="caps"&gt;JS&lt;/span&gt; &lt;span class="caps"&gt;RPG&lt;/span&gt; engine&lt;/a&gt;, &lt;a href="https://github.com/topics/rpg-engine"&gt;GitHub category&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Games/Techniques/Tilemaps/Square_tilemaps_implementation%3A_Scrolling_maps"&gt;tutorial on &lt;span class="caps"&gt;MDN&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://www.creativebloq.com/html5/build-tile-based-html5-game-31410992"&gt;another tutorial&lt;/a&gt;, &lt;a href="https://victorribeiro.com/tileEditor/?example=01"&gt;tile editor&lt;/a&gt;, &lt;a href="https://opengameart.org/"&gt;artwork&lt;/a&gt;, especially &lt;a href="https://lpc.opengameart.org/content/liberated-pixel-cup-faq"&gt;&lt;span class="caps"&gt;LPC&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id="remembrance-agent"&gt;Remembrance&amp;nbsp;Agent&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I came upon this concept in an &lt;a href="https://www.npr.org/2015/02/13/385793862/computer-or-human-thad"&gt;Invisibilia podcast episode&lt;/a&gt;, where they talked to Thad Starner about his 90s personal wearable note-taking tool, the &lt;a href="https://alumni.media.mit.edu/~rhodes/Papers/remembrance.html"&gt;Remembrance Agent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea of note-taking and retrieval is simple enough, but as presented the tone feels different from other note taking, more stream of consciousness, more about connecting the present self to the past self. Maybe it’s just the word “remembrance” that sticks with&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;I honestly don’t know what I would do in this area. Maybe nothing, but I like &lt;em&gt;thinking&lt;/em&gt; about doing&amp;nbsp;something.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Seems&amp;nbsp;cool&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; What am I doing&amp;nbsp;again?&lt;/p&gt;
&lt;h3&gt;&lt;span id="arcology"&gt;Arcology requirements and&amp;nbsp;constraints&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;You might know &lt;a href="https://en.wikipedia.org/wiki/Arcology"&gt;arcologies&lt;/a&gt; from SimCity. I encountered &lt;a href="https://www.organism.earth/library/document/arcology"&gt;Arcology: The City In The Image of Man&lt;/a&gt; in my college library’s oversized book section. Or one of Buckminster Fuller’s proposals like the &lt;a href="https://www.historyandheadlines.com/east-st-louis-and-the-old-man-river-project/"&gt;Old Man River&amp;#8217;s City project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s an old fantasy and it seems entirely unreasonable – even undesirable – now. But I still wonder… there’s all these visual concepts, but what would it really require in practice? What amount of space or energy is required for the mechanics? What kind of movement and transportation is required? How much intake of material would a community need? What kinds of&amp;nbsp;services?&lt;/p&gt;
&lt;p&gt;I guess the result would be a&amp;nbsp;spreadsheet?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Not computers, something different. Fairly accessible research&amp;nbsp;process&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Not sure what I’d do with the&amp;nbsp;result&lt;/p&gt;
&lt;h3&gt;&lt;span id="fractals"&gt;Play with&amp;nbsp;fractals&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;What’s the state of the art in fractals these days? And &lt;a href="https://en.wikipedia.org/wiki/Chaos_theory"&gt;chaos theory&lt;/a&gt;? These were fun exciting new things in the&amp;nbsp;90s.&lt;/p&gt;
&lt;p&gt;While it’s kind of an aside, I came upon &lt;a href="https://blog.scottlogic.com/2019/05/17/webassembly-compiler.html"&gt;this tutorial for compiling to &lt;span class="caps"&gt;WASM&lt;/span&gt;&lt;/a&gt; that looked interesting. It steps through creating a simple language (tokenizer, parser) and compiling it directly to &lt;span class="caps"&gt;WASM&lt;/span&gt;. The example language it uses it suitable for rendering the Mandelbrot set (and not a lot else), but extending it only for other fractals would probably be feasible and&amp;nbsp;interesting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; It would be nice to get clearer on &lt;span class="caps"&gt;WASM&lt;/span&gt;, and fun to do a project around&amp;nbsp;it&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I could probably just look up some fractal explorers, play with them, and call it a&amp;nbsp;day&lt;/p&gt;
&lt;h3&gt;&lt;span id="fiction"&gt;Write&amp;nbsp;fiction&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I’ve twice tried and failed &lt;a href="https://nanowrimo.org/"&gt;Nanowrimo&lt;/a&gt;. Maybe I should try it again? Fantastical alternate reality or absurdist political&amp;nbsp;thriller?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I do think about this often. Unlike many things here it’s not something I’d satisfy in my professional life. It’s escapist, disconnected from the current&amp;nbsp;moment&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; It’s really big task and has no outward result unless I finished, which is unlikely. Maybe I’m between jobs, but even doing silly projects does move me forward in my career, even if it only clarifies my own feelings towards my work. It’s escapist, disconnected from the current&amp;nbsp;moment&lt;/p&gt;
&lt;h3&gt;&lt;span id="beliefs"&gt;Document my&amp;nbsp;beliefs&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I think I believe things, but what are those things anyway? If I write them down maybe I’ll find&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I think about these issues often, and am constantly trying (and am overwhelmed) to determine what my place is in the world. I’m going to put that effort in regardless, but doing so in a conscious and structured way might at least move me&amp;nbsp;forward&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Maybe I’m &lt;a href="https://www.theredhandfiles.com/the-lyrics-just-arent-coming/"&gt;not ready&lt;/a&gt; to decide what I believe, maybe it simply has not yet arrived? Is this indulgent? It would probably not be fun, it would be hard&amp;nbsp;work&lt;/p&gt;
&lt;h2&gt;&lt;span id="conclusion"&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Now that I&amp;#8217;ve written all these down I&amp;#8217;m worried I won&amp;#8217;t get through any of them (except hopefully a job). Am I looking to expand my own thinking, my own skills, make something that is fun, or something that has future&amp;nbsp;potential?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category></entry><entry><title>A History Of Projects</title><link href="https://ianbicking.org/blog/2020/09/a-history-of-projects.html" rel="alternate"></link><published>2020-09-08T00:00:00-05:00</published><updated>2020-09-08T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2020-09-08:/blog/2020/09/a-history-of-projects.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve &lt;a href="https://www.ianbicking.org/projects.html"&gt;had a lot of projects&lt;/a&gt;, and at this &lt;a href="https://twitter.com/ianbicking/status/1293275255667073024"&gt;moment of reflection&lt;/a&gt; I thought I&amp;#8217;d look back through those that felt most meaningful, and which despite my excitement I&amp;#8217;ve also let go of. If there&amp;#8217;s a thread that connects them maybe I&amp;#8217;ll find it, or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve &lt;a href="https://www.ianbicking.org/projects.html"&gt;had a lot of projects&lt;/a&gt;, and at this &lt;a href="https://twitter.com/ianbicking/status/1293275255667073024"&gt;moment of reflection&lt;/a&gt; I thought I&amp;#8217;d look back through those that felt most meaningful, and which despite my excitement I&amp;#8217;ve also let go of. If there&amp;#8217;s a thread that connects them maybe I&amp;#8217;ll find it, or maybe this is just a scattering of&amp;nbsp;work&amp;#8230;&lt;/p&gt;
&lt;h2&gt;&lt;span id="redline-review"&gt;1. Redline&amp;nbsp;Review&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This was my first real application, written in the early 2000s, coming out of a consulting engagement I had with a &lt;a href="https://en.wikipedia.org/wiki/Fitzroy_Dearborn_Publishers"&gt;now-defunct encyclopedia publisher&lt;/a&gt;. They needed entries reviewed by loosely-affiliated domain experts; I believe this was first used for the &lt;em&gt;Encyclopedia of Monasticism&lt;/em&gt;. &lt;a href="https://www.linkedin.com/in/audreyberns/"&gt;Audrey Berns&lt;/a&gt; conceived of the idea, brought me in, and in retrospect acted as product manager, though that wasn’t a thing at the&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;The web application didn’t use JavaScript and just put a little link to a commenting form after every sentence in the text. Most of the work was about importing, login management, and workflow. The client was pretty happy with it, and I tepidly tried to turn this into a commercial application, but I didn’t really understand what I was&amp;nbsp;doing.&lt;/p&gt;
&lt;h2&gt;&lt;span id="landscaper"&gt;2.&amp;nbsp;Landscaper&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This was my favorite project from my time with the (still existing!) web consulting company &lt;a href="https://www.imagescape.com/"&gt;Imaginary Landscape&lt;/a&gt;. Landscaper was a &lt;span class="caps"&gt;CMS&lt;/span&gt; that published to static files (&lt;a href="https://en.wikipedia.org/wiki/Server_Side_Includes"&gt;Server Side Includes&lt;/a&gt;, but I would have liked to add &lt;span class="caps"&gt;PHP&lt;/span&gt;). This is an idea that wasn’t that uncommon at the time (remember &lt;a href="https://www.movabletype.org/"&gt;Movable Type&lt;/a&gt;?) but fell out of favor, and now is back in&amp;nbsp;favor.&lt;/p&gt;
&lt;p&gt;I co-developed this along with &lt;a href="https://pypi.org/project/Paste/"&gt;Paste&lt;/a&gt; and &lt;a href="http://www.formencode.org/en/latest/modules/htmlfill.html"&gt;formencode.htmlfill&lt;/a&gt;. One of the features I was particularly proud of was the custom page types: a new page type was defined by writing (in the &lt;span class="caps"&gt;CMS&lt;/span&gt;) a template and an &lt;span class="caps"&gt;HTML&lt;/span&gt; form, and FormEncode could parse all the information from that. It wasn’t sophisticated, but it was so &lt;em&gt;simple&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Much of the design and requirements was done by &lt;a href="https://www.linkedin.com/in/lisa-king-5013933/"&gt;Lisa King&lt;/a&gt;. I distinctly remember one of our many design reviews where we had reached a point of disagreement: when we got to the end she effectively threw up her hands, &lt;em&gt;fine, you can have your way like always&lt;/em&gt;, which surprised me because I thought we had ended up someplace quite different than where we started. I thought we were participating in a generative process. But what I thought was a series of different proposals she had seen as me reiterating and reexplaining the same concept to exhaustion, and why wouldn&amp;#8217;t she? The compromises I made were all part of an internal dialog. A lesson I took from that was to be overtly explicit when I was incorporating or adopting someone else’s idea or adapting an idea to input. I &lt;em&gt;am&lt;/em&gt; stubborn, to a fault, but not nearly as stubborn as it&amp;nbsp;seemed!&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;CMS&lt;/span&gt; was proprietary, so I left it when I left the job. I don’t believe it is used any longer. Building a minimalist &lt;span class="caps"&gt;CMS&lt;/span&gt; is still on that list of things-I-probably-won’t-get-to (but still think&amp;nbsp;about).&lt;/p&gt;
&lt;h2&gt;&lt;span id="sqlobject"&gt;3.&amp;nbsp;SQLObject&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I’ve lost track of why I even created &lt;a href="http://sqlobject.org/"&gt;SQLObject&lt;/a&gt;. I believe it was when I was involved with &lt;a href="https://webwareforpython.github.io/w4py/"&gt;Webware&lt;/a&gt;, a Python web framework from from an earlier&amp;nbsp;generation.&lt;/p&gt;
&lt;p&gt;I like to think that it was early and perhaps influential in the use of metaprogramming in Python. It also represents some naivety on my part about database programming, embodying a style I was used to in MySQL/&lt;span class="caps"&gt;PHP&lt;/span&gt; projects, but I hadn’t encountered larger and more complicated&amp;nbsp;databases.&lt;/p&gt;
&lt;p&gt;As a project SQLObject was hard for me: I felt weighed down by early design choices, and chronically guilty about support and maintenance. &lt;a href="https://phdru.name/"&gt;Oleg Broytman&lt;/a&gt; took over maintenance and has done an excellent job keeping it going over the&amp;nbsp;years.&lt;/p&gt;
&lt;h2&gt;&lt;span id="formencode"&gt;4.&amp;nbsp;FormEncode&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;In some ways &lt;a href="http://www.formencode.org"&gt;FormEncode&lt;/a&gt; represents an answer to a problem whose time has passed: how should we manage complicated &lt;span class="caps"&gt;HTML&lt;/span&gt; forms with validation and editing? Now this is mostly handled on the client side, and a “validation” framework only has to reject bad data, it doesn’t have to help the client repair that data (JavaScript can handle that&amp;nbsp;part).&lt;/p&gt;
&lt;p&gt;FormEncode also looked at the problem as a general encoding/decoding problem, and a schema definition&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;Together with SQLObject these probably represent taking clever declarations too far. I now accept and appreciate imperative declaration for more cases. I don’t think I did a good job passing on maintainership, but &lt;a href="https://cito.github.io/"&gt;Christoph Zwerschke&lt;/a&gt; and &lt;a href="http://whatschrisdoing.com/"&gt;Christopher Lambacher&lt;/a&gt; kept it going despite&amp;nbsp;that.&lt;/p&gt;
&lt;h2&gt;&lt;span id="paste-wsgi"&gt;5. Paste and &lt;span class="caps"&gt;WSGI&lt;/span&gt;&amp;nbsp;everything&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I was frequently forced to work with &lt;a href="https://en.wikipedia.org/wiki/Zope#Zope_2"&gt;Zope&lt;/a&gt; professionally. There are some interesting ideas in Zope, but mostly it was a very difficult environment to understand, control, and manipulate. Zope’s monolithic application server represents an approach that was common at the time, but would be unfamiliar to most web developers&amp;nbsp;today.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.python.org/community/sigs/current/web-sig/"&gt;Web &lt;span class="caps"&gt;SIG&lt;/span&gt;&lt;/a&gt; offered a kind of reprieve, and I became very enthusiastic about the &lt;a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface"&gt;&lt;span class="caps"&gt;WSGI&lt;/span&gt;&lt;/a&gt; concept that &lt;a href="https://dirtsimple.org/"&gt;&lt;span class="caps"&gt;PJE&lt;/span&gt;&lt;/a&gt; proposed (I think for him it may have come out of his work with &lt;a href="https://en.wikipedia.org/wiki/Chandler_(software)"&gt;Chandler&lt;/a&gt;?)&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;WSGI&lt;/span&gt; turned web programming into something more functional, keeping application servers and web handlers separate, and turning middleware into just function composition. Application server and handler are both critical components of an application, but have every ability to be separate: application servers dispatch concurrent work and manage reliability, and they really don’t need to know much about how the work gets done. Handlers contain all the domain logic. Middleware I’m not as sure&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;Along the way I built a toolkit called Paste meant to be a neutral reusable library for doing web things. I enjoyed the power of it all, building &lt;a href="https://www.ianbicking.org/my-first-ajax-app.html"&gt;interactive debuggers&lt;/a&gt;, &lt;a href="https://www.ianbicking.org/blog/2010/04/webtest-http-testing.html"&gt;test frameworks, proxying&lt;/a&gt;, &lt;a href="https://docs.pylonsproject.org/projects/pastedeploy/en/latest/"&gt;configuration and composition&lt;/a&gt; systems, a &lt;a href="https://pastescript.readthedocs.io/en/latest/"&gt;command-line script framework&lt;/a&gt;, &lt;a href="https://web.archive.org/web/20160719224005/http://pythonpaste.org/modules/exceptions.html"&gt;logging and monitoring&lt;/a&gt;&amp;nbsp;systems.&lt;/p&gt;
&lt;p&gt;Those tools were used some, but the frameworks that made use of them have mostly disappeared in favor of web frameworks that are managed in a more monolithic fashion. (The frameworks might not be technically more monolithic, but I think it’s accurate to say that their &lt;em&gt;communities&lt;/em&gt;&amp;nbsp;are.)&lt;/p&gt;
&lt;p&gt;What remains of Paste is now in other projects, various people extracted the bits that were useful and reimplemented them in new packages. &lt;a href="https://pylonsproject.org/"&gt;Pylons&lt;/a&gt; got several, &lt;a href="https://repoze.readthedocs.io/en/latest/"&gt;Repoze&lt;/a&gt; some&amp;nbsp;others.&lt;/p&gt;
&lt;p&gt;To the degree this work had impact, it was mostly through other people: &lt;a href="https://be.groovie.org/"&gt;Ben Bangert&lt;/a&gt; and &lt;a href="https://twitter.com/pjenvey"&gt;Philip Jenvey&lt;/a&gt; did a lot of early work, &lt;a href="https://twitter.com/chrismcdonough"&gt;Chris McDonough&lt;/a&gt; did the extraction work to keep the pieces&amp;nbsp;alive.&lt;/p&gt;
&lt;h2&gt;&lt;span id="webob"&gt;6.&amp;nbsp;WebOb&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;WebOb was an effort to clean up things from Paste by creating one big &lt;span class="caps"&gt;WSGI&lt;/span&gt; request and response object, trying to be as thorough and high quality as possible. Paste could have looked like WebOb at any time, but it took me a while to acknowledge that being bland and neutral (to avoid competing with web frameworks) wasn’t very&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;WebOb used &lt;span class="caps"&gt;WSGI&lt;/span&gt; as the basic model for requests and responses, but I found it was also a good test framework and client library. If it was timed earlier and my interest had been different I may have pushed for it to be a more “standard” set of objects for&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;WebOb still exists and is maintained inside Pylons. Sergey Schetinin did a very solid job maintaining it until it passed to &lt;a href="https://bertjwregeer.com/"&gt;Bert &lt;span class="caps"&gt;JW&lt;/span&gt; Regeer&lt;/a&gt; who continues to maintain&amp;nbsp;it.&lt;/p&gt;
&lt;h2&gt;&lt;span id="deliverance"&gt;7.&amp;nbsp;Deliverance&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;As mentioned, Zope haunted me professionally. I had to deal with Zope, but I hated it, and wanted to find ways to support more heterogeneous&amp;nbsp;environments.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/deliverance/Deliverance"&gt;Deliverance&lt;/a&gt; was a project started by some Zope people (I believe &lt;a href="https://twitter.com/paulweveritt"&gt;Paul Everitt&lt;/a&gt; specifically roped me into it). The idea was to separate styling and other aspects of “delivery” from the backend. He did it with a language that compiled into &lt;span class="caps"&gt;XSLT&lt;/span&gt;, with selectors that used XPath and I think it required &lt;span class="caps"&gt;XHTML&lt;/span&gt;&amp;nbsp;content.&lt;/p&gt;
&lt;p&gt;The goal was to be able to support sites that used Zope, other Python servers, WordPress, and whatever else may come along. But all the applications should be consistent and allow styling that would be applied across all of&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;I rewrote it as a &lt;span class="caps"&gt;WSGI&lt;/span&gt; server and used &lt;a href="https://lxml.de/"&gt;lxml&lt;/a&gt; for the rewriting. I wrote &lt;a href="https://lxml.de/cssselect.html"&gt;lxml.cssselect&lt;/a&gt; to support &lt;span class="caps"&gt;CSS&lt;/span&gt; instead of XPath, and extended &lt;a href="https://lxml.de/lxmlhtml.html"&gt;lxml.html&lt;/a&gt; to enable other interesting&amp;nbsp;tricks.&lt;/p&gt;
&lt;p&gt;lxml is one of those libraries that I wish had become a standard for Python. The installation was annoying, but the functionality is great. Along with &lt;code&gt;formencode.htmlfill&lt;/code&gt; this is where I started to really enjoy using parsed &lt;span class="caps"&gt;HTML&lt;/span&gt; as a first-class data&amp;nbsp;representation.&lt;/p&gt;
&lt;p&gt;Deliverance &lt;a href="https://github.com/deliverance/Deliverance"&gt;source exists&lt;/a&gt;, but hasn’t been updated for many&amp;nbsp;years.&lt;/p&gt;
&lt;p&gt;This happened around when &lt;a href="https://martinfowler.com/articles/microservices.html"&gt;microservices&lt;/a&gt; were becoming a thing. In a sense Deliverance represents a very different idea of microservices, where the services are actually presented directly to users, and the goal is reusable interactive web applications and components. We see some of this today where the assembly is done in the browser itself (via JavaScript), but it remains an ad hoc and informal approach. &lt;a href="https://sandstorm.io/"&gt;Sandstorm&lt;/a&gt; has some similar&amp;nbsp;motivations.&lt;/p&gt;
&lt;h2&gt;&lt;span id="silverlining"&gt;8. Silver&amp;nbsp;Lining&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;At this point I was struggling with sharing application setup and deployment – it was hard for me to maintain for my own stack, not to mention share with&amp;nbsp;teammates.&lt;/p&gt;
&lt;p&gt;I played around with &lt;a href="https://cloud.google.com/appengine"&gt;App Engine&lt;/a&gt; a bit, but it had so many constraints that I couldn’t advocate it or use it for my own work. Automatic server provisioning was a new thing, and &lt;a href="https://libcloud.apache.org/"&gt;libcloud&lt;/a&gt; had come on the&amp;nbsp;scene.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ianb/silverlining"&gt;Silver Lining&lt;/a&gt; was meant to be a way to take fairly regular applications and develop them locally or deploy them to a remote server, with a consistent approach. The model was similar to &lt;a href="https://12factor.net/"&gt;Twelve-Factor&lt;/a&gt;, emphasizing environment variables. It supported multiple applications, using lots of generated Apache configuration to do the routing in production. It strongly encouraged vendors libraries and avoided remote&amp;nbsp;builds.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; liked it. It made development feel good to me, got all the bad parts out of the way. I never seriously used Heroku, I imagine it feels the same? But no one else found it interesting, and it didn’t go&amp;nbsp;anywhere.&lt;/p&gt;
&lt;p&gt;I played around with a web application specification I called &lt;a href="https://github.com/ianb/pywebapp/blob/master/docs/spec.txt"&gt;pywebapp&lt;/a&gt;, but I already had &lt;a href="https://www.ianbicking.org/blog/2014/02/saying-goodbye-to-python.html"&gt;one foot out the door&lt;/a&gt; of Python web&amp;nbsp;development.&lt;/p&gt;
&lt;h2&gt;&lt;span id="pip-virtualenv"&gt;9. pip and&amp;nbsp;virtualenv&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Building and composing applications was a theme through these, and pip and virtualenv fit into the same&amp;nbsp;area.&lt;/p&gt;
&lt;p&gt;With both this and &lt;span class="caps"&gt;WSGI&lt;/span&gt; work, I was mostly making the work of Philip J. Eby (&lt;span class="caps"&gt;PJE&lt;/span&gt;) more accessible. He mapped out and largely implemented both projects, and I applied my own sense of aesthetics to them. &lt;a href="https://setuptools.readthedocs.io/en/latest/easy_install.html"&gt;easy_install&lt;/a&gt; implemented much of what pip actually did, but people &lt;em&gt;loved&lt;/em&gt; to complain about &lt;code&gt;easy_install&lt;/code&gt;. The situation was to the point where people were regularly rejecting &lt;em&gt;any&lt;/em&gt; transitive dependencies because they rejected the idea of&amp;nbsp;installers.&lt;/p&gt;
&lt;p&gt;pip changed easy_installs defaults, added a little metadata, and I’d like to think it added a bunch of attractive command line and logging&amp;nbsp;aesthetics.&lt;/p&gt;
&lt;p&gt;virtualenv took a tiny script &lt;span class="caps"&gt;PJE&lt;/span&gt; had written and again made it more pleasant to&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;These are by far my most popular works. I’ve stopped working on them long ago, but luckily other people have done great work both improving and advocating for them. I cannot even take credit for transitioning them. &lt;a href="https://twitter.com/dstufft"&gt;Donald Stufft&lt;/a&gt; and &lt;a href="https://twitter.com/carljm"&gt;Carl Meyer&lt;/a&gt; in particular got these projects through the lean winter months before they had a new spring. I am now &lt;a href="https://github.com/pypa/pip/graphs/contributors"&gt;number 14&lt;/a&gt; in the list of pip contributors, which I find quite&amp;nbsp;gratifying.&lt;/p&gt;
&lt;p&gt;The irony of these projects is that I was always trying to get &lt;em&gt;past&lt;/em&gt; the operational issues of installation and deployment. I don’t like building and installing and composition, but I wanted to invest some time so that my work was spent more on the things I really wanted to do, things that felt valuable to struggle with. And this is probably why they were successful: everyone else felt the same way, so at the time the space was both open and needed. But I will also take some credit for putting significant effort into promotion, which helped center the community around the tools, both in terms of contribution and documentation. It&amp;#8217;s unfortunate that the next set of functionality – environment management, dependency bundling, executable bundling, etc – hasn&amp;#8217;t been able to gel into an agreed-upon set of tools. Someone would be doing the community a favor to try to build consensus, even though manufactured consensus will require some uncomfortable&amp;nbsp;forcefulness.&lt;/p&gt;
&lt;h2&gt;&lt;span id="doctestjs"&gt;10.&amp;nbsp;doctest.js&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This isn&amp;#8217;t a large project, just a path-not-taken; a failed attempt to exist in the JavaScript open source world as I had in&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;I really liked doctest in Python. My own personal feeling about tests is that they should support forward momentum, and good test failures are the most important part of a testing framework. A failure should tell you as much as possible about what to do next. And stubbed tests should be easy to turn into real&amp;nbsp;tests.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/doctest.html"&gt;Doctest&lt;/a&gt; is great for all of this: you just write some &lt;span class="caps"&gt;REPL&lt;/span&gt;-like code, and your failures are all in the form of potentially-passing tests (just copy in the&amp;nbsp;output!)&lt;/p&gt;
&lt;p&gt;I wanted to bring this to JavaScript, and did so in &lt;a href="https://github.com/ianb/doctestjs"&gt;doctest.js&lt;/a&gt; (with &lt;a href="http://www.ianbicking.org/blog/2012/10/why-doctestjs-is-better-than-pythons-doctest.html"&gt;improvements!&lt;/a&gt;). But no one ever cared.&amp;nbsp;Sigh.&lt;/p&gt;
&lt;p&gt;I never got the hang of the JavaScript open source world. I don’t feel like part of the &lt;span class="caps"&gt;JS&lt;/span&gt; open source community, but I also don’t even know what it would feel like or where that community is. Clearly I show my&amp;nbsp;age.&lt;/p&gt;
&lt;h2&gt;&lt;span id="togetherjs"&gt;11. TogetherJS &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Hotdish&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;These are the kinds of projects that I had always wanted to get to: projects that meaningfully change how we interact with&amp;nbsp;computers.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://togetherjs.com/"&gt;TogetherJS&lt;/a&gt; is a drop-in library to add realtime collaborative features to any website, a category of tool known as &lt;a href="https://en.wikipedia.org/wiki/Cobrowsing"&gt;cobrowsing&lt;/a&gt;. It includes &lt;span class="caps"&gt;UI&lt;/span&gt; and infrastructure, a ton of complicated session management, and it at least tries to engage with the complicated user questions that arise with collaborative browsing. And people really liked&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;I made TogetherJS with &lt;a href="https://aarondruck.com/"&gt;Aaron Druck&lt;/a&gt; and &lt;a href="https://github.com/simonwex"&gt;Simon Wex&lt;/a&gt; in &lt;a href="https://www.mozillalabs.com/"&gt;Mozilla Labs&lt;/a&gt;. We knew the &lt;a href="https://www.ianbicking.org/blog/2014/09/professional-transitions.html"&gt;end was coming for Labs&lt;/a&gt;, and Aaron and &lt;a href="https://www.linkedin.com/in/gregg-lind/"&gt;Gregg Lind&lt;/a&gt; and I tried to pivot to something more Firefox-centric with a project called &lt;a href="https://www.ianbicking.org/projects.html#hotdish"&gt;Hotdish&lt;/a&gt;. Hotdish was based on a collaborative browser window, where anything you did in that window was shared with your little group, including screensharing, ambient awareness, and cursor sharing, as we tried to think about how people could work virtually next to each other. Especially since on computers you aren’t really “next” to each other even when you are in the same room, and we wanted to change&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;But no one in Mozilla cared. Aaron was laid off when Labs closed, and I probably would have been as well if my manager hadn’t given me some cover. We’d just had a second child, my confidence was low, and I didn’t want to make big changes, so I licked my wounds and moved&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;This one really hurt. I really believed in what we were doing, in how we were doing it, even in the potential alignment with Mozilla. It was the work I &lt;em&gt;wanted&lt;/em&gt; to be doing all along. And it felt like it amounted to&amp;nbsp;nothing.&lt;/p&gt;
&lt;p&gt;I withdrew completely from TogetherJS. I felt unable to maintain a healthy relationship with it while also keeping my head above the water on other matters. Unfortunately I didn’t make it easy for other people to keep it alive, though it refused to quite die and &lt;a href="https://github.com/jsfiddle/togetherjs"&gt;still exists today&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The best summary of my thoughts inspired by TogetherJS and Hotdish is in &lt;a href="https://www.ianbicking.org/blog/2014/03/towards-next-level-of-collaboration.html"&gt;Towards a Next Level of Collaboration&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;span id="screenshots"&gt;12. PageShot and Firefox&amp;nbsp;Screenshots&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I started PageShot based on a hint of strategic direction from the &lt;span class="caps"&gt;CEO&lt;/span&gt; of Mozilla, and then went long with it. &lt;a href="http://donovanpreston.com/"&gt;Donovan Preston&lt;/a&gt; was able to work on it for quite a while, until we got further on and he was feeling ready to swap out and I was ready to swap&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;The goal was to provide full-page frozen &lt;span class="caps"&gt;DOM&lt;/span&gt; renderings as a shareable resource on the web. This is a little like &lt;a href="https://archive.is/"&gt;archive.is&lt;/a&gt;, except that it’s your personal view of a site, not the public view. There are also several projects that do this locally, like &lt;a href="https://blog.webmemex.org/"&gt;WebMemex&lt;/a&gt;. I really wanted to do it as something shareable, a frankly aggressive move to give people personal autonomy over the things they see. It also could be a hub for &lt;a href="https://www.ianbicking.org/blog/2015/05/product-journal-as-we-may-discuss.html"&gt;annotation&lt;/a&gt;, data extraction, scraping, history tracking… all sorts of&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;But of course there were serious security and copyright concerns. So, when the time came to actually ship it, we dropped all the cool &lt;span class="caps"&gt;DOM&lt;/span&gt; freezing stuff and just kept the pixel screenshotting, removing even the most basic metadata we had been capturing. It was hard to let it go. We told ourselves we’d try to bring it back, but we all&amp;nbsp;knew…&lt;/p&gt;
&lt;p&gt;Then the project shipped in Firefox, and it was a quiet but very popular service. It didn’t do anything unique, but I think we created a very nice interface (with considerable effort from &lt;a href="https://bram.me/"&gt;Bram Pitoyo’s&lt;/a&gt; and &lt;a href="https://johngruenprojects.com/"&gt;John Gruen’s&lt;/a&gt; design work). In general it was an exercise in reducing expectations and actually being satisfied with the result. Millions of people used it, people frequently mentioned it when talking about why they liked Firefox, and we saw real retention improvements among its users. It took a big hit with the &lt;a href="https://blog.mozilla.org/blog/2017/11/14/introducing-firefox-quantum/"&gt;Quantum redesign&lt;/a&gt;, which relegated it to what I have come to call the “meatball menu” (the hamburger menu’s cousin, a line of three meatballs: ⋯). But people still found and enjoyed it (small lesson: many people love the context&amp;nbsp;menu?!)&lt;/p&gt;
&lt;p&gt;Then sharing and the server were cancelled and the project largely pushed aside because… I don’t know? We never fit into any strategy, and we were all tired. I was tired too so I didn’t fight it. It was a modest feature, it didn’t feel like “the future”. And it wasn’t, it was a rehashing of very old and well-understood things. I myself had to put in quite a bit of effort to accept that there is value in doing old and well-understood things when that’s what the people&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;Screenshots remains a feature in&amp;nbsp;Firefox.&lt;/p&gt;
&lt;h2&gt;&lt;span id="browserlab"&gt;13. Browser&amp;nbsp;Lab&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This is a project that never launched, but I sure did fiddle with it for a long&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/firefox-context-graph/context-graph-its-time-to-bring-context-back-to-the-web-a7542fe45cf3"&gt;Context Graph&lt;/a&gt; was a Firefox initiative: &lt;em&gt;a forward button for the web&lt;/em&gt;. Or: another way to get to what’s next, not links promoted by Facebook’s algorithm or scrolling ever further down some infinite scroll timeline or reflexively opening the same sites over and over. What if your browser could offer something smart for &lt;em&gt;where next&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;I was never directly involved with Context Graph, but why not see what there is to learn? PageShot was still capturing full pages at this stage, and I extract a list of all the URLs I had visited for the last two years and started to &lt;a href="https://www.ianbicking.org/blog/2016/08/product-journal-oops-a-scraper.html"&gt;drive it through PageShot&lt;/a&gt;. I did it in a window in the background while I was working, and it was surprisingly weird feeling to see all these old news articles pop up, old emails (Gmail URLs are very stable!), and every other little bit of web activity I had built&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;It felt like there was gold in there, though retroactively getting pages didn’t give me nearly as much data as I would like. So I made what I first called the Personal History Archive, and then I half-renamed &lt;a href="https://github.com/ianb/personal-history-archive/"&gt;Browser Lab&lt;/a&gt;. After installing the program and extension it will extract as much browsing data as possible, serializing it into a local SQLite database and static files, including frozen copies of&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;The result is entirely impossible to share. It’s not like sharing URLs, which might be embarrassing, but are easy enough to scrub. For instance if you open Gmail then all the subject lines are serialized. So my goal was either self-experimentation, constructing a personal shareable set (e.g., do all my GitHub and open professional activity on it, but avoid most other normal activity), or get Mozilla to hire some temps to spend the day idly browsing with the understanding that we were recording&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;It never got that far, but I did enjoy messing around with it, and I still believe there’s gold in there. I made an accompanying Python library to handle the data, and made it usable in Jupyter. I think the idea of datasets paired with libraries is something we should do more of. I played around with &lt;a href="https://github.com/ianb/personal-history-archive/blob/master/python/nn_readable.ipynb"&gt;training a neural net to detect article bodies&lt;/a&gt; and realized &lt;a href="https://github.com/ianb/personal-history-archive/blob/master/python/named_entities.ipynb"&gt;named-entity extraction is very greedy&lt;/a&gt;. But I never got very deep into the analysis I was trying to&amp;nbsp;enable.&lt;/p&gt;
&lt;p&gt;There’s really no reason for me to ever revisit this, even though I found it a genuinely fun and interesting project. If there was something to be learned there it was for Mozilla to learn and act upon. And Mozilla still could! I never knew how to get people’s&amp;nbsp;attention.&lt;/p&gt;
&lt;h2&gt;&lt;span id="firefox-voice"&gt;14. Firefox&amp;nbsp;Voice&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This is not the end of the list, just the end for now, because Firefox Voice brings us up to today. (I vow to start, maybe finish, and move past many entirely new&amp;nbsp;projects!)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mozilla-extensions/firefox-voice"&gt;Firefox Voice&lt;/a&gt; was started shortly before I joined the Consumer Voice Products team, by &lt;a href="https://juliacambre.com/"&gt;Julia Cambre&lt;/a&gt; and &lt;a href="https://twitter.com/andrenatalbr"&gt;André Natal&lt;/a&gt;. It was the second attempt at the idea by the team (with &lt;a href="https://abewallin.com/"&gt;Abe Wallin&lt;/a&gt;, &lt;a href="https://www.harraton.com/"&gt;Janice Tsai&lt;/a&gt;, and &lt;a href="http://jofish.com/"&gt;Jofish Kaye&lt;/a&gt;). The concept was straight-forward: build a voice assistant for the browser. I’ve been working on the project for the last&amp;nbsp;year.&lt;/p&gt;
&lt;p&gt;This deserves a whole post, so I won’t do a retrospective here (&lt;a href="https://www.ianbicking.org/blog/2020/08/thoughts-on-voice-interfaces.html"&gt;Thoughts on Voice Interfaces&lt;/a&gt; offers some of my general observations). I did believe in the project. As a voice assistant for desktop Firefox it wasn’t enough. But as a toehold to create a natural language interface to the web, it could have been a lot. Everything you want to interact with in your computing life is accessible one way or another through the web, and building new ways to get at that feels useful and important. And maybe it still could be, we’ll see&amp;#8230; but it won’t happen at&amp;nbsp;Mozilla.&lt;/p&gt;
&lt;p&gt;Even before the project (and team and division) was &lt;a href="https://blog.mozilla.org/blog/2020/08/11/changing-world-changing-mozilla/"&gt;cancelled&lt;/a&gt;, I realized Mozilla wasn’t ready to invest enough to succeed. I don’t think success requires an &lt;a href="https://voicebot.ai/2018/11/15/amazon-alexa-headcount-surpasses-10000-employees-here-is-the-growth-rate/"&gt;Alexa-sized project&lt;/a&gt;, but it’s bigger than a team of four and a handful of interns, as much as I enjoyed working with them&amp;nbsp;all.&lt;/p&gt;
&lt;h2&gt;&lt;span id="what-next"&gt;What&amp;nbsp;next?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I seldom think about most of the old projects now. They have long ago been &lt;a href="https://en.wiktionary.org/wiki/page_out"&gt;paged out&lt;/a&gt; of my mind to make room for new things. It feels a little unfair to my past self, enthusiastic and full of hope around some new idea. I haven’t even lost faith in many of those ideas, but I am no longer the one suited to pursue&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;I’ve had to put aside guilt to move on, but I haven’t figured out how to balance that with the work to let a project live up to its potential. I respect those who have done the work to maintain open source projects over a long period of time, and I&amp;#8217;ve accepted I&amp;#8217;m not that kind of&amp;nbsp;person.&lt;/p&gt;
&lt;p&gt;The lesson I’m taking from this exercise of listing projects is that I have not paid enough attention over the years to the people I’ve worked with. Software can’t survive long on its own, and its intrinsic value is as limited as its longevity. Professional relationships are also impermanent. But… there’s potential I’ve missed out&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Still, I’m hardly the only one who moves on: people, companies, industries, entire societies move on from problems. They just decide something doesn’t matter, or doesn’t matter &lt;em&gt;enough&lt;/em&gt;. Often I’ve felt like the last one at the party, not able to call it quits. Who am I to blow against the&amp;nbsp;wind?&lt;/p&gt;
&lt;p&gt;So, what&amp;nbsp;next?&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Thoughts on Voice Interfaces</title><link href="https://ianbicking.org/blog/2020/08/thoughts-on-voice-interfaces.html" rel="alternate"></link><published>2020-08-03T00:00:00-05:00</published><updated>2020-08-03T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2020-08-03:/blog/2020/08/thoughts-on-voice-interfaces.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been working on the Consumer Voice Products team in Mozilla for about a year now. My primary project has been &lt;a href="https://github.com/mozilla-extensions/firefox-voice"&gt;Firefox Voice&lt;/a&gt;, but our mandate is&amp;nbsp;larger.&lt;/p&gt;
&lt;p&gt;I still feel like a beginner in the area of voice, but I have developed some opinions. Many observations are the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been working on the Consumer Voice Products team in Mozilla for about a year now. My primary project has been &lt;a href="https://github.com/mozilla-extensions/firefox-voice"&gt;Firefox Voice&lt;/a&gt;, but our mandate is&amp;nbsp;larger.&lt;/p&gt;
&lt;p&gt;I still feel like a beginner in the area of voice, but I have developed some opinions. Many observations are the influence of other people’s ideas, work, or research, but I’ve lost the provenance. I’ve benefited a great deal from the long and regular discussions I’ve had with my team, particularly &lt;a href="http://abewallin.com"&gt;Abraham Wallin&lt;/a&gt;, &lt;a href="http://www.harraton.com/"&gt;Janice Tsai&lt;/a&gt;, &lt;a href="http://jofish.com"&gt;Jofish Kaye&lt;/a&gt;, and &lt;a href="https://juliacambre.com"&gt;Julia Cambre&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href="https://voicebot.ai/2020/09/07/ian-bicking-talks-firefox-voice-and-observations-about-assistants-today-voicebot-podcast-ep-166/"&gt;Hear me talk about some of these topics on this Voicebot podcast&amp;nbsp;episode&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Voice interfaces are voice &lt;em&gt;interfaces&lt;/em&gt;. They are a way for the user to express their desire, using patterns that might be &lt;a href="https://en.wikipedia.org/wiki/Skeuomorph"&gt;skeuomorphism&lt;/a&gt; of regular voice interactions, or might be specific learned behaviors. It&amp;#8217;s not a conversation. You aren&amp;#8217;t talking with the computer.&lt;ol&gt;
&lt;li&gt;I suspect you can push the user into a conversational skeuomorphism if you think that&amp;#8217;s best, and the user will play along, but it&amp;#8217;s no more right than another metaphor. It&amp;#8217;s a question of quality of interaction, not ease or&amp;nbsp;familiarity.&lt;/li&gt;
&lt;li&gt;That said, speaking is an improvisation. You have something you want to say, you&amp;#8217;ve probably prepared a few keywords, but the rest you make up word-by-word. Words won’t come out your mouth with grammatical&amp;nbsp;precision.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;I hate how voice interfaces force us to speak without pauses because a pause is treated as the end of the statement. Firefox Voice does the same thing, so I appreciate why it works this way. I still hate it.&lt;ol&gt;
&lt;li&gt;Typically tools operate on the granularity of an &lt;a href="https://en.wikipedia.org/wiki/Utterance"&gt;utterance&lt;/a&gt;: one statement, command, query. It&amp;#8217;s the same for conversational interfaces, just a different kind of&amp;nbsp;turn-taking.&lt;/li&gt;
&lt;li&gt;Many systems use a &amp;#8220;wakeword&amp;#8221; or &amp;#8220;keyword spotting&amp;#8221; to start the interaction. What if we used keyword spotting to determine the end as well? &amp;#8220;Please&amp;#8221; might be a good choice. It&amp;#8217;s like the Enter&amp;nbsp;key.&lt;/li&gt;
&lt;li&gt;I read a science fiction story where they used voice interfaces, and used &amp;#8220;please&amp;#8221; as a statement terminator as well (in a &lt;a href="https://archive.org/details/Asimovs_v15n12n13_1991-11/page/n227/mode/2up"&gt;story by Phillip C. Jennings&lt;/a&gt; &lt;a href="https://archive.org/stream/Asimovs_v15n12n13_1991-11/Asimovs_v15n12n13_1991-11_djvu.txt"&gt;[text only]&lt;/a&gt; &lt;a id="footnote1-source" href="#footnote1"&gt;**&lt;/a&gt;). This also made &amp;#8220;please&amp;#8221; insulting, using it meant you regarded someone as no more important than a&amp;nbsp;computer.&lt;/li&gt;
&lt;li&gt;Another option might be speculative execution while allowing amendments. A common example would be when you want to say &amp;#8220;set reminder for 2pm to go to the post office&amp;#8221; but you paused just a little too long and the assistant jumped on you at &amp;#8220;set reminder for 2pm&amp;#8221;. Now it&amp;#8217;s going to blather on about a question (“what reminder?”), and not only do you have to wait, you have to time your response. It would be nice if the moment you said &amp;#8220;set reminder for 2pm&amp;#8221; the assistant would indicate (visually) &amp;#8220;setting 2pm reminder for what?&amp;#8221; and you might answer anytime, and if you were slow it might give an audio prompt which you could also talk&amp;nbsp;over.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Some people think it is important that we &lt;a href="https://www.the-vital-edge.com/digital-assistants-abuse/"&gt;not abuse assistants&lt;/a&gt;. They believe abuse will make us cold or abusive to each other. I do not agree.&lt;ol&gt;
&lt;li&gt;We&amp;#8217;ve also learned that people feel embarrassed when they can&amp;#8217;t get their assistant to understand them. It&amp;#8217;s different than other interfaces, as the voice makes it feel more personal and judgy. So concern over emotional impact is not&amp;nbsp;misplaced.&lt;/li&gt;
&lt;li&gt;When I used a &lt;span class="caps"&gt;GPS&lt;/span&gt; in the car regularly it would continually give voice instructions. I&amp;#8217;d miss a turn and it would constantly tell me to make a U-turn or otherwise backtrack. I&amp;#8217;d also just &lt;em&gt;choose&lt;/em&gt; another route and it would complain. I knew I didn’t make a mistake, but I still felt judged. Then I turned off the voice and it was fine, the screen just informed me, it didn&amp;#8217;t judge&amp;nbsp;me.&lt;/li&gt;
&lt;li&gt;Which is to say: I don’t think the answer is compassion towards our computers. They neither need it nor even ask for it. Instead of navigating through the uncanny valley we should keep computer and human separate. You want to cut short what your assistant is saying? Please do. Our challenge as implementers is to keep your heart from going cold by making it very clear this isn&amp;#8217;t a human and has no&amp;nbsp;feelings.&lt;/li&gt;
&lt;li&gt;An aside, but &lt;a href="https://www.youtube.com/watch?v=rVlhMGQgDkY"&gt;this classic video&lt;/a&gt; of people taunting a Boston Robotics robot made people uncomfortable (including me!). They are being such jerks! I think the answer is that we should not make robots that look like humans. You and I pass on the sidewalk, and we have to navigate cooperatively to keep from hitting each other. If I bust through you paying no attention that makes me the asshole. I don&amp;#8217;t want to have to start navigating politeness with robots too: they should step aside; if I place a hand on a robot it should stop, not be offended. I&amp;#8217;m not polite to doors either, and this does not make me a worse&amp;nbsp;person.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Voice is not a command-line interface. Voice ends up as text, and despite caveats&amp;#8230; really it’s just treated as text. So it seems appealing to treat it like a command line interface, but no&amp;#8230;&lt;ol&gt;
&lt;li&gt;Accuracy is a big issue. Transcription errors are common. You can recover from a lot, but I think it puts a real upper limit on how much information you can give the computer before interaction is required. Maybe you are 95% successful saying one thing. But then you only have 90% chance of saying two concepts together. If the concept is complicated then 95% accuracy is&amp;nbsp;generous.&lt;/li&gt;
&lt;li&gt;If you execute something complicated using several smaller commands then you have opportunities to fix problems part way through. You&amp;#8217;ll need those opportunities. We call this&amp;nbsp;“repair”.&lt;/li&gt;
&lt;li&gt;I think &amp;#8220;undo&amp;#8221; would be a nice capability to build into everything. It would probably be a prefix to your reparative command. Like, &amp;#8220;no, search for nearby tacos&amp;#8221; meaning undo last command and then do this new&amp;nbsp;one.&lt;/li&gt;
&lt;li&gt;Besides accuracy, it&amp;#8217;s also mentally harder to successfully compose complex or precise sentences when speaking. Tools can ignore uninteresting words, accept multiple phrasings, put in reasonable defaults, but we can only do that once you’ve spoken. We can&amp;#8217;t boost your brain to make it easier to speak complex&amp;nbsp;phrases.&lt;/li&gt;
&lt;li&gt;GUIs are a little like a discussion. You get a menu of options – buttons and controls – and micro-feedback like hover states or a depressed state, as well as macro-feedback like actual changes in the screen to indicate what happened. Trying to compose a compound voice statement can be trying to interact with a laggy &lt;span class="caps"&gt;UI&lt;/span&gt; where you outrun the screen refresh. It&amp;#8217;s frustrating by&amp;nbsp;default.&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s not necessarily easy to give humans compound commands either. Try accomplishing something by looking over someone&amp;#8217;s shoulder and telling them what to&amp;nbsp;click&amp;#8230;&lt;/li&gt;
&lt;li&gt;Familiarity makes it possible to talk through a task with both computers and humans. I&amp;#8217;ve definitely become familiar with my Alexa, I&amp;#8217;ve learned what phrases work and which&amp;nbsp;don&amp;#8217;t.&lt;/li&gt;
&lt;li&gt;Short phrases are much harder for the computer to properly transcribe. Brevity is punished. The more words you use to express less information, the better it works. “Paste” is almost never detected&amp;nbsp;correctly.&lt;/li&gt;
&lt;li&gt;Assuming you don&amp;#8217;t have a custom transcription language model for your application, it will be very hard to get the computer to hear what you are saying if you are required to use odd phrases or terms. It&amp;#8217;s like having a stenographer that just doesn&amp;#8217;t know anything about your&amp;nbsp;domain.&lt;/li&gt;
&lt;li&gt;I do wonder if there’s something like &lt;a href="https://en.wikipedia.org/wiki/Procedure_word"&gt;procedure words&lt;/a&gt; for voice interfaces. You’ll know these from words like “roger” and “mayday”, where there’s clear and unambiguous words to communicate vital&amp;nbsp;information.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Voice has constraints, but it also has advantages, mostly from using language.&lt;ol&gt;
&lt;li&gt;The biggest is that you can talk about things you can&amp;#8217;t see. A &lt;span class="caps"&gt;GUI&lt;/span&gt; has to show everything you can act on (sometimes with doorways to other&amp;nbsp;things)&lt;/li&gt;
&lt;li&gt;You can&amp;#8217;t see search queries. And so search is always a top use of voice! In general search is used for things you can’t see but want to&amp;nbsp;find.&lt;/li&gt;
&lt;li&gt;Things-you-can&amp;#8217;t-see is also important in multitasking. You can&amp;#8217;t see the content of other tabs, and often can&amp;#8217;t see other applications. I don&amp;#8217;t think we&amp;#8217;ve figured out how to unleash this, but I think there&amp;#8217;s something&amp;nbsp;there.&lt;/li&gt;
&lt;li&gt;Because of the imprecision of voice everything is a search even if you wish it wasn&amp;#8217;t. So something as simple as adding a bookmark to a folder involves searching for the&amp;nbsp;folder.&lt;/li&gt;
&lt;li&gt;You also can&amp;#8217;t see things that don&amp;#8217;t exist yet. I can imagine some utility in using language to create conditionals and triggers, using language’s ability to talk about something that does not yet exist. What excites me here isn’t that voice is necessarily easier, but that it’s easy to take phrases that do something now and rephrase them to talk about the future. Learning to talk about the future is implicit when learning to act right&amp;nbsp;now.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;For all the cool things one might imagine doing with natural language interfaces, right now it&amp;#8217;s all imperative commands.&lt;ol&gt;
&lt;li&gt;This is in part a human’s relationship with the computer. You don&amp;#8217;t care what the computer thinks, you don&amp;#8217;t need to theorize on what will happen or give it reassurance, you just tell it what to&amp;nbsp;do.&lt;/li&gt;
&lt;li&gt;Conveniently English imperatives are simpler than most other sentences. This is probably no coincidence, as an imperative is designed to be understood and acted on&amp;nbsp;unambiguously.&lt;/li&gt;
&lt;li&gt;But there may be something useful about using voice to create descriptions in parallel with other activities. For instance some researchers have found a benefit in having the user describe their actions while a recorder sees the concrete (but noisy) clicks and&amp;nbsp;movements.&lt;/li&gt;
&lt;li&gt;Maybe tagging and organization are useful voice tasks, to be done in parallel with other non-voice navigation. Voice could be a layer on top of normal&amp;nbsp;interfaces.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Access to microphones is hard and a big deal.&lt;ol&gt;
&lt;li&gt;There&amp;#8217;s lots of very reasonable privacy&amp;nbsp;concerns.&lt;/li&gt;
&lt;li&gt;Like many privacy concerns, they are solved by making things harder for&amp;nbsp;everyone.&lt;/li&gt;
&lt;li&gt;Analog hardware is just difficult to handle, different hardware performs differently, things cut out or fail over&amp;nbsp;time.&lt;/li&gt;
&lt;li&gt;Custom hardware, like in the Alexa, makes really useful&amp;nbsp;improvements.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The big-bag-of-intent-handlers approach to parsing causes some problems&lt;ol&gt;
&lt;li&gt;As far as I can tell every system uses some form of categorization/classification, mapping a phrase to a handler. There’s always overlap, so you have to decide which handler is&amp;nbsp;best.&lt;/li&gt;
&lt;li&gt;Given variable inputs (search query, artist name, etc), mistranscriptions, and stopwords, the complete space of inputs is hard to&amp;nbsp;enumerate.&lt;/li&gt;
&lt;li&gt;As a result adding new handlers can have unexpected results, throwing the balance of the system off. I’ve been unimpressed with the extensibility of most assistants, but it’s&amp;nbsp;understandable.&lt;/li&gt;
&lt;li&gt;You can imagine always preferring native handlers to extension handlers, but that’s not great either. You want the handlers to be fairly broad, and it’s likely new handlers will be a refinement on functionality that’s merely a best-effort fallback for the default&amp;nbsp;handlers.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Apparently the vanguard of technology are now marketing agencies.&lt;ol&gt;
&lt;li&gt;Growth in these areas seems to be driven by someone saying &amp;#8220;you know, voice is the&amp;nbsp;future&amp;#8230;&amp;#8221;&lt;/li&gt;
&lt;li&gt;The marketplaces for voice assistant skills are pretty awful for both consumers and producers. Consumers find junk, producers can&amp;#8217;t find an&amp;nbsp;audience.&lt;/li&gt;
&lt;li&gt;Media outlets are the exception, but only because they are providing content instead of an&amp;nbsp;interface.&lt;/li&gt;
&lt;li&gt;Everything people do with an assistant seems stable and frozen. People do factual searches, weather, timers, reminders, and turn on and off&amp;nbsp;lights.&lt;/li&gt;
&lt;li&gt;The amount of technology we&amp;#8217;re bringing to bear on a replacement for The Clapper is&amp;nbsp;impressive.&lt;/li&gt;
&lt;li&gt;Voice assistants, home and otherwise, are successful, but they are not successful&amp;nbsp;ecosystems.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s neat that people tell you exactly what they want to do.&lt;ol&gt;
&lt;li&gt;If you try to understand a &lt;span class="caps"&gt;GUI&lt;/span&gt; from behavioral telemetry you have to figure out why maybe someone hit a button and then canceled and tried a different button, and that maybe implies they wanted to do something that isn&amp;#8217;t directly exposed, or maybe they just misclicked,&amp;nbsp;or&amp;#8230;&lt;/li&gt;
&lt;li&gt;Because voice discovery is itself exploratory (if you want to find out if something works you should just try it), people will say what they&amp;nbsp;want.&lt;/li&gt;
&lt;li&gt;Of course there&amp;#8217;s nothing that demands that an intent be clear enough to &lt;em&gt;ever&lt;/em&gt; be implementable. So you may just be exposed to desires you can never&amp;nbsp;fulfill.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Voice doesn&amp;#8217;t mean we can create smart agents that take care of everything.&lt;ol&gt;
&lt;li&gt;Voice makes smart agents seductive because you can express a desire using natural language without specifying exactly how to accomplish the&amp;nbsp;thing.&lt;/li&gt;
&lt;li&gt;You want a voice agent to buy tickets or order you dinner? No, you don&amp;#8217;t want this. This isn&amp;#8217;t going to be any more successful than asking a waiter to order for you. Maybe if you are adventurous or very familiar with the waiter it’s possible. Even in our family we&amp;#8217;re constantly asking each other questions about preference, and negotiating options for small questions, and we are &lt;em&gt;very&lt;/em&gt; familiar with each&amp;nbsp;other.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Being able to state intentions instead of specific actions offers some opportunity to support greater focus and directed action.&lt;ol&gt;
&lt;li&gt;The way you do something with a normal &lt;span class="caps"&gt;GUI&lt;/span&gt; is you come up with the goal in your mind, decompose it into actions, and then start on the first action. Maybe open a tab, click on a button, find a document, etc. It’s easy to get lost along the way – not just confused, but also&amp;nbsp;distracted.&lt;/li&gt;
&lt;li&gt;I doubt we can – or even should – just “make it happen” when there’s a complex goal-oriented statement. But even if the tool can’t easily break down a task, maybe the user can construct their own top-down outline of a&amp;nbsp;task.&lt;/li&gt;
&lt;li&gt;This immediately leads to the idea you could then save the outline as a repeatable task. Instead of making it an opaque repeatable task, I suspect it would be better to make it a list, and make it easy to follow along with lists. Then the assistant says “next you did: ‘open most recent email from Joe’; say “ok” or a command…” and then maybe that’s the right next task, or maybe you say something else inspired by your past command. The assistant can provide task scaffolding instead of&amp;nbsp;automation.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;I am skeptical about learning and adaptation.&lt;ol&gt;
&lt;li&gt;Reliability – even reliably making mistakes – is an important feature. It means the user can learn about the system and adapt their behavior, without the system foiling them by changing its own&amp;nbsp;behavior.&lt;/li&gt;
&lt;li&gt;Discovery is hard, and having the search space change under your feet only makes it&amp;nbsp;worse.&lt;/li&gt;
&lt;li&gt;In summary: humans learn faster and better than machines. If the experience is going to grow, it needs to be explicit and deterministic, not clever or&amp;nbsp;implied.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Voice output suffers from too much or not enough information.&lt;ol&gt;
&lt;li&gt;This is where impolite interruptions might make voice output&amp;nbsp;feasible.&lt;/li&gt;
&lt;li&gt;Human voice interactions can have the same problem. We improve our communication by being in dialog with someone instead of just talking at them, and by using body language to interpret the interest of the other&amp;nbsp;person.&lt;/li&gt;
&lt;li&gt;Some of the equivalents – asking for confirmation before speaking more, or allowing the person to interrupt – might suffer from taking too many cues from human interaction. The questions themselves easily take more time and effort than just presenting too much information, and the interruptions turn the interaction into something that feels hostile instead of&amp;nbsp;helpful.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;There’s “intent parsing” but not much I would consider “understanding”. There’s not much U in &lt;a href="https://en.wikipedia.org/wiki/Natural-language_understanding"&gt;&lt;span class="caps"&gt;NLU&lt;/span&gt;&lt;/a&gt;.&lt;ol&gt;
&lt;li&gt;Intent parsing means: given an utterance, pick the most likely thing your program can do; and also: pull out some variable parameters from the&amp;nbsp;utterance&lt;/li&gt;
&lt;li&gt;There’s no room for understanding there. “Picking an intent handler” isn’t&amp;nbsp;understanding.&lt;/li&gt;
&lt;li&gt;You can only have understanding if you also have a knowledge model. Some flat &lt;span class="caps"&gt;JSON&lt;/span&gt; with some labels isn’t a model. Models in turn need to be attached to functional results: stuff the assistant can actually&amp;nbsp;do.&lt;/li&gt;
&lt;li&gt;I don’t know what understanding looks like, or what those models will look like. And I’m not even sure I’ll recognize them when I see them, it’s possible even in the code they’ll be&amp;nbsp;implied.&lt;/li&gt;
&lt;li&gt;As an aside, I personally believe action and meaning and understanding all go together: meaning only exists when we can attach it to effects, and abstract understanding is backfilled. So models without handlers aren’t meaningful, and models that are only handler references aren’t&amp;nbsp;models.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;We could use more orthogonality. That is: meaningful phrase modifiers and statements that can apply across a wide variety of actions or application functionality.&lt;ol&gt;
&lt;li&gt;Orthogonality allows a user to come up with creative and unpredicted combinations in a phrase, and for those to actually&amp;nbsp;work.&lt;/li&gt;
&lt;li&gt;The simplest form of this I’ve thought about is a simple verb/direct-object with a simple set of&amp;nbsp;modifiers.&lt;/li&gt;
&lt;li&gt;Another way to think about it might be akin to &lt;a href="https://www.ianbicking.org/blog/2018/02/web-small-composable-tools.html"&gt;composability&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Discovery is naturally hard.&lt;ol&gt;
&lt;li&gt;Natural language commands don’t need to be organized into hierarchical structures of menus or screens, which is nice but doesn’t lend itself to&amp;nbsp;navigation.&lt;/li&gt;
&lt;li&gt;Periodically showing the user some examples seems to be the state of the art.&amp;nbsp;Sad.&lt;/li&gt;
&lt;li&gt;I feel like something might be possible with cuing. I am reminded of a small anecdote from Logo, where when you type something that isn’t defined (e.g., &lt;span class="caps"&gt;SQUARE&lt;/span&gt;) it will reply &lt;code&gt;I don’t know how&amp;nbsp; TO SQUARE&lt;/code&gt;, hinting in the error message what you should do next (&lt;code&gt;TO PROC&lt;/code&gt; defines a procedure). Doing this requires a cleverness in the language design that has not revealed itself to&amp;nbsp;me.&lt;/li&gt;
&lt;li&gt;Besides errors, any output (speech or text) is an opportunity to use language that suggests what phrases can be used. It’s a chance to encourage the user to mirror the computer’s&amp;nbsp;language.&lt;/li&gt;
&lt;li&gt;The big bag of intent handlers approach means there’s no natural comprehensibility to the space of phrases and abilities. By pursuing “natural language” we create a very sparse space of successful phrases amid the entirety of possible language. Is it&amp;nbsp;predictable?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Intents tend to be dominated by verbs, but I think we might do better leading with nouns.&lt;ol&gt;
&lt;li&gt;The parsers tend to focus on the constant bits, the verbs: “&lt;strong&gt;play&lt;/strong&gt; [artist]”, “&lt;strong&gt;send message to&lt;/strong&gt;&amp;nbsp;[recipient]”.&lt;/li&gt;
&lt;li&gt;This maps to a call like &lt;code&gt;sendMessage(“Emily”, “On my way home”)&lt;/code&gt;. But maybe it should map to something like &lt;code&gt;search(“Emily”).sendMessage(“On my way home”)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The point being that you want the intersection of “entities called &lt;em&gt;Emily&lt;/em&gt;” and &amp;#8220;entities that respond to &lt;em&gt;sendMessage&lt;/em&gt;”.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;STT&lt;/span&gt; (speech to text) and &lt;span class="caps"&gt;TTS&lt;/span&gt; (text to speech) are terrible terms.&lt;ol&gt;
&lt;li&gt;I have to &lt;em&gt;think hard&lt;/em&gt; to get the right one. Every&amp;nbsp;time.&lt;/li&gt;
&lt;li&gt;I prefer “speech/voice transcription” and “speech/voice&amp;nbsp;generation”.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Twenty seems like a good round number for a conclusion.&lt;ol&gt;
&lt;li&gt;It feels like there’s two paths before us: structured and unstructured understanding. Both ultimately lead to structured understanding, humans construct syntactic and meaningful structured statements. Is the bridge to that a structured pidgin, or an unstructured statistical&amp;nbsp;understanding?&lt;/li&gt;
&lt;li&gt;Fundamental user interface standards in voice are still mysteries to us. Will a radical change and consolidation happen like with &lt;a href="https://en.wikipedia.org/wiki/WIMP_(computing)"&gt;&lt;span class="caps"&gt;WIMP&lt;/span&gt;&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;A whole new level of expressivity &lt;em&gt;might&lt;/em&gt; be revealed by voice interfaces. But I don’t think we know what that kind of relationship with a computer should look like. Current voice UIs are imperative just like graphical interfaces are&amp;nbsp;imperative.&lt;/li&gt;
&lt;li&gt;The details all matter: failures in speech recognition, different listening modes, microphone access and quality, output length and intonation, and all that ignores the actual &lt;em&gt;functionality&lt;/em&gt; of the thing you are interfacing with, which also will require&amp;nbsp;changes.&lt;/li&gt;
&lt;li&gt;This clearly is going to happen, but I’m not at all certain the next shift will be centered on voice, or centered on something else and happen to include voice. As an analogy, touch interfaces enabled important changes… but touch interfaces themselves aren’t&amp;nbsp;important.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Comments on &lt;a href="https://twitter.com/ianbicking/status/1290310037198516227"&gt;Twitter&lt;/a&gt; or &lt;a href="https://news.ycombinator.com/item?id=24040539"&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href="#footnote1-source" id="footnote1"&gt;**&lt;/a&gt; From &lt;i&gt;The Fourth Intercometary&lt;/i&gt; (a story I enjoyed and would recommend!): &amp;#8220;Director Lester Bragolio stepped out of seclusion, clad in tunic, breeches and slippers, hairbrush in hand. He spoke while combing his tousled white hair. &amp;#8216;Would you bring up the navscreen, please? Ten degree&amp;nbsp;radius?&amp;#8217;&lt;/p&gt;&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;The Tipsy Witch held faithful to Yossi’s voice. He said &amp;#8216;Navscreen A, grid out from Gledhill, ten degree radius.&amp;#8217; Only then did the monitor come to life. &amp;#8216;False color, please,&amp;#8217; Yossi instructed. His own &amp;#8216;please&amp;#8217; meant &amp;#8216;end of command.&amp;#8217; Language changed when one talked to machines. Spoken as the Director said it, the word almost signified: you are the same to me as some piece of&amp;nbsp;equipment.&amp;#8221;&lt;/p&gt;&lt;/blockquote&gt;</content><category term="misc"></category></entry><entry><title>Kling’s Axes of Politics, and the Technocrats</title><link href="https://ianbicking.org/blog/2019/07/kling-axes-of-politics-technocrats.html" rel="alternate"></link><published>2019-07-30T00:00:00-05:00</published><updated>2019-07-30T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2019-07-30:/blog/2019/07/kling-axes-of-politics-technocrats.html</id><summary type="html">&lt;p&gt;In &lt;a href="https://cdn.cato.org/libertarianismdotorg/books/ThreeLanguagesOfPolitics.pdf"&gt;Arnold Kling&amp;#8217;s &lt;em&gt;The Three Languages Of Politics&lt;/em&gt;&lt;/a&gt; he argues that we don&amp;#8217;t all exist along some set of objective political axes, left and right, or even the classic &lt;a href="https://en.wikipedia.org/wiki/Nolan_Chart"&gt;two-dimensional spectrum&lt;/a&gt; (or even &lt;a href="https://en.wikipedia.org/wiki/File:Revised_NPOV_political_chart.jpg"&gt;three dimensions&lt;/a&gt;). Instead different groups use different axes, or different dichotomies, to look at the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a href="https://cdn.cato.org/libertarianismdotorg/books/ThreeLanguagesOfPolitics.pdf"&gt;Arnold Kling&amp;#8217;s &lt;em&gt;The Three Languages Of Politics&lt;/em&gt;&lt;/a&gt; he argues that we don&amp;#8217;t all exist along some set of objective political axes, left and right, or even the classic &lt;a href="https://en.wikipedia.org/wiki/Nolan_Chart"&gt;two-dimensional spectrum&lt;/a&gt; (or even &lt;a href="https://en.wikipedia.org/wiki/File:Revised_NPOV_political_chart.jpg"&gt;three dimensions&lt;/a&gt;). Instead different groups use different axes, or different dichotomies, to look at the world. &lt;em&gt;Because&lt;/em&gt; we don&amp;#8217;t share a common idea of good vs. bad, thus we cannot agree on what is good and bad, and so we disagree&amp;nbsp;politically.&lt;/p&gt;
&lt;p&gt;The free &lt;span class="caps"&gt;PDF&lt;/span&gt; of the book is linked above if you want to read his exposition. I first encountered it in a &lt;a href="http://www.econtalk.org/kling-on-the-three-languages-of-politics/"&gt;podcast&lt;/a&gt;. The idea is&amp;nbsp;simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Liberals&lt;/strong&gt; view political conflict as &lt;strong&gt;oppressed vs.&amp;nbsp;oppressor&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conservatives&lt;/strong&gt; view political conflict as &lt;strong&gt;civilization vs.&amp;nbsp;barbarism&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Libertarians&lt;/strong&gt; view political conflict as &lt;strong&gt;freedom vs.&amp;nbsp;coercion&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;None of this is meant to speak to the virtue or correctness of these political philosophies. Nor does political discourse directly reveal these beliefs. That&amp;#8217;s why it&amp;#8217;s so confusing: everyone is talking to the audience, slipping into different imagined value systems in the almost-useless attempt to &amp;#8220;convince&amp;#8221; someone of something. But underneath a conservative&amp;#8217;s argument is an argument &amp;#8220;you should do this in support of civilization and against barbarism&amp;#8221;, while a liberal makes another argument &amp;#8220;we must support these oppressed people in opposition to these oppressors&amp;#8221; – applied to a specific political conflict the arguments bear no resemblance to each other and are entirely unconvincing to the other&amp;nbsp;group.&lt;/p&gt;
&lt;p&gt;Looking at political views using these underlying value systems has helped me make more sense of the world. Instead of being shocked at the hypocrisy of other people&amp;#8217;s beliefs, it gives me a chance to feel some sense of empathy. It&amp;#8217;s not always a forgiving lens: for instance, looking at modern conservatism as an expressions of a battle between civilization and barbarism makes it all seem even more racist. But at least things make sense, and the wildly different reactions different groups have to the same event or idea makes more&amp;nbsp;sense.&lt;/p&gt;
&lt;p&gt;(I don&amp;#8217;t believe in this libertarian axis. It&amp;#8217;s too close to the outward expression of libertarianism. If it was correct I think it would explain why anarchists and libertarians – outwardly sharing a value system of freedom vs. coercion – express their politics so&amp;nbsp;differently.)&lt;/p&gt;
&lt;p&gt;As helpful as these axes are, I looked at them and didn&amp;#8217;t see myself. I often self-identify as liberal, but I know in my heart I am not. The axis of &lt;em&gt;oppressed vs. oppressor&lt;/em&gt; makes that clearer to me: this is not my primary narrative lens, it&amp;#8217;s not how I construct stories for myself when deciding how I feel about&amp;nbsp;something.&lt;/p&gt;
&lt;p&gt;My first reaction, maybe because my primary narrative is one of hubris, is that &lt;strong&gt;I&lt;/strong&gt; am a &lt;strong&gt;realist&lt;/strong&gt;. I&amp;#8217;m above it all! Everyone else is stuck in their personal narratives, I just try to see things how they&amp;nbsp;are.&lt;/p&gt;
&lt;p&gt;This is nonsense of course. Even my younger self was suspicious of self-proclaimed &amp;#8220;realists&amp;#8221;, but an older me is confident it is self-indulgent bullshit, a way of projecting biases and perspectives onto an imagined truth without bothering to investigate what truth really is. The only realist is someone who knows the limits of their narrow perspective too well to call themselves a&amp;nbsp;realist.&lt;/p&gt;
&lt;p&gt;Still there&amp;#8217;s nothing inherent in these three political groups and three axes. So I offer this additional&amp;nbsp;axis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technocrats&lt;/strong&gt; view political conflict as &lt;strong&gt;progress vs.&amp;nbsp;superstition&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I thought about &amp;#8220;progress vs. regression&amp;#8221;, but that seems too easy. They are logical opposites, sure, but they don&amp;#8217;t express what draws me emotionally to one side and repels me from the other. Other options might be &amp;#8220;progress vs. corruption&amp;#8221; or &amp;#8220;progress vs. romanticism.&amp;#8221; It&amp;#8217;s important to capture &lt;strong&gt;how change feels to people in the group&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not even sure if these are &amp;#8220;value systems&amp;#8221; so much as &lt;strong&gt;descriptions of what winning and losing feels like&lt;/strong&gt;. We imagine politics is (or should be) the making of rational arguments about different policies. Instead I think we tell each other stories about how we might win or lose. I don&amp;#8217;t know the implications, but right now everyone feels like they are losing.&amp;nbsp;Everyone.&lt;/p&gt;
&lt;p&gt;Understanding how I frame winning and losing helps me be more at peace with the disagreements I have with other people, especially the people with whom I am close. I don&amp;#8217;t want to condemn them those people, I don&amp;#8217;t want to declare them as &amp;#8220;wrong&amp;#8221; (even only in my head). Agreeing to disagree by &lt;em&gt;understanding why we disagree&lt;/em&gt; feels&amp;nbsp;right.&lt;/p&gt;
&lt;p&gt;I could continue with this post and argue why my axis is the correct axis. But I truly do not believe that it is. We&amp;#8217;re better off with many value systems: there are many things I don&amp;#8217;t care about, but that someone should care about. It&amp;#8217;s not just balance, it&amp;#8217;s like an ecology of individuals making up a moral society. (And yet, not every ecology is&amp;nbsp;healthy&amp;#8230;)&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>“Users want control” is a shoulder shrug</title><link href="https://ianbicking.org/blog/2019/04/users-want-control-is-a-shrug.html" rel="alternate"></link><published>2019-04-23T00:00:00-05:00</published><updated>2019-04-23T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2019-04-23:/blog/2019/04/users-want-control-is-a-shrug.html</id><summary type="html">&lt;p&gt;Making the claim &amp;#8220;users want control&amp;#8221; is the same as saying you don&amp;#8217;t know what users want, you don&amp;#8217;t know what is good, and you don&amp;#8217;t know what their goals&amp;nbsp;are.&lt;/p&gt;
&lt;p&gt;I first started thinking about this during the debate over what would become the &lt;a href="https://en.wikipedia.org/wiki/Patient_Protection_and_Affordable_Care_Act"&gt;&lt;span class="caps"&gt;ACA&lt;/span&gt;&lt;/a&gt;. The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Making the claim &amp;#8220;users want control&amp;#8221; is the same as saying you don&amp;#8217;t know what users want, you don&amp;#8217;t know what is good, and you don&amp;#8217;t know what their goals&amp;nbsp;are.&lt;/p&gt;
&lt;p&gt;I first started thinking about this during the debate over what would become the &lt;a href="https://en.wikipedia.org/wiki/Patient_Protection_and_Affordable_Care_Act"&gt;&lt;span class="caps"&gt;ACA&lt;/span&gt;&lt;/a&gt;. The rhetoric was filled with this idea that people want choice in their medical care: &lt;em&gt;people want control&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;No! People want &lt;strong&gt;good health care&lt;/strong&gt;. If they don&amp;#8217;t trust systems to provide them good health care, if they don&amp;#8217;t trust their providers to understand their priorities, then &lt;em&gt;choice&lt;/em&gt; is the fallback: it&amp;#8217;s how you work the system when the system isn&amp;#8217;t working for you. And it sucks! Here you are, in the middle of some health issue, with treatments and symptoms and the rest of your life duties, and now you have to become a researcher on top of it? But the politicians and the pundits could not stop talking about&amp;nbsp;control.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Control&lt;/em&gt; is what you need when you want something and it won&amp;#8217;t happen on its own. But (usually) it&amp;#8217;s not control you want, it&amp;#8217;s just a&amp;nbsp;means.&lt;/p&gt;
&lt;p&gt;So when we say &lt;em&gt;users want control over X&lt;/em&gt; – their privacy, their security, their data, their history – we are first acknowledging that current systems act against users, but we aren&amp;#8217;t proposing any real solution. We&amp;#8217;re avoiding even talking about the&amp;nbsp;problems.&lt;/p&gt;
&lt;p&gt;For instance, we say &amp;#8220;users want control over their privacy,&amp;#8221; but what people really want is some subset&amp;nbsp;of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To avoid&amp;nbsp;embarrassment&lt;/li&gt;
&lt;li&gt;To avoid&amp;nbsp;persecution&lt;/li&gt;
&lt;li&gt;&amp;#8230; sometimes for doing illegal and wrong&amp;nbsp;things&lt;/li&gt;
&lt;li&gt;To keep from having the creeping sensation they left something sitting out that they didn&amp;#8217;t want&amp;nbsp;to&lt;/li&gt;
&lt;li&gt;They want to make some political statement against&amp;nbsp;surveillance&lt;/li&gt;
&lt;li&gt;They want to keep things from the prying eyes of those close to&amp;nbsp;them&lt;/li&gt;
&lt;li&gt;They want to avoid being manipulated by bad-faith&amp;nbsp;messaging&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There&amp;#8217;s no easy answers, not everyone holds all these desires, but these are concrete ways of thinking about what people want. They don&amp;#8217;t all point in the same direction. (And then consider the complex implications of someone else talking about&amp;nbsp;you!)&lt;/p&gt;
&lt;p&gt;There are some cases when a person really does want control. If the person wants to determine their own path, if &lt;strong&gt;having choice is itself a personal goal&lt;/strong&gt;, then you need control. That&amp;#8217;s a goal about &lt;em&gt;who you are&lt;/em&gt; not just &lt;em&gt;what you get&lt;/em&gt;. It&amp;#8217;s worth identifying moments when this is important. But if a person does not pay attention to something then that person probably does not identify with the topic and is not seeking control over it. &amp;#8220;Privacy advocates&amp;#8221; pay attention to privacy, and attain a sense of identity from the very act of being mindful of their own privacy. Everyone else does&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s think about another example: &lt;em&gt;users want control over their data&lt;/em&gt;. What are some things they&amp;nbsp;want?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They don&amp;#8217;t want to lose their&amp;nbsp;data&lt;/li&gt;
&lt;li&gt;They don&amp;#8217;t want their data used to hold them hostage (e.g., to a subscription&amp;nbsp;service)&lt;/li&gt;
&lt;li&gt;They don&amp;#8217;t want to delete data and have it still&amp;nbsp;reappear&lt;/li&gt;
&lt;li&gt;They want to use their data however they want, but more likely they want their data available for use by some other service or&amp;nbsp;tool&lt;/li&gt;
&lt;li&gt;They feel it&amp;#8217;s unfair if their data is used for commercial purposes without any&amp;nbsp;compensation&lt;/li&gt;
&lt;li&gt;They are offended if their data is used to manipulate themselves or&amp;nbsp;others&lt;/li&gt;
&lt;li&gt;They don&amp;#8217;t want their data used against them in manipulative&amp;nbsp;ways&lt;/li&gt;
&lt;li&gt;They want to have shared ownership of data with other&amp;nbsp;people&lt;/li&gt;
&lt;li&gt;They want to prevent unauthorized or malicious access to their&amp;nbsp;data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Again these motivations are often against each other. A person wants to be able to copy their data between services, but also delete their data permanently and completely. People don&amp;#8217;t want to lose their data, but having personal control over your data is a great way to lose it, or even to lose control over it. The professionalization and centralization of data management by services has mostly improved access control and&amp;nbsp;reliability.&lt;/p&gt;
&lt;p&gt;When we simply say &lt;em&gt;users want control&lt;/em&gt; it&amp;#8217;s  giving up on understanding people&amp;#8217;s specific desires. Still it&amp;#8217;s not exactly wrong: it&amp;#8217;s reasonable to assume people will use control to achieve their desires. But if, as technologists, we can&amp;#8217;t map functionality to desire, it&amp;#8217;s a bit of a stretch to imagine everyone else will figure it out on the&amp;nbsp;fly.&lt;/p&gt;</content><category term="mozilla"></category></entry><entry><title>Open Source Doesn’t Make Money Because It Isn’t Designed To Make Money</title><link href="https://ianbicking.org/blog/2019/03/open-source-doesnt-make-money-by-design.html" rel="alternate"></link><published>2019-03-18T00:00:00-05:00</published><updated>2019-03-18T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2019-03-18:/blog/2019/03/open-source-doesnt-make-money-by-design.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Or: &lt;em&gt;The Best Way To Do Something Is To At Least&amp;nbsp;Try&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We all know the story: you can&amp;#8217;t make money on open source. Is it really&amp;nbsp;true?&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m thinking about this now because Mozilla would like to diversify its revenue in the next few years, and one …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Or: &lt;em&gt;The Best Way To Do Something Is To At Least&amp;nbsp;Try&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We all know the story: you can&amp;#8217;t make money on open source. Is it really&amp;nbsp;true?&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m thinking about this now because Mozilla would like to diversify its revenue in the next few years, and one constraint we have is that everything we do is open&amp;nbsp;source.&lt;/p&gt;
&lt;p&gt;There are dozens (hundreds?) of successful open source projects that have tried to become even just modest commercial enterprises, some very seriously. Results aren&amp;#8217;t&amp;nbsp;great.&lt;/p&gt;
&lt;p&gt;I myself am trying to pitch a commercial endeavor in Mozilla right now (if writing up plans and sending them into the ether can qualify as &amp;#8220;pitching&amp;#8221;), and this question often comes up in feedback: can we sell something that is open&amp;nbsp;source?&lt;/p&gt;
&lt;p&gt;I have no evidence that we can (or can&amp;#8217;t), but I will make this assertion: it&amp;#8217;s hard to sell something that wasn&amp;#8217;t designed to be&amp;nbsp;sold.&lt;/p&gt;
&lt;p&gt;We treat open source like it&amp;#8217;s a poison pill for a commercial product. And yes, with an open source license it&amp;#8217;s harder to force someone to pay for a product, though many successful businesses exist without &lt;em&gt;forcing&lt;/em&gt;&amp;nbsp;anyone.&lt;/p&gt;
&lt;p&gt;I see an implicit assumption that makes it harder to think about this: the idea that if something is useful, it should be profitable. It&amp;#8217;s an unspoken and morally-infused expectation, a kind of Just World hypothesis: if something has utility, if it helps people, if it&amp;#8217;s something the world needs, if it empowers other people, then there should be a revenue opportunity. It should be possible for the thing to be your day job, to make money, to see some remuneration for your successful effort in creating or doing this&amp;nbsp;thing.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s what we think the world &lt;em&gt;should&lt;/em&gt; be like, but we all know it isn&amp;#8217;t. You can&amp;#8217;t make a living making music. Or art. You can&amp;#8217;t even make a living taking care of children. I think this underlies many of this moment&amp;#8217;s critiques of capitalism: there&amp;#8217;s too many things that are important, even needed, or that fulfill us more than any profitable item, and yet are economically&amp;nbsp;unsustainable.&lt;/p&gt;
&lt;p&gt;I won&amp;#8217;t try to fix that in this blog post, only note: not all good things make&amp;nbsp;money.&lt;/p&gt;
&lt;p&gt;But we know there is money in software. Lots of money! Is the money in secrets? If OpenSSL was secret, could it make money? If it had a licensing paywall, could it make money? Seems unlikely. The license isn&amp;#8217;t holding it back. It&amp;#8217;s just not shaped like something that makes money. Solving important problems isn&amp;#8217;t&amp;nbsp;enough.&lt;/p&gt;
&lt;p&gt;So what can you get paid to&amp;nbsp;do?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;People will pay a little for apps; not a lot, but a bit. Scaling up requires marketing and capital, which open source projects almost never have (and I doubt many open source projects would know what to do with capital if they had&amp;nbsp;it).&lt;/li&gt;
&lt;li&gt;There&amp;#8217;s always money in ads. Sadly. This could potentially offend someone enough to actually repackage your open source software with ads removed. As a form of &lt;a href="https://en.wikipedia.org/wiki/Price_discrimination"&gt;price discrimination&lt;/a&gt; (e.g., paid ad removal) I think you could avoid&amp;nbsp;defection.&lt;/li&gt;
&lt;li&gt;Fully-hosted services: &lt;a href="https://automattic.com/"&gt;Automattic&amp;#8217;s&lt;/a&gt; wordpress.com is a good example here. Is &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt; doing &lt;span class="caps"&gt;OK&lt;/span&gt;? These are complete solutions: you don&amp;#8217;t just get software, you get a&amp;nbsp;website.&lt;/li&gt;
&lt;li&gt;People will pay if you ensure they get a personalized solution. I.e., consulting. Applied to software you get &lt;a href="https://www.joelonsoftware.com/2002/05/06/five-worlds/"&gt;consultingware&lt;/a&gt;. While often maligned, many real businesses are built on this. I think Drupal is in this&amp;nbsp;category.&lt;/li&gt;
&lt;li&gt;People will pay you for your dedicated and ongoing attention. In other words: a day job as an employee. It feels unfair to put this option on the list, but it&amp;#8217;s such a natural progression from consultingware, and such a dominant pattern in open source that I think it deserves&amp;nbsp;acknowledgement.&lt;/li&gt;
&lt;li&gt;Anything paired with a physical device. People will judge the value based on the hardware and software experience&amp;nbsp;together.&lt;/li&gt;
&lt;li&gt;I&amp;#8217;m not sure if Firefox makes money (indirectly) from ads, or as compensation for maintaining monopoly&amp;nbsp;positions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;#8217;m sure I&amp;#8217;m missing some interesting ideas from that&amp;nbsp;list.&lt;/p&gt;
&lt;p&gt;But if you have a business concept, and you think it might work, what does open source even have to do with it? Don&amp;#8217;t we learn: focus on your business! On your customer! Software licensing seems like a distraction, even &lt;em&gt;software&lt;/em&gt; is a questionable thing to focus on, separate from the business. Maybe this is why you can&amp;#8217;t make money with open source: it&amp;#8217;s a distraction. The question isn&amp;#8217;t open-source-vs-proprietary, but&amp;nbsp;open-source-vs-business-focused.&lt;/p&gt;
&lt;p&gt;Another lens might be: who are you selling to? Classical scratch-your-own-itch open source software is built by programmers &lt;em&gt;for&lt;/em&gt; programmers. And it is wildly successful, but it&amp;#8217;s selling to people who aren&amp;#8217;t willing to pay. They want to take the software and turn it around into greater personal productivity (which turns out to be a smart move, given the rise in programmer wages). Can we sell open source to other people? Can anyone else &lt;em&gt;do&lt;/em&gt; anything with source&amp;nbsp;code?&lt;/p&gt;
&lt;p&gt;And so I remain pessimistic that open source can find commercial success. But also frustrated: so much software is open source &lt;em&gt;except&lt;/em&gt; any commercial product. This is where the Free Software mission has faltered despite so many successes: software that people actually touch isn&amp;#8217;t free or open. That&amp;#8217;s a&amp;nbsp;shame.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You may also wish to read &lt;a href="https://news.ycombinator.com/item?id=19431444"&gt;Hacker News Comments&lt;/a&gt; on this post, or the &lt;a href="https://www.reddit.com/r/programming/comments/b30m3s/open_source_doesnt_make_money_because_it_isnt/"&gt;Reddit r/programming&amp;nbsp;comments&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="mozilla"></category></entry><entry><title>The Firefox Experiments I Would Have Liked To Try</title><link href="https://ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html" rel="alternate"></link><published>2019-03-04T00:00:00-06:00</published><updated>2019-03-04T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2019-03-04:/blog/2019/03/firefox-experiments-i-would-have-liked.html</id><summary type="html">&lt;p&gt;I have been part of the Firefox Test Pilot team for several years. I had a long list of things I wanted to build. Some I didn&amp;#8217;t personally want to build, but I thought they were interesting ideas. I didn&amp;#8217;t get very far through this list at all …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been part of the Firefox Test Pilot team for several years. I had a long list of things I wanted to build. Some I didn&amp;#8217;t personally want to build, but I thought they were interesting ideas. I didn&amp;#8217;t get very far through this list at all, and now that &lt;a href="https://medium.com/firefox-test-pilot/adios-amigo-51bec2a00072"&gt;Test Pilot is being retired&lt;/a&gt; I am unlikely to get to them in the&amp;nbsp;future.&lt;/p&gt;
&lt;p&gt;Given this I feel I have to move this work out of my head, and publishing a list of ideas seems like an okay way to do that. Many of these ideas were inspired by something I saw in the wild, sometimes a complete product (envy on my part!), or the seed of an idea embedded in some other&amp;nbsp;product.&lt;/p&gt;
&lt;p&gt;The experiments are a spread: some are little features that seem potentially useful. Others are features seen elsewhere that show promise from user research, but we could only ship them with confidence if we did our own analysis. Some of these are just ideas for how to explore an area more deeply, without a clear product in&amp;nbsp;mind.&lt;/p&gt;
&lt;p&gt;Test Pilot&amp;#8217;s purpose was to find things worth shipping in the browser, which means some of these experiments aren&amp;#8217;t novel, but there is an underlying question: would people actually use it? We can look at competitors to get ideas, but we have to ship something ourselves if we want to analyze the&amp;nbsp;benefit.&lt;/p&gt;
&lt;p&gt;Table of&amp;nbsp;contents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sticky-reader-mode"&gt;Sticky Reader&amp;nbsp;Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cloud-browser"&gt;Cloud&amp;nbsp;Browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modal-page-actions"&gt;Modal Page&amp;nbsp;Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#find-plus-one"&gt;Find+1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#your-front-page"&gt;Your Front&amp;nbsp;Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#page-archive"&gt;Page&amp;nbsp;Archive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#personal-historical-archive"&gt;Personal Historical&amp;nbsp;Archive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#navigational-breadcrumbs"&gt;Navigational&amp;nbsp;Breadcrumbs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#copy-keeper"&gt;Copy&amp;nbsp;Keeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#change-scout"&gt;Change&amp;nbsp;Scout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#popup-tab-switcher"&gt;Popup Tab&amp;nbsp;Switcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#personal-podcast"&gt;Personal&amp;nbsp;Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bookmark-manager"&gt;Bookmark&amp;nbsp;Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extended-library"&gt;Extended&amp;nbsp;Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#text-mobile-screenshot"&gt;Text Mobile&amp;nbsp;Screenshot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#email-readable"&gt;Email&amp;nbsp;Readable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#your-history-everywhere"&gt;Your History&amp;nbsp;Everywhere&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#my-homepage"&gt;My&amp;nbsp;Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#studying-electron"&gt;Studying what Electron does for&amp;nbsp;people&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#app-quick-switcher"&gt;App quick&amp;nbsp;switcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#just-save"&gt;Just&amp;nbsp;Save&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#open-search-combined-search"&gt;Open Search Combined&amp;nbsp;Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#notes-commander"&gt;Notes&amp;nbsp;Commander&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automater"&gt;Automater&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sidekick"&gt;Sidekick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#timed-repetition"&gt;Timed&amp;nbsp;Repetition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reader-mode-improvements"&gt;Reader Mode&amp;nbsp;improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#digest-mode"&gt;Digest&amp;nbsp;Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#firefox-for-x"&gt;&lt;strong&gt;Firefox for X&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#firefox-study"&gt;Firefox&amp;nbsp;Study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#firefox-media"&gt;Firefox&amp;nbsp;Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#firefox-for-finance"&gt;Firefox for&amp;nbsp;Finance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#firefox-low-bandwidth"&gt;Firefox Low&amp;nbsp;Bandwidth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#firefox-for-kids"&gt;Firefox for&amp;nbsp;Kids&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#firefox-calm"&gt;Firefox&amp;nbsp;Calm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;&lt;strong&gt;Concluding&amp;nbsp;thoughts&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;a href="#sticky-reader-mode" id="sticky-reader-mode"&gt;Sticky Reader&amp;nbsp;Mode&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="mockup of Sticky Reader Mode" src="/media/mockups/sticky-readable-start.gif"&gt;&lt;/p&gt;
&lt;p&gt;Give &lt;a href="https://support.mozilla.org/en-US/kb/firefox-reader-view-clutter-free-web-pages"&gt;Reader Mode&lt;/a&gt; in Firefox a preference to make it per-domain sticky. E.g. if I use Reader Mode on nytimes.com and then if I visit an article on nytimes.com in the future it&amp;#8217;ll automatically convert to reader mode. (The nytimes.com homepage would not be a candidate for that&amp;nbsp;mode.)&lt;/p&gt;
&lt;p&gt;I made an experiment in &lt;a href="https://github.com/ianb/sticky-reader-mode"&gt;&lt;code&gt;sticky-reader-mode&lt;/code&gt;&lt;/a&gt;, and I think it works really nicely. It changes the browsing experience significantly, and most importantly it doesn&amp;#8217;t require frequent proactive engagement to change behavior. Lots of these proposed ideas are tools that require high engagement by the user, and if you don&amp;#8217;t invoke the tool then they do nothing. In practice no one (myself included) remembers to invoke these tools. Once you click the preference on a site Sticky Reader Mode then you are opted in to this new experience with no further action&amp;nbsp;required.&lt;/p&gt;
&lt;p&gt;There are a &lt;a href="https://github.com/ianb/sticky-reader-mode/issues/5"&gt;bunch of similar add-ons&lt;/a&gt;. Sticky Reader Mode works a bit better than most because of its interface, and it will push you directly into Reader Mode without rendering the normal page. &lt;strong&gt;But&lt;/strong&gt; it does this by using APIs that are not public to normal WebExtensions. As a result it can&amp;#8217;t be shipped outside Test Pilot, and can&amp;#8217;t go in addons.mozilla.org. So&amp;#8230; just trust me, it&amp;#8217;s&amp;nbsp;great.&lt;/p&gt;
&lt;p&gt;Recently I&amp;#8217;ve come upon &lt;a href="https://brave.com/blog/speed-reader/"&gt;Brave Speed Reader&lt;/a&gt; which is similar, but without per-site opt-in, and using machine learning to identify&amp;nbsp;articles.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#cloud-browser" id="cloud-browser"&gt;Cloud&amp;nbsp;Browser&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="mockup of a Cloud Browser" src="/media/mockups/cloud-browser-start.gif"&gt;&lt;/p&gt;
&lt;p&gt;Run a browser/user-agent in the cloud and use a mobile view as a kind of semantic or parsed view on that user agent (the phone would just control the browser that is hosted on the cloud). At its simplest we just take the page, simplify it in a few ways, and send it on - similar to what Opera Mini does. The approach lends itself to a variety of task-oriented representations of remote&amp;nbsp;content.&lt;/p&gt;
&lt;p&gt;When I first wrote this down I had just stared at my phone while it took 30 seconds to show me a 404 page. The browser probably knew after a couple seconds that it was a 404 but it acted as a rendering engine and not a user agent, so the browser insisted on faithfully rendering the useless not found&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;Obviously running a full browser instance in the cloud is resource hungry and finicky but I think we could ignore those issues while testing. Those are hard but solved operational&amp;nbsp;issues.&lt;/p&gt;
&lt;p&gt;Prior art: Opera Mini does some of this. Puffin is specifically cloud rendering for mobile. Light Point does the same for security&amp;nbsp;reasons.&lt;/p&gt;
&lt;p&gt;I later encountered &lt;a href="https://www.brow.sh"&gt;brow.sh&lt;/a&gt; which is another interesting take on this (specifically with &lt;a href="https://html.brow.sh"&gt;html.brow.sh&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This is a very big task, but I still believe there&amp;#8217;s tremendous potential in it. Most of my concepts are not mobile-based, in part because I don&amp;#8217;t like mobile, I don&amp;#8217;t like myself when using a mobile device, and it&amp;#8217;s not something I want to put my energy into. But I still like this&amp;nbsp;idea.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#modal-page-actions" id="modal-page-actions"&gt;Modal Page&amp;nbsp;Actions&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="mockup of Modal Page Actions" src="/media/mockups/modal-page-actions-start.gif"&gt;&lt;/p&gt;
&lt;p&gt;This was tangentially inspired by &lt;a href="https://help.vivaldi.com/article/image-properties/"&gt;Vivaldi&amp;#8217;s Image Properties&lt;/a&gt;, not because of the interface, but thinking about how to fit high-information inspection tools into the&amp;nbsp;browser.&lt;/p&gt;
&lt;p&gt;The idea: instead of context menus, &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Page_actions"&gt;page actions&lt;/a&gt;, or other interaction points that are part of the &amp;#8220;chrome&amp;#8221;, implement one overlay interface: the do-something-with-this-page interface. Might also be do-something-with-this-element (e.g. replacing the 7 image-related context menu items: View Image, Copy Image, Copy Image Location, Save Image As, Email Image, Set As Desktop Background, and View Image&amp;nbsp;Info).&lt;/p&gt;
&lt;p&gt;The interface would be an overlay onto the page, similar to what happens when you start&amp;nbsp;Screenshots:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshots interface" src="/media/mockups/screenshot-interface-example-small.png"&gt;&lt;/p&gt;
&lt;p&gt;Everything that is now in the Page Action menu (the &lt;code&gt;...&lt;/code&gt; in the &lt;span class="caps"&gt;URL&lt;/span&gt; bar), or in the context menu, would be available here. Some items might have a richer interface, e.g., Send Tab To Device would show the devices directly instead of using a submenu. Bookmarking would include some inline &lt;span class="caps"&gt;UI&lt;/span&gt; for managing the resulting bookmark, and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;There was some pushback because of the &lt;a href="https://textslashplain.com/2017/01/14/the-line-of-death/"&gt;line of death&lt;/a&gt; – that is, the idea all trusted content must clearly originate from the browser chrome, and not the content area. I do not believe in the Line of Death, it&amp;#8217;s something users &lt;em&gt;could&lt;/em&gt; use to form trust, but I don&amp;#8217;t believe they &lt;em&gt;do&lt;/em&gt; use it (further user research&amp;nbsp;required).&lt;/p&gt;
&lt;p&gt;The general pattern is inspired by mobile interfaces which are typically much more modal than desktop interfaces. Modal interfaces have gotten a bad rap, I think somewhat undeserved: modal interfaces are also interfaces that guide you through processes, or ask you to explicitly dismiss the interface. It&amp;#8217;s not unreasonable to expect someone to finish what they&amp;nbsp;start.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#find-plus-one" id="find-plus-one"&gt;Find+1&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="mockup of Find + 1" src="/media/mockups/find-plus-1-start.gif"&gt;&lt;/p&gt;
&lt;p&gt;We have find-in-page but what about&amp;nbsp;find-in-anything-linked-from-this-page?&lt;/p&gt;
&lt;p&gt;Hit Cmd-Shift-F and you get an interface to do that. All the linked pages will be loaded in the background and as you search we show snippets of matching pages. Clicking on a snippet opens or focuses the tab and goes to where the search term was&amp;nbsp;found.&lt;/p&gt;
&lt;p&gt;I started experimenting in &lt;a href="https://github.com/ianb/find-plus-one"&gt;&lt;code&gt;find-plus-one&lt;/code&gt;&lt;/a&gt; and encountered some challenges: hidden tabs aren&amp;#8217;t good workers, loading pages in the background takes a lot of grinding in Firefox, and most links on pages are stupid (e.g., I don&amp;#8217;t want to search your Careers page). An important building block would be a way to identify the important (non-navigational) parts of a page. Maybe lighter-weight ways to load pages (in other projects I&amp;#8217;ve used &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;&lt;span class="caps"&gt;CSP&lt;/span&gt;&lt;/a&gt; injection). The Copy Keeper concept did come about while I experimented with&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;A simpler implementation of this might simply do a text search of all your open tabs, which would be technically simpler and mostly an exercise in making a good representation of the&amp;nbsp;results.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#your-front-page" id="your-front-page"&gt;Your Front&amp;nbsp;Page&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="mockup of Your Front Page" src="/media/mockups/your-front-page-start.gif"&gt;&lt;/p&gt;
&lt;p&gt;Create a front page of news from the sites you already visit. Like an &lt;span class="caps"&gt;RSS&lt;/span&gt; reader, but prepopulated with your history. This creates an immediate well-populated&amp;nbsp;experience.&lt;/p&gt;
&lt;p&gt;My initial thought was to use ad hoc parsers for popular news sites, and at run an experiment with just a long whitelist of news&amp;nbsp;providers.&lt;/p&gt;
&lt;p&gt;I got the feedback: why not just use &lt;span class="caps"&gt;RSS&lt;/span&gt;? Good question: I thought &lt;span class="caps"&gt;RSS&lt;/span&gt; was kind of passé, but I hadn&amp;#8217;t looked for myself. I went on to do some analysis of &lt;span class="caps"&gt;RSS&lt;/span&gt;, and found it available for almost all news sites. The &lt;a href="https://developer.mozilla.org/en-US/docs/Archive/RSS/Getting_Started/Syndicating#Adding_the_.3Clink.3E"&gt;autodetection&lt;/a&gt; (&lt;code&gt;&amp;lt;link rel=alternate&amp;gt;&lt;/code&gt;) is &lt;em&gt;not&lt;/em&gt; as widely available, and it requires manual searching to find many feeds. Still &lt;span class="caps"&gt;RSS&lt;/span&gt; is a good way to get an up-to-date list of articles and their titles. Article content isn&amp;#8217;t well represented and other article metadata is inaccurate or malformed (e.g., there are no useful tags). So using &lt;span class="caps"&gt;RSS&lt;/span&gt; would be very reasonable discovery mechanism, but an &amp;#8220;&lt;span class="caps"&gt;RSS&lt;/span&gt; reader&amp;#8221; doesn&amp;#8217;t seem like a good direction on the current&amp;nbsp;web.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#page-archive" id="page-archive"&gt;Page&amp;nbsp;Archive&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is bringing back old functionality from Page Shot, a project of mine which morphed into &lt;a href="https://screenshots.firefox.com"&gt;Firefox Screenshots&lt;/a&gt;: save full &lt;span class="caps"&gt;DOM&lt;/span&gt; copies of pages. What used to be fairly novel is now well represented by several projects (e.g., &lt;a href="https://blog.webmemex.org/"&gt;WebMemex&lt;/a&gt; or &lt;a href="https://worldbrain.io/"&gt;World Brain Memex&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Unfortunately I have never been able to really make this kind of tool part of &lt;em&gt;my own&lt;/em&gt; day-to-day behavior, and I&amp;#8217;ve become skeptical it can work for a general populace. But maybe there&amp;#8217;s a way to package up this functionality that is more accessible, or happens more implicitly. I &lt;a href="https://github.com/ianb/pagearchive"&gt;forked a version of Page Shot as pagearchive&lt;/a&gt; a while ago, with this in mind, but I haven&amp;#8217;t (and likely won&amp;#8217;t) come back to&amp;nbsp;it.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#personal-historical-archive" id="personal-historical-archive"&gt;Personal Historical&amp;nbsp;Archive&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This isn&amp;#8217;t really a product idea, but instead an approach to developing&amp;nbsp;products.&lt;/p&gt;
&lt;p&gt;One can imagine many tools that directly interact or learn from the content of your browsing. There is both a privacy issue here and a privacy opportunity: looking at this data is creepy, but if the tools live in your user agent (that belongs to you and hosts your information locally) then it&amp;#8217;s not so&amp;nbsp;creepy.&lt;/p&gt;
&lt;p&gt;But it&amp;#8217;s really hard to make experiments on this because you need a bunch of data. If you build a tool that starts watching your browsing then it will only slowly build up interesting information. The actual information that is already saved in browser history is interesting, but in my experience it is too limited and of poor quality. For instance, it is quite hard to build up a navigational path from the history when you use multiple&amp;nbsp;tabs.&lt;/p&gt;
&lt;p&gt;A better iterative development approach would be one where you have a static set of all the information you might want, and you can apply tools to that information. If you find something good then later you can add new data collection to the browser, secure in the knowledge that it&amp;#8217;s going to find interesting&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;I spent quite a bit of effort on this, and produced &lt;a href="https://github.com/ianb/personal-history-archive"&gt;`personal-history-archive&lt;/a&gt;. It&amp;#8217;s something I still want to come back to. It&amp;#8217;s a bit of a mess, because at various times it was retrofitted to collect historical information, or collect it on an ongoing basis, or collected it when driven by a script. I also tried to build tools in parallel for doing analysis on the resulting&amp;nbsp;database.&lt;/p&gt;
&lt;p&gt;This is also a byproduct of experimentation with machine learning. I wanted to apply things I was learning to browser data, but the data I wanted wasn&amp;#8217;t there. I spent all my time collecting and cleaning data, and ended up spending only a small amount of time analyzing the data. I suspect I&amp;#8217;m not the only one who has done&amp;nbsp;this.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#navigational-breadcrumbs" id="navigational-breadcrumbs"&gt;Navigational&amp;nbsp;Breadcrumbs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="mockup of Navigational Breadcrumbs" src="/media/mockups/navigational-breadcrumbs-start.gif"&gt;&lt;/p&gt;
&lt;p&gt;When I click on a link I lose the reminder of why I clicked on it. What on the previous page led me to click on this? Was I promised something? Are there sibling links that I might want to continue to directly instead of going back and selecting another&amp;nbsp;link?&lt;/p&gt;
&lt;p&gt;This tool would give you additional information about the page you are on, how you got there, and given where you came from, where you might go next. Would this be a sidebar? Overlay content? In a popup? I&amp;#8217;m not&amp;nbsp;sure.&lt;/p&gt;
&lt;p&gt;Example: using this, if I click on a link from Reddit I will be able to see the title of the Reddit post (which usually doesn&amp;#8217;t match the document title), and a link to comments on the page. If I follow a link from Twitter, I&amp;#8217;ll be able to see the Tweet I came&amp;nbsp;from.&lt;/p&gt;
&lt;p&gt;This could be interesting paired with link preview (like a tentative forward). Maybe the mobile browser &lt;a href="https://linkbubble.com/"&gt;Linkbubbles&lt;/a&gt; (now integrated into Brave) has some ideas to&amp;nbsp;offer.&lt;/p&gt;
&lt;p&gt;Technically this will use some of the techniques from Personal History Archive, which tracks link&amp;nbsp;sources.&lt;/p&gt;
&lt;p&gt;This is based on the train of thought I wrote down &lt;a href="https://news.ycombinator.com/item?id=17702206"&gt;in an &lt;span class="caps"&gt;HN&lt;/span&gt; comment&lt;/a&gt; – itself a response to &lt;a href="https://www.reinterpretcast.com/open-hypermedia"&gt;Freeing the Web from the Browser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I want to try this still, and have started a repo &lt;a href="https://github.com/ianb/crossnav"&gt;&lt;code&gt;crossnav&lt;/code&gt;&lt;/a&gt; but haven&amp;#8217;t put anything there yet. I think even some naive approaches could work, just trying to detect the &lt;em&gt;category&lt;/em&gt; of link and the &lt;em&gt;related&lt;/em&gt; links (e.g., on Reddit the category is other submissions, and the related links are things like&amp;nbsp;comments).&lt;/p&gt;
&lt;h2&gt;&lt;a href="#copy-keeper" id="copy-keeper"&gt;Copy&amp;nbsp;Keeper&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="mockup of Copy Keeper" src="/media/mockups/copy-keeper-start.gif"&gt;&lt;/p&gt;
&lt;p&gt;A notebook/logbook that is filled in every time you copy from a web page. When you copy it records&amp;nbsp;(locally):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Text of&amp;nbsp;selection&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; of&amp;nbsp;selection&lt;/li&gt;
&lt;li&gt;Screenshot of the block element around the&amp;nbsp;selection&lt;/li&gt;
&lt;li&gt;Text around&amp;nbsp;selection&lt;/li&gt;
&lt;li&gt;Page &lt;span class="caps"&gt;URL&lt;/span&gt; and nearest&amp;nbsp;anchor/id&lt;/li&gt;
&lt;li&gt;Page&amp;nbsp;title&lt;/li&gt;
&lt;li&gt;Datetime&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This overloads &amp;#8220;copy&amp;#8221; to mean&amp;nbsp;&amp;#8220;remember&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Clips would be searchable, and could be moved back to the clipboard in different forms (text, &lt;span class="caps"&gt;HTML&lt;/span&gt;, image, bibliographical reference, source &lt;span class="caps"&gt;URL&lt;/span&gt;). Maybe clips would be browsable in a sidebar (maybe the sidebar has to be open for copies to be collected), or clips could be browsed in a normal tab&amp;nbsp;(Library-style).&lt;/p&gt;
&lt;p&gt;I created a prototype in &lt;a href="https://github.com/ianb/copy-keeper"&gt;&lt;code&gt;copy-keeper&lt;/code&gt;&lt;/a&gt;. I thought it was interesting and usable, though whether it would actually get any use in practice I don&amp;#8217;t know. It&amp;#8217;s one of those tools that seems handy but requires effort, and as a result doesn&amp;#8217;t get&amp;nbsp;used.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#change-scout" id="change-scout"&gt;Change&amp;nbsp;Scout&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="mockup of Change Scout" src="/media/mockups/change-scout-start.gif"&gt;&lt;/p&gt;
&lt;p&gt;(Wherein I both steal a &lt;a href="https://www.businessinsider.com/mozilla-scout-voice-controlled-browser-2018-6"&gt;name from another team&lt;/a&gt;, and turn it into a&amp;nbsp;category&amp;#8230;)&lt;/p&gt;
&lt;p&gt;Change Scout will monitor a page for you, and notify you when it changes. Did someone edit the document? Was there activity on an issue? Did an article get updated? Put Change Scout to track it and it will tell you what changes and&amp;nbsp;when.&lt;/p&gt;
&lt;p&gt;It would monitor the page inside the browser, so it would have access to personalized and authenticated content. A key task would be finding ways to present changes in an interesting and compact way. In another experiment I tried some very simple change detection tools, and mostly end up frustrated (small changes look very large to naive&amp;nbsp;algorithms).&lt;/p&gt;
&lt;h2&gt;&lt;a href="#popup-tab-switcher" id="popup-tab-switcher"&gt;Popup Tab&amp;nbsp;Switcher&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Tab Switcher mockup" src="/media/mockups/tab-switcher-start.gif"&gt;&lt;/p&gt;
&lt;p&gt;We take the exact &lt;span class="caps"&gt;UI&lt;/span&gt; of the &lt;a href="https://github.com/mozilla/side-view"&gt;Side View&lt;/a&gt; popup, but make it a tab switcher. &amp;#8220;Recent Tabs&amp;#8221; are the most recently focused tabs (weighted somewhat by how long you were on the tab), and then there&amp;#8217;s the complete scrollable list. Clicking on an item simply focuses that tab. You can close tabs without focusing&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;I made a prototype in &lt;a href="https://github.com/ianb/tab-switchr"&gt;&lt;code&gt;tab-switchr&lt;/code&gt;&lt;/a&gt;. In it I also added some controls to close tabs, which was very useful for my periodic tab cleanups. Given that it was a proactive tool, I surprised myself by using it frequently. There&amp;#8217;s work in Firefox to improve this, unrelated to anything I&amp;#8217;ve done. It reminds me a bit of various &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/tree-style-tab/"&gt;Tree-Style Tabs&lt;/a&gt;, which I both like because they make it easier to see my tabs, and dislike because I ultimately am settled on normal top-tabs. The popup interface is less radical but still provides many of the&amp;nbsp;benefits.&lt;/p&gt;
&lt;p&gt;I should probably clean this up a little and publish&amp;nbsp;it.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#personal-podcast" id="personal-podcast"&gt;Personal&amp;nbsp;Podcast&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Create your own &lt;span class="caps"&gt;RSS&lt;/span&gt;&amp;nbsp;feed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you are on a page with some audio source, you can add the audio to your personal&amp;nbsp;feed&lt;/li&gt;
&lt;li&gt;When on an article, you can generate an audio version that will be added to the&amp;nbsp;feed&lt;/li&gt;
&lt;li&gt;You get an &lt;span class="caps"&gt;RSS&lt;/span&gt; feed with a random token to make it private (I don&amp;#8217;t think podcast apps handle authentication well, but this requires&amp;nbsp;research)&lt;/li&gt;
&lt;li&gt;Maybe you can just send/text the link to add it to your preferred podcast&amp;nbsp;app&lt;/li&gt;
&lt;li&gt;If apps don&amp;#8217;t accept &lt;span class="caps"&gt;RSS&lt;/span&gt; links very well, maybe something more complicated would be required. An app that just installs an &lt;span class="caps"&gt;RSS&lt;/span&gt; feed? We want to avoid the feed accidentally ending up in podcast&amp;nbsp;directories.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="#bookmark-manager" id="bookmark-manager"&gt;Bookmark&amp;nbsp;Manager&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&amp;#8217;s a lot of low-rated bookmark managers in addons.mozilla.org and the Chrome Extension store. Let&amp;#8217;s make our own low-rated bookmark&amp;nbsp;manager!&lt;/p&gt;
&lt;p&gt;But seriously, this would anticipate updates to the Library and built-in bookmark manager, which are&amp;nbsp;deficient.&lt;/p&gt;
&lt;p&gt;Some resources/ideas:
* &lt;a href="https://news.ycombinator.com/item?id=17072803"&gt;Comment with a few gripes&lt;/a&gt;
* &lt;a href="https://chrome.google.com/webstore/detail/bookmark-manager/gmlllbghnfkpflemihljekbapjopfjik?hl=en"&gt;Google&amp;#8217;s bookmark manager&lt;/a&gt;
* &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/bookmarks-manager-and-viewer/?src=search"&gt;Bookmark section on addons.mozilla.org&lt;/a&gt;
* &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/bookmarks-organizer/?src=search"&gt;Bookmark organizers on addons.mozilla.org&lt;/a&gt;
* &lt;a href="https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/bookmarks"&gt;Relevant WebExtension&amp;nbsp;APIs&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href="#extended-library" id="extended-library"&gt;Extended&amp;nbsp;Library&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="mockup of the Extended Library" src="/media/mockups/extended-library-start.gif"&gt;&lt;/p&gt;
&lt;p&gt;The &amp;#8220;Library&amp;#8221; in Firefox is the combination history and bookmark browser you get if you use &amp;#8220;Show all bookmarks&amp;#8221; or &amp;#8220;Show all&amp;nbsp;history&amp;#8221;.&lt;/p&gt;
&lt;p&gt;In this idea we present the user with a record of their &lt;strong&gt;assets&lt;/strong&gt;, wherever they&amp;nbsp;are.&lt;/p&gt;
&lt;p&gt;This is like a history view (and would be built from history), but would use heuristics to pick out certain kinds of things: docs you&amp;#8217;ve edited, screenshots you&amp;#8217;ve taken, tickets you&amp;#8217;ve opened, etc. We&amp;#8217;d be trying hard to find long-lived documents in your history, instead of transitional navigation, articles, things you&amp;#8217;ve gotten to from public indexes,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;Automatically determining what should be tagged as a &amp;#8220;library item&amp;#8221; would be the hard part. But I think having an organic view of these items, regardless of underlying service, would be quite valuable. The browser has access to all your services, and it&amp;#8217;s easy to forget what service hosts the thing you are thinking&amp;nbsp;about.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#text-mobile-screenshot" id="text-mobile-screenshot"&gt;Text Mobile&amp;nbsp;Screenshot&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="mockup of Text Mobile Screenshot" src="/media/mockups/text-mobile-screenshot-start.gif"&gt;&lt;/p&gt;
&lt;p&gt;This tool will render the tab in a mobile factor (using the devtools &lt;a href="https://developer.mozilla.org/en-US/docs/Tools/Responsive_Design_Mode"&gt;responsive design mode&lt;/a&gt;), take a full-page screenshot, and text the image and &lt;span class="caps"&gt;URL&lt;/span&gt; to a given number. Probably it would only support texting to&amp;nbsp;yourself.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve looked into this some, and getting the mobile view of a page is not entirely obvious and requires digging around deep in the browser. Devtools does some complicated stuff to display the mobile view. The rest is basic &lt;span class="caps"&gt;UI&lt;/span&gt; flows and operational&amp;nbsp;support.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#email-readable" id="email-readable"&gt;Email&amp;nbsp;Readable&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Emails the Reader Mode version of a site to yourself. In our research, people love to store things in Email, so why&amp;nbsp;not?&lt;/p&gt;
&lt;p&gt;Though it lacks the simplicity of this concept, &lt;a href="https://github.com/mozilla/email-tabs"&gt;Email Tabs&lt;/a&gt; contains this basic functionality. &lt;a href="https://www.emailthis.me/"&gt;Email This&lt;/a&gt; does almost exactly&amp;nbsp;this.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#your-history-everywhere" id="your-history-everywhere"&gt;Your History&amp;nbsp;Everywhere&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An extension that finds and syncs your history between browsers (particularly between Chrome and&amp;nbsp;Firefox).&lt;/p&gt;
&lt;p&gt;This would use the &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/history"&gt;history WebExtension APIs&lt;/a&gt;. Maybe we could create a &lt;a href="https://en.wikipedia.org/wiki/Firefox_Sync"&gt;Firefox Sync&lt;/a&gt; client in Chrome. Maybe it could be a general way to move things between browsers. Actual synchronization is hard, but creating read-only views into the data in another browser profile is much&amp;nbsp;easier.&lt;/p&gt;
&lt;p&gt;Obviously there&amp;#8217;s lots of work to synchronize this data between Firefox properties, and knowing the work involved this isn&amp;#8217;t easy and often involves close work with the underlying platform. Without full access to the platform (like on Chrome) we&amp;#8217;ll have to find ways to simplify the problem in order to make it&amp;nbsp;feasible.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#my-homepage" id="my-homepage"&gt;My&amp;nbsp;Homepage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Everyone (with an &lt;a href="https://www.mozilla.org/en-US/firefox/accounts/"&gt;FxA account&lt;/a&gt;) gets there own homepage on the web. It&amp;#8217;s like Geocities! Or maybe closer to&amp;nbsp;github.io.&lt;/p&gt;
&lt;p&gt;But more seriously, it would be programmatically accessible simple static hosting. Not just for you to write your own homepage, but an open way for applications to publish user content, without those applications themselves turning into hosting platforms. We&amp;#8217;d absorb all the annoyances of hosting content (abuse, copyright, quotas, ops, financing) and let open source developers focus on enabling interesting content generation experiences for users on the open&amp;nbsp;web.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ianbicking.org/blog/2019/01/we-need-open-hosting-platforms.html"&gt;Here&amp;#8217;s a general argument&lt;/a&gt; why I think this would be a useful thing for us to do. &lt;a href="https://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web/"&gt;And another from Les Orchard&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#studying-electron" id="studying-electron"&gt;Studying what Electron does for&amp;nbsp;people&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a proposal for user&amp;nbsp;research:&lt;/p&gt;
&lt;p&gt;Electron apps are being shipped for many services, including services that don&amp;#8217;t require any special system integration. E.g., Slack doesn&amp;#8217;t require anything that a web browser can&amp;#8217;t do. Spotify maybe catches some play/pause keys, but is very close to being a web site. Yet there is perceived value in having an&amp;nbsp;app.&lt;/p&gt;
&lt;p&gt;The user research would focus on cases where the Electron app doesn&amp;#8217;t have any/many special permissions. What gives the app value over the web&amp;nbsp;page?&lt;/p&gt;
&lt;p&gt;The goal would be to understand the motivations and constraints of users, so we could consider ways to make the in-browser experience equally pleasant to the Electron&amp;nbsp;app.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#app-quick-switcher" id="app-quick-switcher"&gt;App quick&amp;nbsp;switcher&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Per my previous item: why do I have an &lt;a href="https://www.irccloud.com/"&gt;IRCCloud&lt;/a&gt; app? Why do people use Slack apps? Maybe it&amp;#8217;s just because they want to be able to switch into and out of those apps&amp;nbsp;quickly.&lt;/p&gt;
&lt;p&gt;A proposed product solution: add a shortcut to any specific (pinned?) tab. Might be autocreated. Using the shortcut when the app is already selected will switch you back to your previous-selected tab. Switching to the tab without the shortcut will display a gentle reminder that the shortcut exists (so you can train yourself to start using&amp;nbsp;it).&lt;/p&gt;
&lt;p&gt;To make it a little more fancy, I thought we might also be able to do a second related &amp;#8220;preview&amp;#8221; shortcut. This would let you peek into the window. I&amp;#8217;m not sure what &amp;#8220;peeking&amp;#8221; means. Maybe we just show a popup with a screenshot of that other&amp;nbsp;window.&lt;/p&gt;
&lt;p&gt;Maybe this should all just overload ⌘1/2/3 (maybe shift-⌘1/etc for peeking). Note these shortcuts do not currently have memory – you can switch &lt;em&gt;to&lt;/em&gt; the first tab with ⌘1, but you can&amp;#8217;t switch&amp;nbsp;back.&lt;/p&gt;
&lt;p&gt;This is one suggested solution to &lt;em&gt;Whatever Electron does for people&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I started some work in &lt;a href="https://github.com/ianb/quick-switch-extension"&gt;&lt;code&gt;quick-switch-extension&lt;/code&gt;&lt;/a&gt;, but keyboard shortcuts were a bit wonky, and I couldn&amp;#8217;t figure out useful additional functionality that would make it fun. Firefox (Nightly?) now has Ctrl-Tab functionality that takes you to recent tabs, mitigating this problem (though it is not nearly as predictable as what I propose&amp;nbsp;here).&lt;/p&gt;
&lt;h2&gt;&lt;a href="#just-save" id="just-save"&gt;Just&amp;nbsp;Save&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just Save saves a page. It&amp;#8217;s like a bookmark. Or a remembering. Or an archive. Or all of those all at&amp;nbsp;once.&lt;/p&gt;
&lt;p&gt;Just Save is a one-click operation, though a popup does show up (similar in function to Pocket) that would allow some additional annotation of your saved&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;We save:
1. Link
2. Title
3. Standard metadata
4. Screenshot
5. Frozen version of page
6. Scroll position
7. The tab history
8. Remember the other open tabs, so if some of them are saved we offer later relations between them
9. Time the page was saved
10. Query terms that led to the&amp;nbsp;page&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s like bookmarks, but purely focused on saving, while bookmarks do double-duty as a navigational tool. The tool encourages after-the-fact discovery and organization, not at-the-time-of-save&amp;nbsp;choices.&lt;/p&gt;
&lt;p&gt;And of course there&amp;#8217;s a way to find and manage your saved pages. This idea needs more exploration of &lt;em&gt;why&lt;/em&gt; you would return to a page or piece of information, and thus what we&amp;#8217;d want to expose and surface from your history. We&amp;#8217;ve &lt;a href="https://blog.mozilla.org/ux/2015/02/save-share-revisit/"&gt;done research&lt;/a&gt;, but it&amp;#8217;s really just a&amp;nbsp;start.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#open-search-combined-search" id="open-search-combined-search"&gt;Open Search Combined&amp;nbsp;Search&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have several &lt;a href="https://dxr.mozilla.org/mozilla-central/source/browser/components/search/searchplugins"&gt;open search providers&lt;/a&gt;. How many exist out there? How many could we find in&amp;nbsp;history?&lt;/p&gt;
&lt;p&gt;In theory &lt;a href="https://developer.mozilla.org/en-US/docs/Web/OpenSearch"&gt;Open Search is an &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; where a user could do personalized search across many properties, though I&amp;#8217;m not sure if any sufficient number of sites has enabled&amp;nbsp;it.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#notes-commander" id="notes-commander"&gt;Notes&amp;nbsp;Commander&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&amp;#8217;s &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/notes-by-firefox/"&gt;Notes&lt;/a&gt;, but with &lt;a href="https://api.slack.com/slash-commands"&gt;slash commands&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I other words it&amp;#8217;s a document, but if you complete a line that begins with a &lt;code&gt;/&lt;/code&gt; then it will try to execute that command, appending or overwriting from that&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;So for instance &lt;code&gt;/timestamp&lt;/code&gt; just replaces itself with a&amp;nbsp;timestamp.&lt;/p&gt;
&lt;p&gt;Maybe &lt;code&gt;/page&lt;/code&gt; inserts the currently active tab. &lt;code&gt;/search foo&lt;/code&gt; puts search results into the document, but as editable (and followable) links. &lt;code&gt;/page save&lt;/code&gt; freezes the page as one big data link, and inserts that link into the&amp;nbsp;note.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a little like Slack, but in document form, and with the browser as the context instead of a messaging platform. It&amp;#8217;s a little like a notebook programming interface, but less structured and more&amp;nbsp;document-like.&lt;/p&gt;
&lt;p&gt;The ability to edit the &lt;em&gt;output&lt;/em&gt; of commands is particularly interesting to me, and represents the kind of ad hoc information organizing that we all do&amp;nbsp;regularly.&lt;/p&gt;
&lt;p&gt;I experimented some with this in Notes, and got it working a little bit, but working with CKEditor (that Notes is built on) was just awful and I couldn&amp;#8217;t get anything to work well. Notes also has a very limited set of supported content (no images or links), which was problematic. Maybe it&amp;#8217;s worth doing it from scratch (with &lt;a href="http://prosemirror.net/"&gt;ProseMirror&lt;/a&gt; or &lt;a href="https://github.com/ianstormtaylor/slate"&gt;Slate&lt;/a&gt;?)&lt;/p&gt;
&lt;p&gt;After I tried to mock this up, I realized that the underlying model is much too unclear in my mind. What&amp;#8217;s this for? &lt;em&gt;When&lt;/em&gt; is it for? What would a list of commands look&amp;nbsp;like?&lt;/p&gt;
&lt;p&gt;Another thing I realized while attempting a mockup is that there should be a rich but normalized way to represent pages and URLs and so forth. Often you&amp;#8217;ll be referring to URLs of pages that are already open. You may want to open sets of pages, or see immediately which URLs are already open in a tab. A frozen version of a page should be clearly linked to the source of that page, which of course could be an open tab. There&amp;#8217;s a lot of pieces to fit together here, both common nouns and verbs, all of which interact with the browser session&amp;nbsp;itself.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#automater" id="automater"&gt;Automater&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Automation and scripting for your browser: make demonstrations for your browser, give it a name, and you have a repeatable&amp;nbsp;script.&lt;/p&gt;
&lt;p&gt;The scripts will happen in the browser itself, not via any backend or scraping tool. In case of failed expectations or changed sites, the script will halt and tell the&amp;nbsp;user.&lt;/p&gt;
&lt;p&gt;Scripts could be as simple as &amp;#8220;open a new tab pointing to this page every weekday at 9am&amp;#8221;, or could involve clipping information, or just doing a navigational pattern before presenting the page to a&amp;nbsp;user.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a huge amount of previous work in this area. I think the challenge here is to create something that &lt;em&gt;doesn&amp;#8217;t&lt;/em&gt; look like a programming language displayed in a&amp;nbsp;table.&lt;/p&gt;
&lt;h2&gt;&lt;a href="#sidekick" id="sidekick"&gt;Sidekick&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sidekick is a sidebar interface to anything, or everything, contextually. Some things it might&amp;nbsp;display:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Show you the state of your&amp;nbsp;clipboard&lt;/li&gt;
&lt;li&gt;Show you how you got to the current tab (similar to &lt;a href="#navigational-breadcrumbs"&gt;Navigational Breadcrumbs&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Show you other items from the search query that kicked off the current&amp;nbsp;tab&lt;/li&gt;
&lt;li&gt;Give quick navigation to nearby pages, given the referring page (e.g., the next link, or next set of&amp;nbsp;links)&lt;/li&gt;
&lt;li&gt;Show you buttons to activate other tabs you are likely to switch to from the current&amp;nbsp;tab&lt;/li&gt;
&lt;li&gt;Show shopping recommendations or other content-aware&amp;nbsp;widgets&lt;/li&gt;
&lt;li&gt;Let you save little tidbits (text, links, etc), like an extended clipboard or&amp;nbsp;notepad&lt;/li&gt;
&lt;li&gt;Show notifications you&amp;#8217;ve recently&amp;nbsp;received&lt;/li&gt;
&lt;li&gt;Peek into other tabs, or load them inline somewhat like &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/side-view/"&gt;Side&amp;nbsp;View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Checklists and&amp;nbsp;todos&lt;/li&gt;
&lt;li&gt;Copy a bunch of links into the sidebar, then treat them like a&amp;nbsp;todo/queue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Possibly it could be treated like an extensible widget&amp;nbsp;holder.&lt;/p&gt;
&lt;p&gt;From another perspective: this is like a continuous contextual feature recommender. I.e., it would try to answer the question: what&amp;#8217;s the feature you could use right&amp;nbsp;now?&lt;/p&gt;
&lt;h2&gt;&lt;a href="#timed-repetition" id="timed-repetition"&gt;Timed&amp;nbsp;Repetition&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Generally in order to commit something to long-term memory you must revisit information later, ideally long enough that it&amp;#8217;s a&amp;nbsp;struggle.&lt;/p&gt;
&lt;p&gt;Is anything we see in a browser worth committing to long-term memory? Sometimes it feels like nothing is worth remembering, but that&amp;#8217;s a kind of nihilism based on the shitty aspects of typical web browsing&amp;nbsp;behavior.&lt;/p&gt;
&lt;p&gt;The interface would require some positive assertion: I want to know this. Probably you&amp;#8217;d want to highlight the thing you&amp;#8217;d &amp;#8220;know&amp;#8221;. Then, later, we&amp;#8217;d want to come up with some challenge. We don&amp;#8217;t need a &amp;#8220;real&amp;#8221; test that is verified by the browser, instead we simply need to ask some related question, then the user can say if they got it right or not (or remembered it or&amp;nbsp;not).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More information on the general technique in the &lt;a href="https://en.wikipedia.org/wiki/Spaced_repetition"&gt;Spaced Repetition Wikipedia article&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Incremental_reading"&gt;Incremental Reading&lt;/a&gt; is an approach to information consumption paired with flashcard&amp;nbsp;review.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.ankiweb.net/"&gt;Anki&lt;/a&gt; is the most prominent open source software in this area.  Oddly while there is a lot of WebExtension-based intake software for it, the actual testing is primarily done in a native&amp;nbsp;app.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sansforgetica.rmit/"&gt;A bizarre hard-to-read font&lt;/a&gt; meant to aid in&amp;nbsp;memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="#reader-mode-improvements" id="reader-mode-improvements"&gt;Reader Mode&amp;nbsp;improvements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Reader mode is a bit spartan. Maybe it could be a bit&amp;nbsp;nicer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pick up some styles or backgrounds from the hosting&amp;nbsp;site&lt;/li&gt;
&lt;li&gt;Display images or other media differently or more&amp;nbsp;prominently&lt;/li&gt;
&lt;li&gt;Add back some markup or layout that Readability&amp;nbsp;erases&lt;/li&gt;
&lt;li&gt;Apply to some other kinds of sites that aren&amp;#8217;t articles (e.g., a video&amp;nbsp;site)&lt;/li&gt;
&lt;li&gt;A multicolumn version like &lt;a href="https://anoved.github.io/mcreadability/"&gt;McReadability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href="#digest-mode" id="digest-mode"&gt;Digest&amp;nbsp;Mode&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Inspired by &lt;a href="http://www.fullhn.com/"&gt;Full Hacker News&lt;/a&gt; (&lt;a href="https://news.ycombinator.com/item?id=18132281"&gt;comments&lt;/a&gt;): take a bunch of links (typically articles) and concatenate their content into one&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;Implicitly this requires Reader Mode parsing of the pages, though that is relatively cheap for &amp;#8220;normal&amp;#8221; articles. Acquiring a list of pages is somewhat less clear. Getting a list of pages is a kind of news/&lt;span class="caps"&gt;RSS&lt;/span&gt; question. Taking a page &lt;em&gt;like&lt;/em&gt; Hacker News and figuring out what the &amp;#8220;real&amp;#8221; links are is another approach that may be interesting. Lists of related links are everywhere, yet hard to formally&amp;nbsp;define.&lt;/p&gt;
&lt;p&gt;This would work very nicely with complementary text&amp;nbsp;summarization.&lt;/p&gt;
&lt;p&gt;Open question: is this actually an interesting or useful way to consume&amp;nbsp;information?&lt;/p&gt;
&lt;h2&gt;&lt;a href="#firefox-for-x" id="firefox-for-x"&gt;Firefox for&amp;nbsp;X&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There&amp;#8217;s an underlying concept here worth&amp;nbsp;explaining:&lt;/p&gt;
&lt;p&gt;Feature develop receives a lot of skepticism. And it&amp;#8217;s reasonable: there&amp;#8217;s a lot of conceit in a feature, especially embedded in a large product. Are people going to use a product or not because of some little feature? Or maybe the larger challenge: can some feature actually change behavior? Every person has their own thing going on, people aren&amp;#8217;t interested in our theories, and really not that many people are interested in browsers. Familiar functionality – the back button, bookmarks, the &lt;span class="caps"&gt;URL&lt;/span&gt; bar, etc. – are what they expect, what they came for, and what they will gravitate to. Everything I&amp;#8217;ve written so far in this list are things &lt;em&gt;people won&amp;#8217;t actually use&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A browser is particularly problematic because it&amp;#8217;s so universal. It&amp;#8217;s for sites and apps and articles. It&amp;#8217;s for the young and the elderly, the experienced and not. It&amp;#8217;s used for serious things, it&amp;#8217;s used for concentration, and it&amp;#8217;s used for dumb things and to avoid concentrating. How can you build a feature for everyone, targeting anything they might do? And if you build something, how can a person trust a new feature is really for &lt;em&gt;them&lt;/em&gt;, not some other person? People are right to be skeptical of the&amp;nbsp;new!&lt;/p&gt;
&lt;p&gt;But we also know that most people regularly use more than one browser. Some people use Chrome for personal stuff, and Firefox for work. Some people do the exact opposite. Some people do their banking and finance in a specific browser. Some use a specific browser just for watching&amp;nbsp;videos.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Which&lt;/em&gt; browser a person uses for which task is seemingly random. Maybe they were told to use a specific browser for one task, and then the other browser became the fallback. Maybe they once heard somewhere once that one browser was more secure. Maybe flash seemed broken on one browser when they were watching a video, and now a pattern has been&amp;nbsp;set.&lt;/p&gt;
&lt;p&gt;This has long seemed like an opportunity to me. Market a browser that actually claims to be the right browser for some of these purposes! Firefox has &lt;a href="https://www.mozilla.org/en-US/firefox/developer/"&gt;Developer Edition&lt;/a&gt; and it&amp;#8217;s been reasonably&amp;nbsp;successful.&lt;/p&gt;
&lt;p&gt;This offers an opportunity for both Mozilla and Firefox users to agree on &lt;strong&gt;purpose&lt;/strong&gt;. What is Firefox for? Everything! Is this feature meant for &lt;em&gt;you&lt;/em&gt;? Unlikely! In a purpose-built browser both sides can agree what it&amp;#8217;s trying to&amp;nbsp;accomplish.&lt;/p&gt;
&lt;p&gt;This idea often gets poo-pooed for how much work it is, but I think it&amp;#8217;s simpler than it seems. Here&amp;#8217;s what a &amp;#8220;new browser&amp;#8221;&amp;nbsp;means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Something you can find and download from its own page or&amp;nbsp;site&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s Firefox, but uses its own &lt;a href="https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data"&gt;profile&lt;/a&gt;, keeping history/etc separate from other browser instances (including&amp;nbsp;Firefox)&lt;/li&gt;
&lt;li&gt;It has its own name and icon, and probably a theme to make it obvious what browser you are&amp;nbsp;in&lt;/li&gt;
&lt;li&gt;It comes with some browser extensions and prefs changed, making it more appropriate for the proposed use&amp;nbsp;case&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The approach is heavy on marketing and build tools, and light on actual browser&amp;nbsp;engineering.&lt;/p&gt;
&lt;p&gt;I also have gotten frequent feedback that &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/"&gt;Multi-Account Containers&lt;/a&gt; should solve all these use cases, but that gets everything backwards. People already understand multiple browsers, and having completely new entry points to bring people to Firefox is a feature, not a&amp;nbsp;bug.&lt;/p&gt;
&lt;p&gt;Sadly I think the time for this has passed, maybe in the market generally or maybe just for Mozilla. It would have been a very different approach to the&amp;nbsp;browser.&lt;/p&gt;
&lt;p&gt;Some of us in the Test Pilot team had some good brainstorming around actual concepts too, which is where I actually get excited about the&amp;nbsp;ideas:&lt;/p&gt;
&lt;h3&gt;&lt;a href="#firefox-study" id="firefox-study"&gt;Firefox&amp;nbsp;Study&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For students,&amp;nbsp;studying.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integrate note-taking&amp;nbsp;tools&lt;/li&gt;
&lt;li&gt;Create project and class-based organizational tools, helping to organize tabs, bookmarks, and&amp;nbsp;notes&lt;/li&gt;
&lt;li&gt;Tools to document and organize&amp;nbsp;deadlines&lt;/li&gt;
&lt;li&gt;Citation&amp;nbsp;generators&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&amp;#8217;t know &lt;em&gt;what&lt;/em&gt; to do with online lectures and video, but it feels like there&amp;#8217;s some meaningful improvements to be done in that space. Video-position-aware notetaking&amp;nbsp;tools?&lt;/p&gt;
&lt;p&gt;I think the intentionality of opening a browser to study is a good thing. iPads are somewhat popular in education, and I suspect part of that is having a device that isn&amp;#8217;t built around multitasking, and using an iPad means stepping away from regular&amp;nbsp;computing.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#firefox-media" id="firefox-media"&gt;Firefox&amp;nbsp;Media&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To watch videos. This requires very few features, but benefits from just being a separate profile, history, and&amp;nbsp;icon.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a small number of features that might be&amp;nbsp;useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cross-service search (like &lt;a href="http://www.canistream.it/"&gt;Can I Stream.it&lt;/a&gt; or &lt;a href="https://www.justwatch.com/"&gt;JustWatch&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Search defaults to video&amp;nbsp;search&lt;/li&gt;
&lt;li&gt;Cross-service&amp;nbsp;queue&lt;/li&gt;
&lt;li&gt;Quick service-based&amp;nbsp;navigation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I realize it&amp;#8217;s a lot like Roku in an&amp;nbsp;app.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#firefox-for-finance" id="firefox-for-finance"&gt;Firefox for&amp;nbsp;Finance&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is really just about&amp;nbsp;security.&lt;/p&gt;
&lt;p&gt;Funny story: people say they value security very highly. But if Mozilla wants to make changes in Firefox that increase security but break some sites – particularly insecure sites – people will then stop using Firefox. They value security highly, but still just below &lt;em&gt;anything at all breaking&lt;/em&gt;. This is very frustrating for&amp;nbsp;us.&lt;/p&gt;
&lt;p&gt;At the same time, I kind of get it. I&amp;#8217;m dorking around on the web and I click through to some dumb site, and I get a big ol&amp;#8217; warning or a blank page or some other weirdness. I didn&amp;#8217;t even care about the page or its security, and here my browser is trying to make me&amp;nbsp;care.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s true some of the time, but not others. If you are using Firefox for Finance, or Firefox Super Secure, or whatever we might call it, then you really do&amp;nbsp;care.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a second kind of security implied here as well: security from snooping eyes and on shared computers. &lt;a href="https://support.mozilla.org/en-US/kb/use-master-password-protect-stored-logins"&gt;Firefox Master Password&lt;/a&gt; is a useful feature here. Generally there&amp;#8217;s an opportunity for secure data at&amp;nbsp;rest.&lt;/p&gt;
&lt;p&gt;This is also a vehicle for education in computer security, with an audience that we know is&amp;nbsp;interested.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#firefox-low-bandwidth" id="firefox-low-bandwidth"&gt;Firefox Low&amp;nbsp;Bandwidth&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Maybe we work with proxy services. Or just do lots of content blocking. In this browser we let content break (and give a control to load the full content), so long as you start out&amp;nbsp;compact.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cache content that isn&amp;#8217;t really supposed to be&amp;nbsp;cached&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t load some kinds of&amp;nbsp;content&lt;/li&gt;
&lt;li&gt;Block fonts and other seemingly-unimportant&amp;nbsp;content&lt;/li&gt;
&lt;li&gt;Monitoring tools to see where bandwidth usage is&amp;nbsp;going&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="#firefox-for-kids" id="firefox-for-kids"&gt;Firefox for&amp;nbsp;Kids&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sadly making things for kids is hard, because you are obliged to do all sorts of things if you claim to target children, but you don&amp;#8217;t have to do anything if kids just happen to use your&amp;nbsp;tool.&lt;/p&gt;
&lt;p&gt;There is an industry of tools in this area that I don&amp;#8217;t fully understand, and I&amp;#8217;d want to research before thinking about a feature list. But it seems like it comes down to three&amp;nbsp;things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blocking problematic&amp;nbsp;content&lt;/li&gt;
&lt;li&gt;Encouraging positive&amp;nbsp;content&lt;/li&gt;
&lt;li&gt;Monitoring tools for&amp;nbsp;parents&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;#8217;s something very uninspiring about that list, it feels like it&amp;#8217;s long on negativity and short on positive engagement. Coming up with an answer to that is not a simple&amp;nbsp;task.&lt;/p&gt;
&lt;h3&gt;&lt;a href="#firefox-calm" id="firefox-calm"&gt;Firefox&amp;nbsp;Calm&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Inspired by a bunch of&amp;nbsp;things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://humanetech.com/"&gt;Humane&amp;nbsp;Tech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.getsiempo.com/"&gt;Siempo&lt;/a&gt; (&lt;a href="https://techcrunch.com/2018/05/19/siempos-new-app-will-break-your-smartphone-addiction/"&gt;some coverage&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/grayscale-the-web-save-si/mblmpdpfppogibmoobibfannckeeleag"&gt;Grayscale&amp;nbsp;extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/text-mode/adelhekhakakocomdfejiipdnaadiiib"&gt;Text only mode&amp;nbsp;extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sticky-reader-mode"&gt;Sticky Reader&amp;nbsp;Mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What would a calm Firefox experience look like? Or maybe it would be better to think about a calm presentation of the web. At some point I wrote out some short&amp;nbsp;pitches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read without distraction: Read articles like they are articles, not interactive (and manipulative)&amp;nbsp;experiences.&lt;/li&gt;
&lt;li&gt;Stay focused on one thing at a time: Instead of a giant list of tabs and alerts telling you what we aren&amp;#8217;t doing, automatically focus on the one thing you are doing right&amp;nbsp;now.&lt;/li&gt;
&lt;li&gt;Control your notifications: Instead of letting any site poke at you for any reason, notifications are kept to a minimum and&amp;nbsp;batched.&lt;/li&gt;
&lt;li&gt;Focused writing: When you need to focus on what you are saying, not what people are saying to you, enter focused writing&amp;nbsp;mode.&lt;/li&gt;
&lt;li&gt;Get updates without falling down a news hole: Avoid clickbait, don&amp;#8217;t reload pages, just see updates from the sites you trust (relates to &lt;a href="#your-front-page"&gt;Your Front Page&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Pomodoro: let yourself get distracted&amp;#8230; but only a little bit. The Pomodoro technique helps you switch between periods of focused work and letting yourself&amp;nbsp;relax&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t even ask: Do you want notifications from the news site you visited once? Do you want videos to autoplay? Of course not, and we&amp;#8217;ll stop even&amp;nbsp;asking.&lt;/li&gt;
&lt;li&gt;Suggestion-free browsing: Every page you look at isn&amp;#8217;t an invitation to tell you what you should look at next. Remove suggested content, and do what &lt;span class="caps"&gt;YOU&lt;/span&gt; want to do next. (&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/remove-youtube-s-suggestions/"&gt;YouTube example&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;a href="#conclusion" id="conclusion"&gt;Concluding&amp;nbsp;thoughts&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Not just the conclusion of this list, the conclusion of my work in this&amp;nbsp;area&amp;#8230;&lt;/p&gt;
&lt;p&gt;Some challenges in the design&amp;nbsp;process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Asking someone to &lt;em&gt;do&lt;/em&gt; something new is hard, and unlikely to happen. My previous post (&lt;a href="http://www.ianbicking.org/blog/2019/01/overengaged-knowledge-worker.html"&gt;The Over-engaged Knowledge Worker&lt;/a&gt;) relates to this&amp;nbsp;tension.&lt;/li&gt;
&lt;li&gt;&amp;#8230; and yet a &amp;#8220;problem&amp;#8221; isn&amp;#8217;t enough to get someone to do something&amp;nbsp;either.&lt;/li&gt;
&lt;li&gt;If someone is consciously &lt;em&gt;and specifically&lt;/em&gt; doing some task, then there&amp;#8217;s an&amp;nbsp;opportunity.&lt;/li&gt;
&lt;li&gt;Creating wholistic solutions is unwelcome, unintuitively each thing that adds to the size of a solution &lt;em&gt;diminishes&lt;/em&gt; from the breadth of problems the solution can&amp;nbsp;solve.&lt;/li&gt;
&lt;li&gt;&amp;#8230; and yet, abstract solutions without any clear suggestion of what they solve aren&amp;#8217;t great&amp;nbsp;either!&lt;/li&gt;
&lt;li&gt;Figuring out how to package functionality is a big&amp;nbsp;deal.&lt;/li&gt;
&lt;li&gt;Approaches that increase the density of information or choices are themselves somewhat&amp;nbsp;burdensome.&lt;/li&gt;
&lt;li&gt;&amp;#8230; and yet context-sensitive approaches are unpredictable and distracting compared to consistent (if dense)&amp;nbsp;functionality.&lt;/li&gt;
&lt;li&gt;I still believe there&amp;#8217;s a wealth of material in the &lt;em&gt;content&lt;/em&gt; of the pages people encounter. But it&amp;#8217;s irregular and hard to understand, it takes concerted and long-term effort to do something&amp;nbsp;here.&lt;/li&gt;
&lt;li&gt;Lots of the easy stuff, the roads well traveled, are still hard for a lot of people. Maybe this can be fixed by optimizing current &lt;span class="caps"&gt;UI&lt;/span&gt;&amp;#8230; but I think there&amp;#8217;s still room for novel improvements to old&amp;nbsp;ideas.&lt;/li&gt;
&lt;li&gt;User research is a really great place to start, but it&amp;#8217;s not very prescriptive. It&amp;#8217;s mostly problem-finding, not&amp;nbsp;solution-finding.&lt;/li&gt;
&lt;li&gt;There&amp;#8217;s some kinds of user research I wish I had access to, specifically really low level analysis of behavior. What&amp;#8217;s in someone&amp;#8217;s mind when they open a new tab, or reuse one? In what order do they scan the &lt;span class="caps"&gt;UI&lt;/span&gt;? What are mental models of a &lt;span class="caps"&gt;URL&lt;/span&gt;, of pages and how they change, in what order to people compose (mentally and physically) things they want to share&amp;#8230; it feels like it can go on forever, and there would be a ton of detail in the results, but given all the other constraints these insights feel&amp;nbsp;important.&lt;/li&gt;
&lt;li&gt;There&amp;#8217;s so many variables in an experiment, that it&amp;#8217;s hard to know what failures really means. Every experiment that offers a novel experience involves several choices, and any one choice can cause the experiment to&amp;nbsp;fail.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As Test Pilot comes to an end, I do find myself asking: is there room for qualitative improvements in desktop browser &lt;span class="caps"&gt;UI&lt;/span&gt;? Desktop computing is waning. User expectations of a browser are calcified. The only time people make a choice is when something breaks, and the only way to win is to not break anything and hope you competitor &lt;em&gt;does&lt;/em&gt; break&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;So, is there room for improvement? Of course there is! The millions of hours spent every day in Firefox alone&amp;#8230; &lt;em&gt;this is actually important&lt;/em&gt;. Yes, a lot of things are at a local maximum, and we can A/B test little tweaks to get some suboptimal parts to &lt;em&gt;their&lt;/em&gt; local maximum. But I do not believe in any way that the browsers we know are the optimal container. The web is bigger than browsers, bigger than desktop or mobile or &lt;span class="caps"&gt;VR&lt;/span&gt;, and a user agent can do unique things beyond any site or&amp;nbsp;app.&lt;/p&gt;
&lt;p&gt;And&amp;nbsp;yet&amp;#8230;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=19304802"&gt;Hack News Comments&lt;/a&gt; if that&amp;#8217;s your&amp;nbsp;thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script src="/media/mockups/loader.js"&gt;&lt;/script&gt;
&lt;style&gt;
  img.paused {
    opacity: 0.5;
  }
  figure img {
    max-width: 100%;
  }
  body #main-container li {
    margin-bottom: 0.4em !important;
  }
&lt;/style&gt;</content><category term="mozilla"></category></entry><entry><title>The Over-engaged Knowledge Worker</title><link href="https://ianbicking.org/blog/2019/01/overengaged-knowledge-worker.html" rel="alternate"></link><published>2019-01-28T00:00:00-06:00</published><updated>2019-01-28T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2019-01-28:/blog/2019/01/overengaged-knowledge-worker.html</id><summary type="html">&lt;p&gt;I recently listened to a discussion of knowledge work in the browser. Along the way people imagined idealized workflows and the tools that could enable them. This result felt familiar from concept videos since forever (such as &lt;a href="https://www.youtube.com/watch?v=AYMA5W8b1zY"&gt;this old Mozilla concept video&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;The result featured lots of jet-setting highly engaged …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently listened to a discussion of knowledge work in the browser. Along the way people imagined idealized workflows and the tools that could enable them. This result felt familiar from concept videos since forever (such as &lt;a href="https://www.youtube.com/watch?v=AYMA5W8b1zY"&gt;this old Mozilla concept video&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;The result featured lots of jet-setting highly engaged people deep in collaboration. For instance: Joe sends his friend a mortgage refinancing proposal to get&amp;nbsp;feedback.&lt;/p&gt;
&lt;p&gt;None of my friends have ever just blasted a mortgage refinancing proposal to me for a quick review. Thank god. But I&amp;#8217;ve gotten similar requests, we all have, and nobody wants to receive these things. Usually the request sits guiltily in my inbox, mocking me and my purported friendship. If it&amp;#8217;s job-related I will eventually get to even the work I loathe, but there&amp;#8217;s always a particular pile of work that haunts me. This is not&amp;nbsp;engagement.&lt;/p&gt;
&lt;p&gt;This is the reality of knowledge work that none of these conceptualizations address: it&amp;#8217;s hard (in very specific ways), some of it we don&amp;#8217;t want to do, and the work we don&amp;#8217;t want to do piles up and becomes dominant simply because it remains&amp;nbsp;undone.&lt;/p&gt;
&lt;p&gt;Our real work looks different than how we idealize our work: work items are smaller, less impactful, higher-touch, and collaboration spreads work out over time, decreasing personal engagement. We also imagine situations where people are much more actively engaged as a total percentage of their interactions, while we spend a lot of time passively receiving information, or simply deciding: what, if anything, should I react&amp;nbsp;to?&lt;/p&gt;
&lt;h3&gt;So then&amp;nbsp;what?&lt;/h3&gt;
&lt;p&gt;So how might we approach idea generation around knowledge work without idealizing the knowledge&amp;nbsp;worker?&lt;/p&gt;
&lt;p&gt;We could still go too far into acceptance. We&amp;#8217;d build &lt;a href="https://www.arkadium.com/newsroom/microsoft-solitaire-most-boring-game-tops-100-million-users/"&gt;solitaire&lt;/a&gt; into the browser, the ultimate knowledge worker tool. It&amp;#8217;s what people want! People shouldn&amp;#8217;t have to pick up their phones to be distracted, we should keep the web as the universal distraction platform it was always meant to be. Oops, I make the mistake of thinking phone-vs-web, rather we should focus on providing &lt;em&gt;distraction continuity&lt;/em&gt; across all your platforms. Sorry, this sarcasm is becoming&amp;nbsp;uncomfortable&amp;#8230;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not sure a distraction tool is wrong. Giving people a mental break when they want it, &lt;em&gt;but without trying to capture those people&lt;/em&gt;, could be positive. The web is full of mental breaks, but they aren&amp;#8217;t &amp;#8220;breaks&amp;#8221;, they are manufactured to hold onto attention long after the needed break has&amp;nbsp;finished.&lt;/p&gt;
&lt;p&gt;But if we don&amp;#8217;t build engagement tools (because people aren&amp;#8217;t looking to be more engaged) and we don&amp;#8217;t build distraction tools (because a web browser is already a sufficiently good distraction tool), what do we&amp;nbsp;build?&lt;/p&gt;
&lt;p&gt;I think there&amp;#8217;s more opportunity in accepting the mentally fatigued and distracted state of knowledge workers, and working &lt;em&gt;from&lt;/em&gt; that instead of against it. With that in mind I&amp;#8217;d break down the problem into a few&amp;nbsp;categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reduce the drain of knowledge work, so that distractions are less&amp;nbsp;necessary.&lt;/li&gt;
&lt;li&gt;Support positive mental&amp;nbsp;relaxation.&lt;/li&gt;
&lt;li&gt;Support continuity of mental effort; make it easier to &lt;em&gt;get back on track&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And I&amp;#8217;d leave&amp;nbsp;out:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Efficiency: usually efficiency means speed, number of steps, integrations, and so it calls for higher engagement. We care about efficiency, but only the &lt;em&gt;efficient use of mental resources&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Blocking distractions: people want something out of distractions, and while we might aspire to replace distractions it&amp;#8217;s probably unsustainable to block those distractions. Blocking is like starting an exercise plan by getting rid of all your&amp;nbsp;chairs.&lt;/li&gt;
&lt;li&gt;Communication and collaboration: even if distractions don&amp;#8217;t break your continuity, collaboration will! Collaboration is obviously an interesting space, but you can&amp;#8217;t do anything without pulling your collaborators into yet another tool. Trying to convert other people to a new way of working is not mentally&amp;nbsp;relaxing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&amp;#8217;s where I throw my hands up and admit that I don&amp;#8217;t have solutions to these problems, just a new problem&amp;nbsp;statement.&lt;/p&gt;
&lt;p&gt;But it does point in some different directions: how do we support a continuity of intention across a long task? In the context of the browser, how do we contextualize pages and interactions inside some abstract task? How do we clarify context? If the human is forced to multitask, can the multitasking tools be grounding instead of stretching us&amp;nbsp;out?&lt;/p&gt;
&lt;p&gt;The resulting exploration is not one that constructs an enviable user. It&amp;#8217;s a user with virtual piles of papers on their desk with a &lt;span class="caps"&gt;PB&lt;/span&gt;&amp;amp;J forgetten a third of the way down, with a People Magazine placed sneakily inside an important report, with a pile of mail and every single piece is marked Urgent: Open Immediately. People aren&amp;#8217;t always &lt;a href="https://www.curbed.com/2016/7/18/12215158/always-be-knolling-tom-sachs-knoll"&gt;knolling&lt;/a&gt;&amp;#8230; but maybe we could&amp;nbsp;be.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=19072680"&gt;Hacker News comments&lt;/a&gt; for the&amp;nbsp;curious.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="mozilla"></category></entry><entry><title>We Need Open Hosting Platforms</title><link href="https://ianbicking.org/blog/2019/01/we-need-open-hosting-platforms.html" rel="alternate"></link><published>2019-01-23T00:00:00-06:00</published><updated>2019-01-23T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2019-01-23:/blog/2019/01/we-need-open-hosting-platforms.html</id><summary type="html">&lt;p&gt;In &lt;a href="https://chrishardie.com/2018/04/rebuilding-open-web/"&gt;Bringing people back to the open web&lt;/a&gt; Chris&amp;nbsp;states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But most users don&amp;#8217;t care about the principles or implementation of an open web, at least not in those terms. Most people don&amp;#8217;t see themselves as ever having left the open web behind, and if you told them …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;In &lt;a href="https://chrishardie.com/2018/04/rebuilding-open-web/"&gt;Bringing people back to the open web&lt;/a&gt; Chris&amp;nbsp;states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But most users don&amp;#8217;t care about the principles or implementation of an open web, at least not in those terms. Most people don&amp;#8217;t see themselves as ever having left the open web behind, and if you told them to try to get back to it, they wouldn&amp;#8217;t know what to do or why it was&amp;nbsp;worthwhile.&lt;/p&gt;
&lt;p&gt;No matter how much it might be in their long-term self interest, it&amp;#8217;s not up to the casual Internet user to figure that out. &lt;strong&gt;Instead, it&amp;#8217;s up to the developers, designers, entrepreneurs and technology leaders to create a version of the open web that also happens to be the best version of the&amp;nbsp;web.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think he&amp;#8217;s starting with a reasonable, positive call: we can&amp;#8217;t just decry the state of things, we have to make things. And we have to make &lt;em&gt;good&lt;/em&gt; things. The open web &lt;em&gt;should&lt;/em&gt; be&amp;nbsp;better.&lt;/p&gt;
&lt;p&gt;I fear a moralizing approach to advocacy pushes people away, makes it &lt;em&gt;harder&lt;/em&gt; for people to care about the values we are espousing. When we frame something as depressing or hopeless we encourage people to pay attention to other things. So yes: the open web should be the best&amp;nbsp;web.&lt;/p&gt;
&lt;p&gt;But ignoring my advice, I&amp;#8217;m going to point out a depressing fact: open source &lt;em&gt;products&lt;/em&gt; aren&amp;#8217;t successful. Open source is not in line to be part of any&amp;nbsp;solution.&lt;/p&gt;
&lt;p&gt;Open Source has done a lot for developers, but it&amp;#8217;s not present on the surface of the web – the surface that people interact with, and that defines the &amp;#8220;open web&amp;#8221;. Actual sites. Actual interfaces. Open source is used everywhere &lt;em&gt;except&lt;/em&gt; at the point of interaction with actual&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;Why is open source so&amp;nbsp;absent?&lt;/p&gt;
&lt;p&gt;One big problem: the web isn&amp;#8217;t software. The web is deployed software, running on&amp;nbsp;servers.&lt;/p&gt;
&lt;p&gt;If, as a creator of software, I want to share what I&amp;#8217;ve done with everyone on the web – not just with other developers – then I actually have to deploy that software somewhere. But if maintaining open source is difficult and unsustainable, hosting that software is even&amp;nbsp;worse.&lt;/p&gt;
&lt;p&gt;I could create a whole company to support the service. But at that point I&amp;#8217;m not a developer, I&amp;#8217;m an &amp;#8220;entrepreneur&amp;#8221;. That&amp;#8217;s more of a pain in the ass than giving stuff&amp;nbsp;away.&lt;/p&gt;
&lt;p&gt;For open source developers to build the open web we need a platform that allows us to actually give the tools we&amp;#8217;ve created to everyone. Because of the hosting problem all our open source work is mediated through commercial entities, and we have this world where the web is very much built on open source, and yet that does nothing to make it more&amp;nbsp;open.&lt;/p&gt;
&lt;p&gt;An open hosting platform is &lt;em&gt;not&lt;/em&gt; a specification, it is &lt;em&gt;not&lt;/em&gt; a protocol, it is &lt;em&gt;not&lt;/em&gt; a piece of software. It is actual hosting. It is people who deal with abuse, security, takedown notices, denial of service attacks, naming, bill paying, authentication and recovery, and are committed to ongoing improvements to the platform. Those are the things that separate software from a running service, and only running services can participate in the open&amp;nbsp;web.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t think decentralization, federation, or &lt;span class="caps"&gt;P2P&lt;/span&gt; is important or probably even desirable. I think these are ways to avoid the work of hosting, and they succeed to the degree no one uses the resulting software and so no work has to be done. It&amp;#8217;s better to start with a working&amp;nbsp;product.&lt;/p&gt;
&lt;p&gt;Would hosting change things? Probably not enough: products aren&amp;#8217;t just software, and open source development still struggles to include a diversity of skills and the consistent delivery of effort to make a product. Here, I have no suggestions. But still, an open, public, accessible hosting platform would be a&amp;nbsp;start.&lt;/p&gt;</content><category term="mozilla"></category></entry><entry><title>Viewing Python execution with source code rewriting</title><link href="https://ianbicking.org/blog/2018/11/viewing-python-execution-source-code-rewriting.html" rel="alternate"></link><published>2018-11-20T00:00:00-06:00</published><updated>2018-11-20T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2018-11-20:/blog/2018/11/viewing-python-execution-source-code-rewriting.html</id><summary type="html">&lt;p&gt;A while back I experimented with a &lt;a href="https://github.com/ianb/sheets"&gt;Jupyter Notebook-like&lt;/a&gt; interface. Ultimately I hit some roadblocks and knew that I couldn&amp;#8217;t keep working on it indefinitely, as I had no personal &lt;em&gt;purpose&lt;/em&gt; for the&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;But I do want to share the idea I most liked from the project: tracing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A while back I experimented with a &lt;a href="https://github.com/ianb/sheets"&gt;Jupyter Notebook-like&lt;/a&gt; interface. Ultimately I hit some roadblocks and knew that I couldn&amp;#8217;t keep working on it indefinitely, as I had no personal &lt;em&gt;purpose&lt;/em&gt; for the&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;But I do want to share the idea I most liked from the project: tracing execution with source code&amp;nbsp;rewriting.&lt;/p&gt;
&lt;h1&gt;Print-based&amp;nbsp;debugging&lt;/h1&gt;
&lt;p&gt;My go-to debugging in any environment is printing. You decide what you want to know about, then you sprinkle in some statements and find out. Repeat as necessary. I like printing because it&amp;#8217;s like a way of creating a log of the execution. Maybe there&amp;#8217;s better ways, but like many people this is one of the only techniques that sticks for me. Still, I think there&amp;#8217;s ways of incrementally improving on print-based debugging, and this is one attempt on my&amp;nbsp;part&amp;#8230;&lt;/p&gt;
&lt;h2&gt;Source code&amp;nbsp;rewriting&lt;/h2&gt;
&lt;p&gt;Instead of using &lt;a href="https://docs.python.org/3/library/trace.html"&gt;trace&lt;/a&gt; to follow along with the code, I thought we could inject the debugging into the code&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;I ended up implementing two kinds of source code rewriting. The first simply prints&amp;nbsp;expressions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;my_object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This normally prints out &lt;code&gt;my_object&lt;/code&gt;, but it only works on the last expression (i.e., you wouldn&amp;#8217;t see the value of &lt;code&gt;my_object.execute()&lt;/code&gt;). This constraint is built into Python in &lt;a href="https://docs.python.org/3/library/functions.html#compile"&gt;compile&lt;/a&gt;, with the output being sent to &lt;a href="https://docs.python.org/3/library/sys.html#sys.displayhook"&gt;sys.displayhook&lt;/a&gt;. You can get around this problem by splitting up the cells carefully, but I find cell management to be an unpleasant part of notebook&amp;nbsp;interfaces.&lt;/p&gt;
&lt;p&gt;I first tried putting an implicit &lt;code&gt;print()&lt;/code&gt; around every top-level expression, so it&amp;nbsp;becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;display_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;display_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where &lt;code&gt;display_print()&lt;/code&gt; is something simple&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This turned out to be confusing. What print statement went with which expression? I legitimately couldn&amp;#8217;t tell, even with simple examples. So I made another change, rewriting it like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;display_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my_object.execute()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;display_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my_object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works great! You can track a bunch of expressions, interleave this with other explicit print statements, and the output is readable and&amp;nbsp;useful.&lt;/p&gt;
&lt;h3&gt;Probes&lt;/h3&gt;
&lt;p&gt;But I had a problem: I could watch top-level expressions, but there were lots of interesting expressions that aren&amp;#8217;t top-level. For this I added a new function &lt;code&gt;watch()&lt;/code&gt;. But I still rewrote&amp;nbsp;expressions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;object_enumerator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is rewritten&amp;nbsp;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;my_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;object_enumerator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;watch_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;obj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# the 1 is an ID for the expression&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With an implementation of &lt;code&gt;watch_print()&lt;/code&gt; like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;watch_print_counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;watch_print_limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;watch_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;watch_print_counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;watch_print_limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;watch_print_counter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;watch_print_counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;watch_print_counter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;watch_print_limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  (omitting further values)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While I initially left out the limit, I quickly realized its importance: it&amp;#8217;s very easy to run a denial of service attack on your own notebook! A more sophisticated implementation could start omitting values while leaving in every 100th or 1000th&amp;nbsp;value.&lt;/p&gt;
&lt;h3&gt;Watching&amp;nbsp;loops&lt;/h3&gt;
&lt;p&gt;I never implemented this, but I&amp;#8217;m pretty sure the next step would be watching all loops, rewriting them as something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;watch_enumerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;obj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object_enumerator()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object_enumerator&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This would let you print out useful information, like if the execution is long you can indicate progress and possibly an expected completion time, or you could label inner watch statements or add other&amp;nbsp;information.&lt;/p&gt;
&lt;h1&gt;Implementation&lt;/h1&gt;
&lt;p&gt;To implement this I used the &lt;a href="https://astor.readthedocs.io/en/latest/"&gt;astor&lt;/a&gt; library, which made this all very simple, though it required some&amp;nbsp;experimentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RewriteExprToPrint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;astor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TreeWalk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_Module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cur_node&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewrite_expr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rewrite_expr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;expr_string&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;expr_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;astor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;node_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;expr_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;display_print&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
                    &lt;span class="n"&gt;starargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;display_print&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
                &lt;span class="n"&gt;starargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fix_missing_locations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Implementing &lt;code&gt;watch()&lt;/code&gt; is a little more&amp;nbsp;involved:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RewriteWatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;astor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TreeWalk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;astor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TreeWalk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id_counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_Name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cur_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cur_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;watch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_call&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewrite_expr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cur_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rewrite_expr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;expr_string&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;expr_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;astor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;node_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;expr_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id_counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;watch_print&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
            &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id_counter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;node_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
            &lt;span class="n"&gt;starargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fix_missing_locations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category></entry><entry><title>Thoughts on the Firefox Email Tabs experiment</title><link href="https://ianbicking.org/blog/2018/11/thoughts-on-email-tabs.html" rel="alternate"></link><published>2018-11-15T00:00:00-06:00</published><updated>2018-11-15T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2018-11-15:/blog/2018/11/thoughts-on-email-tabs.html</id><summary type="html">&lt;p&gt;We recently released &lt;a href="https://testpilot.firefox.com/experiments/email-tabs"&gt;Email Tabs&lt;/a&gt; in &lt;a href="https://testpilot.firefox.com/"&gt;Firefox Test Pilot&lt;/a&gt;. This was a project I championed, and I wanted to offer some context on&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Email Tabs is a browser add-on that makes it easier to compose an email message from your tabs/pages. The &lt;a href="https://testpilot.firefox.com/experiments/email-tabs"&gt;experiment page&lt;/a&gt; describes how it works …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We recently released &lt;a href="https://testpilot.firefox.com/experiments/email-tabs"&gt;Email Tabs&lt;/a&gt; in &lt;a href="https://testpilot.firefox.com/"&gt;Firefox Test Pilot&lt;/a&gt;. This was a project I championed, and I wanted to offer some context on&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Email Tabs is a browser add-on that makes it easier to compose an email message from your tabs/pages. The &lt;a href="https://testpilot.firefox.com/experiments/email-tabs"&gt;experiment page&lt;/a&gt; describes how it works, but to summarize it from a technical point of&amp;nbsp;view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You choose some&amp;nbsp;tabs&lt;/li&gt;
&lt;li&gt;The add-on gets the best title and &lt;span class="caps"&gt;URL&lt;/span&gt; from the tab(s), makes a screenshot, and uses &lt;a href="https://blog.mozilla.org/firefox/reader-view/"&gt;reader view&lt;/a&gt; to get simplified content from the&amp;nbsp;tab&lt;/li&gt;
&lt;li&gt;It opens a email compose&amp;nbsp;page&lt;/li&gt;
&lt;li&gt;It asks you what you want your email to look like (links, entire articles,&amp;nbsp;screenshots)&lt;/li&gt;
&lt;li&gt;It injects the &lt;span class="caps"&gt;HTML&lt;/span&gt; (somewhat brutally) into the email composition&amp;nbsp;window&lt;/li&gt;
&lt;li&gt;When the email is sent, if offers to close the compose window or all the tabs you&amp;#8217;ve&amp;nbsp;sent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://testpilot.firefox.com/experiments/email-tabs"&gt;&lt;img style="float: right; width: 300px; height: auto" src="/media/email-tabs-1.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s not fancy engineering. It&amp;#8217;s just-make-it-work engineering. It does not propose a new standard for composing &lt;span class="caps"&gt;HTML&lt;/span&gt; emails. It doesn&amp;#8217;t pay attention to your existing mail settings. It does not push forward the state of the art. It has no mobile component. Notably, no one in Mozilla ever asked us to make this thing. And yet I really like this add-on, and so I feel a need to explain&amp;nbsp;why.&lt;/p&gt;
&lt;h3&gt;User Research&amp;nbsp;origins&lt;/h3&gt;
&lt;p&gt;A long time ago &lt;a href="https://blog.mozilla.org/ux/2015/02/save-share-revisit/"&gt;Mozilla did research into Save/Share/Revisit&lt;/a&gt;. The research was based on interviews, journals, and directly watching people do work on their&amp;nbsp;computers.&lt;/p&gt;
&lt;p&gt;The results should not be surprising, but it was important to actually have them documented and backed up by&amp;nbsp;research:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;People use simple&amp;nbsp;techniques&lt;/li&gt;
&lt;li&gt;Everyone claims to be happy with their current&amp;nbsp;processes&lt;/li&gt;
&lt;li&gt;Everyone used multiple tools that typically fed into each&amp;nbsp;other&lt;/li&gt;
&lt;li&gt;Those processes might seem complicated and inefficient to me, but didn&amp;#8217;t to&amp;nbsp;them&lt;/li&gt;
&lt;li&gt;People said they &lt;em&gt;might&lt;/em&gt; be open to improvements in specific&amp;nbsp;steps&lt;/li&gt;
&lt;li&gt;People were not interested in revamping their overall&amp;nbsp;processes&lt;/li&gt;
&lt;li&gt;Some techniques were particularly&amp;nbsp;popular:&lt;/li&gt;
&lt;li&gt;Screenshots&lt;/li&gt;
&lt;li&gt;URLs&lt;/li&gt;
&lt;li&gt;Email&lt;/li&gt;
&lt;li&gt;Texting&lt;/li&gt;
&lt;li&gt;Bookmarks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://testpilot.firefox.com/experiments/email-tabs"&gt;&lt;img style="float: right; width: 300px; height: auto" src="/media/email-tabs-2.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not everyone used all of these, but they were all&amp;nbsp;popular.&lt;/p&gt;
&lt;p&gt;The research made me change a page-freezing/saving tool (Page Shot) into what is now &lt;a href="https://screenshots.firefox.com/"&gt;Firefox Screenshots&lt;/a&gt; (I didn&amp;#8217;t intend to lose the freezing functionality along the way, but things happen when you&amp;nbsp;ship).&lt;/p&gt;
&lt;p&gt;Even if the research was fairly clear, it wasn&amp;#8217;t prescriptive, and life moved on. But it sat in the back of my head, both email and the &lt;a href="http://www.ianbicking.org/blog/2018/02/web-small-composable-tools.html"&gt;general question of workflows&lt;/a&gt;. And once I was doing less work on Screenshots I felt compelled to come back to it. Email stuck out, both because of how ubiquitous it was, and how little anyone cared about it. It seemed easy to improve&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Email is also multipurpose. People will apologetically talk about emailing themselves something in order to save it, even though everyone does it. It can be a note for the future, something to archive for later, a message, a question, an &lt;span class="caps"&gt;FYI&lt;/span&gt;. One of the features of Email Tabs that I&amp;#8217;m fond of is the ability to send a set of tabs, and then close those same tabs. Have a set of tabs that represent something you don&amp;#8217;t want to forget, but don&amp;#8217;t want to use right now? Send it to yourself. And unlike structured storage (like a bookmark folder), you can describe as much as you want about your next steps in the email&amp;nbsp;itself.&lt;/p&gt;
&lt;h3&gt;Choosing to integrate with&amp;nbsp;webmail&lt;/h3&gt;
&lt;p&gt;The obvious solution is to make something that emails out a page. A little web service perhaps, and you give it a &lt;span class="caps"&gt;URL&lt;/span&gt; and it fetches it, and then something that forwards the current &lt;span class="caps"&gt;URL&lt;/span&gt; to that&amp;nbsp;service&amp;#8230;&lt;/p&gt;
&lt;p&gt;What seems simple becomes hard pretty quickly. Of course you have to fetch the page, and render it, and worry about JavaScript, and so on. But even if you skip that, then what email address will it come from? Do you integrate with a contact list? Make your own? How do you let people add a little note? A note per tab? Do you save a&amp;nbsp;record?&lt;/p&gt;
&lt;p&gt;Prepopulating an email composition answers a ton of&amp;nbsp;questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All the mail&amp;nbsp;infrastructure&lt;/li&gt;
&lt;li&gt;From addresses, email verification, selecting your address,&amp;nbsp;etc&lt;/li&gt;
&lt;li&gt;To field, &lt;span class="caps"&gt;CC&lt;/span&gt;, address&amp;nbsp;book&lt;/li&gt;
&lt;li&gt;The editable body gives the user control and the ability to explain why they are sending&amp;nbsp;something&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s very transparent to the user what they are sending, and they confirm it by hitting&amp;nbsp;Send&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since then I&amp;#8217;ve come to appreciate the power of editable documents. Again it should be obvious, but there&amp;#8217;s this draw any programmer will feel towards structured data and read-only representations of that data. The open world of an email body is refreshingly&amp;nbsp;unconstrained.&lt;/p&gt;
&lt;h3&gt;Email providers &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; broken&amp;nbsp;browsers&lt;/h3&gt;
&lt;p&gt;One downside to this integration is that we are shipping with only Gmail support. That covers &lt;a href="https://www.statista.com/statistics/547531/e-mail-provider-ranking-consumer-usa-age/"&gt;most people&lt;/a&gt;, but it feels&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;This is an experiment, so keep it simple, right? And that was the plan until people from marketing kept asking over and over for us to support other clients and we thought: if they care so much maybe they are&amp;nbsp;right.&lt;/p&gt;
&lt;p&gt;We didn&amp;#8217;t get support for other providers ready for launch, but we did get a good start on it. Along the way I saw that &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1494105"&gt;Yahoo Mail is broken&lt;/a&gt; and Outlook isn&amp;#8217;t supported at all in Firefox (and the &lt;a href="https://support.mozilla.org/en-US/kb/change-program-used-open-email-links"&gt;instructions&lt;/a&gt; point to a pretty unhelpful &lt;a href="https://addons.mozilla.org/en-US/firefox/search/?q=webmail"&gt;addons.mozilla.org search&lt;/a&gt;). That&amp;#8217;s millions of users who aren&amp;#8217;t getting a good&amp;nbsp;experience.&lt;/p&gt;
&lt;p&gt;Growing Firefox is a really hard problem. Of course Mozilla has also studied this quite a bit, and one of the strongest conclusions is that people change their browser when their browser breaks. People aren&amp;#8217;t out there looking for something better, everyone has better things to do than think about their web browser. But if things don&amp;#8217;t work people go&amp;nbsp;searching.&lt;/p&gt;
&lt;p&gt;But what does broken really mean? I suspect if we looked more closely we might be surprised. The simple answer: something is broken if it doesn&amp;#8217;t act the way it should. But what &amp;#8220;should&amp;#8221; something do? If you click a link and Mail.app opens up, and you don&amp;#8217;t use Mail.app, that&amp;#8217;s broken. To Mozilla developers, if Mail.app is your registered default mail provider, then it &amp;#8220;should&amp;#8221; open up. Who&amp;#8217;s&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Email Tabs doesn&amp;#8217;t offer particular insight into this, but I do like that we&amp;#8217;ve created something with the purpose of enabling a &lt;em&gt;successful workflow&lt;/em&gt;. Nothing is built to a spec, or to a standard, it&amp;#8217;s only built to work. I think that process is itself&amp;nbsp;revealing.&lt;/p&gt;
&lt;h2&gt;Listening to the&amp;nbsp;research&lt;/h2&gt;
&lt;p&gt;Research requires interpretation. We asked questions about saving, sharing, and revisiting content, and we got back answers on those topics. Were those the right questions to ask? They seem pretty good, but there&amp;#8217;s other pretty good questions that will lead to very different answers. What makes you worried when you use the web? What do you want from a browser? What do you think about Firefox? What do you use a browser for? What are you doing when you switch from a phone to a desktop browser? We&amp;#8217;ve asked all these questions, and they point to different&amp;nbsp;answers.&lt;/p&gt;
&lt;p&gt;And somewhere in there you have to find an intersection between what you hear in the research and what you know how to do. There&amp;#8217;s no right answer. But there is something different when you &lt;strong&gt;start from&lt;/strong&gt; the user research, instead of &lt;strong&gt;using&lt;/strong&gt; the user research. There&amp;#8217;s a different sort of honesty to the conclusions, and I hope that comes through in the&amp;nbsp;product.&lt;/p&gt;
&lt;p&gt;I know what Email Tabs isn&amp;#8217;t: it&amp;#8217;s not part of any strategy. It&amp;#8217;s not part of any kind of play for anything. There&amp;#8217;s no ulterior motives. There&amp;#8217;s no income potential. This makes its future very hazy. And it won&amp;#8217;t be a blow-up success. It is merely useful. But I like it, and I hope we do&amp;nbsp;more.&lt;/p&gt;</content><category term="mozilla"></category></entry><entry><title>My Lunch With A White Supremacist</title><link href="https://ianbicking.org/blog/2018/04/my-lunch-with-a-white-supremacist.html" rel="alternate"></link><published>2018-04-23T00:00:00-05:00</published><updated>2018-04-23T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2018-04-23:/blog/2018/04/my-lunch-with-a-white-supremacist.html</id><summary type="html">&lt;p&gt;About ten years ago I got a call out of the blue from Soren.  I&amp;#8217;d always published my phone number on my website, and it&amp;#8217;s only been used a handful of times.  Hardly anyone wants to actually &lt;em&gt;call&lt;/em&gt; another&amp;nbsp;person.&lt;/p&gt;
&lt;p&gt;Soren had come upon a post of mine …&lt;/p&gt;</summary><content type="html">&lt;p&gt;About ten years ago I got a call out of the blue from Soren.  I&amp;#8217;d always published my phone number on my website, and it&amp;#8217;s only been used a handful of times.  Hardly anyone wants to actually &lt;em&gt;call&lt;/em&gt; another&amp;nbsp;person.&lt;/p&gt;
&lt;p&gt;Soren had come upon a post of mine about Oberon, an educational object-oriented operating system and programming language.  I had used it briefly in school and had a fondness for some of its more novel ideas – but it was obscure and he was excited to find another person in Chicago who was interested in it.  He bent my ear about what he was working on.  It wasn&amp;#8217;t really my thing but he seemed excited and starved for some feedback so I chatted for a&amp;nbsp;while.&lt;/p&gt;
&lt;p&gt;I suggested we meet at a local Linux Users Group, which was really just a couple regulars talking shit at a local diner.  He showed up late, having come on the bus, and hauling his desktop computer, monitor, and keyboard.  He was abrupt with the waitress as he tried to find an outlet he could use and we all relocated to another part of the diner.  There was lots of eye rolling from the other guys, like &lt;em&gt;what a weirdo&lt;/em&gt;, which was a reasonable assessment but an unfair reaction, as we were all weird and awkward.  I was rooting for him, but no one really got what he was trying to&amp;nbsp;show.&lt;/p&gt;
&lt;p&gt;It was an exceptionally cold night and I gave him a ride home.  I drove a junker without heat, but even that is more dignified than taking the bus.  He invited me into his house as there was more he wanted to tell me about what he was doing.  I don&amp;#8217;t know what I expected, but it wasn&amp;#8217;t domestic life – two little blond shirtless children, a hippy aesthetic of mason jars and clutter and strange-smelling foods.  His wife seemed exasperated to have an unexpected visitor, but I sensed Soren was a couple years underwater in terms of marital exasperation.  We sat on the floor of the bedroom and Soren described what he was working on in greater&amp;nbsp;detail.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not particularly interested in graphics, but I thought what he was doing was interesting.  He&amp;#8217;d written a kind of real-time object-oriented raytracer.  As a ray entered an object the object itself took over control of the next phase of raytracing.  It might hold sub-objects, or it might have a it&amp;#8217;s own algorithm to determine what the ray would hit, or its own sense of detail.  He told me about how he&amp;#8217;d corresponded with people in the industry, who thought what he was doing was new and interesting, but nothing really came of it.  I suspected they were nodding and agreeing in the same dismissive way that I myself nodded in&amp;nbsp;agreement.&lt;/p&gt;
&lt;p&gt;I didn&amp;#8217;t see Soren again for some time.  A couple years later we got together for coffee, though he would only drink unsweetened cocoa.  He told me he was on a zero-carb diet, forcing his brain to fuel itself through ketones instead of glucose.  It kept him calm and let him focus, a fairly extreme response to what he implicitly acknowledged was a serious issue for&amp;nbsp;him.&lt;/p&gt;
&lt;p&gt;Soren clearly saw himself as a misunderstood genius.  Misunderstood by his peers.  Deliberately using obscure technologies which he felt both gave him an edge, and which made his work inaccessible.  Holding on to a grand idea which he imagined could be tremendously important, if only someone could see the potential in what he was&amp;nbsp;doing.&lt;/p&gt;
&lt;p&gt;After a while the topic of politics came up. &amp;#8220;Oh, you wouldn&amp;#8217;t like my politics&amp;#8221; he told me. I thought maybe he was some sort of over-the-top libertarian, or had odd religious views, maybe an anarchist, maybe it was weird or he was just shy. So I encouraged him to go ahead, whatever it is would probably be&amp;nbsp;interesting.&lt;/p&gt;
&lt;p&gt;And then, pretty quick, there we were: if everyone has persecuted the Jews forever, then it&amp;#8217;s probably them, not us, don&amp;#8217;t you think? And who are your people? You should put them ahead of everyone else, shouldn&amp;#8217;t you? Your family of course, but after family then race: an obligation to your ancestry. And don&amp;#8217;t we deserve to have a homeland of our own? Everyone else has a homeland, and all we&amp;#8217;re asking for is the same thing. Where does civilization come from? Who is its&amp;nbsp;protector?&lt;/p&gt;
&lt;p&gt;Some of his ideas were strictly tribal. Many were based on a survival-of-the-fittest notion, which felt like an intellectual veneer on tribalism. Some ideas were apocalyptic&amp;#8230; he didn&amp;#8217;t want a race war, but he was pretty sure it was&amp;nbsp;coming.&lt;/p&gt;
&lt;p&gt;I guess I didn&amp;#8217;t take these things to seriously at the time. His beliefs were offensive, to be sure, but in a kind of sad and pathetic way. I debated him at the time – not on the details of his belief, but on the axioms that underlie those beliefs. What&amp;#8217;s the motivation for splitting people up this particular way? Is the world really so zero-sum? Aren&amp;#8217;t our lives larger than race? He had his answers&amp;#8230; and he had a lot of answers, he was clearly excited to talk about these&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;Before we left I sensed a kind of desperate regret in Soren. He wished he hadn&amp;#8217;t brought this up. First it made him talk faster and more wide-ranging, like we could somehow reach consensus on some other topic and put aside his explicit racism. And then&amp;#8230; well, you can&amp;#8217;t unsay things. We said goodbye, not see you&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;As we were leaving I told him about my nephew, who was black, and who I loved very dearly, and who was my family. I hadn&amp;#8217;t mentioned him before, it felt too personal, and perhaps safer or more comfortable to talk abstractly instead of personally; I would not be as reluctant now. Then we both just took a deep breath and walked our different directions. We did not speak&amp;nbsp;again.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Improving the web with small, composable tools</title><link href="https://ianbicking.org/blog/2018/02/web-small-composable-tools.html" rel="alternate"></link><published>2018-02-05T00:00:00-06:00</published><updated>2018-02-05T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2018-02-05:/blog/2018/02/web-small-composable-tools.html</id><summary type="html">&lt;p&gt;&lt;a href="https://screenshots.firefox.com/"&gt;Firefox Screenshots&lt;/a&gt; is the first &lt;a href="https://testpilot.firefox.com/"&gt;Test Pilot&lt;/a&gt; experiment to graduate into Firefox, and it’s been surprisingly successful. You won’t see many people talking about it: it does what you expect, and it doesn’t cover new ground. Mozilla should do more of&amp;nbsp;this.&lt;/p&gt;
&lt;h1&gt;Small, Composable&amp;nbsp;Tools&lt;/h1&gt;
&lt;p&gt;One of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://screenshots.firefox.com/"&gt;Firefox Screenshots&lt;/a&gt; is the first &lt;a href="https://testpilot.firefox.com/"&gt;Test Pilot&lt;/a&gt; experiment to graduate into Firefox, and it’s been surprisingly successful. You won’t see many people talking about it: it does what you expect, and it doesn’t cover new ground. Mozilla should do more of&amp;nbsp;this.&lt;/p&gt;
&lt;h1&gt;Small, Composable&amp;nbsp;Tools&lt;/h1&gt;
&lt;p&gt;One of the inspirations for Firefox Screenshots was &lt;a href="https://blog.mozilla.org/ux/2015/02/save-share-revisit/"&gt;user research done in 2015&lt;/a&gt;. This research involved interviews with a few dozen people about how they save, share, and recall information. I myself had a chance to be part of several house visits in Rochester, &lt;span class="caps"&gt;NY&lt;/span&gt;. We looked over people’s shoulders while they showed us how they&amp;nbsp;worked.&lt;/p&gt;
&lt;p&gt;My biggest takeaways from that&amp;nbsp;research:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a wide variety of how people manage their information, with many combinations of different tools and complex&amp;nbsp;workflows&lt;/li&gt;
&lt;li&gt;Everyone is pretty happy with what they are&amp;nbsp;doing&lt;/li&gt;
&lt;li&gt;People only want small, incremental&amp;nbsp;changes&lt;/li&gt;
&lt;li&gt;Screenshots are pretty&amp;nbsp;popular&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was surprising to see how complicated and sometimes clearly suboptimal people’s workflows were, while also understanding that each person was happy with what they did. They were happy because they weren’t looking for something new. At any moment most people are settled (&lt;a href="https://www.nngroup.com/articles/satisficing/"&gt;satisficed&lt;/a&gt;) on a process, and they have better things to do than constantly reconsider those&amp;nbsp;choices.&lt;/p&gt;
&lt;p&gt;After learning how they worked, we’d sometimes offer up alternatives and get reactions. The alternatives received lots of crickets. If you could add a tool to existing workflows then there might be interest, but there wasn’t interest in replacing tools unless perhaps it was a one-to-one match. People specifically weren’t interested in integrated tools, ones that improved the entire&amp;nbsp;workflow.&lt;/p&gt;
&lt;p&gt;And who among us hasn’t been burned by overenthusiasm for a fully integrated tool? It seems great, then it gets tiring just to keep track, annoying to try to get people to sign up so you can collaborate, some number of things don’t fit into the process, you’ve lost track of your old things, it just feels like&amp;nbsp;work.&lt;/p&gt;
&lt;h1&gt;Old&amp;nbsp;Philosophies&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy#Origin"&gt;Unix philosophy&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write programs that do one thing and do it&amp;nbsp;well.&lt;/li&gt;
&lt;li&gt;Write programs to work&amp;nbsp;together.&lt;/li&gt;
&lt;li&gt;Write programs to handle text streams, because that is a universal&amp;nbsp;interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is still what works well, and still what people want! This is also what the web can provide and apps and silos cannot: open&amp;nbsp;composability.&lt;/p&gt;
&lt;p&gt;This isn’t the same as APIs and integrated tools: &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; are not integrated, you don’t have to setup OAuth integration between &lt;code&gt;tail&lt;/code&gt; and &lt;code&gt;tee&lt;/code&gt;. Things work together because you use them&amp;nbsp;together.&lt;/p&gt;
&lt;p&gt;What would the Unix toolset look like on the web? Please speculate! &lt;a href="https://docs.google.com/document/d/1NSO_Nl426o5Wuv896qk7vLudbf-z9FQSZf8fDBWPlwk/edit?usp=sharing"&gt;I&amp;#8217;ve started structuring some of my own ideas into a set of notes&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Stop Being So&amp;nbsp;Clever&lt;/h1&gt;
&lt;p&gt;At the time of the user research myself and &lt;a href="http://donovanpreston.com/"&gt;Donovan&lt;/a&gt; had been working on an experiment in page capture – you could think of it like a personal archive.org. We added screenshotting as an entree into what felt like a more advanced&amp;nbsp;tool.&lt;/p&gt;
&lt;p&gt;In the end nothing is left of that original concept, and we just have plain screenshots. It hurt to see that all go. Screenshots are not exciting, and they are not innovative, and there is nothing very new about them. And clearly I needed to get over&amp;nbsp;myself.&lt;/p&gt;
&lt;p&gt;And so this is a lesson in humility: things don’t have to be new or novel or exciting to be useful. Screenshots is so un-new, so un-novel, so un-exciting that we aren’t even following along with the competition. Mozilla should spend more time here: behind the curve where the big players stopped caring and the little players have a hard time getting any attention. Behind the curve is where the web was a lot more like how Mozilla wants it to&amp;nbsp;be.&lt;/p&gt;
&lt;p&gt;There are lots of useful things back here, things that technophiles have appreciated but the wider population doesn’t know how to use. A pastebin. Site archival. Deep linking. Inline linking at all! Scraping. Clipboard management. Etherpad is still the best lightweight collaborative editor. Little stuff, things that don’t try to take over, things that don’t try to leverage the user for corporate benefit. This stuff is not very hard to make, and is affordable to run. Combine that with a commitment to keep the services competently maintained and openly interoperable, and there’s a lot of value to provide. And that’s what Mozilla is in it for: to be of&amp;nbsp;service.&lt;/p&gt;
&lt;h1&gt;Being Part Of The&amp;nbsp;Web&lt;/h1&gt;
&lt;p&gt;Screenshots was not easy to make. It was not &lt;em&gt;technically&lt;/em&gt; difficult, but it was not&amp;nbsp;easy.&lt;/p&gt;
&lt;p&gt;Mozilla has long been reluctant to host user content. Firefox Sync is pointedly encrypted on the client. Before Screenshots the only unencrypted user content the corporation handled was the add-ons and themes on&amp;nbsp;addons.mozilla.org.&lt;/p&gt;
&lt;p&gt;Screenshots did not have to have a server component, and it did not have to allow people to upload or share shots within the tool. I take some pride in the fact that, despite all our cultural and legal attitudes at Mozilla, screenshots.firefox.com is a thing. It required a great deal of stubbornness on my part, and at times a pointed blindness to&amp;nbsp;feedback.&lt;/p&gt;
&lt;p&gt;In a small way Screenshots makes Mozilla part of the web, not just a window onto the web. This is a direction I think we should take: &lt;code&gt;*.firefox.com&lt;/code&gt; links of all kinds should become normal, and you should know that on the other side of the link will be respectful content, it won’t be an avenue for manipulation, and you won’t be a product. Be the change you want to see,&amp;nbsp;right?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks to Wil Clouser and Jared Hirsch for feedback on this&amp;nbsp;post.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="misc"></category></entry><entry><title>A Product Journal: Oops We Made A Scraper</title><link href="https://ianbicking.org/blog/2016/08/product-journal-oops-a-scraper.html" rel="alternate"></link><published>2016-08-15T00:00:00-05:00</published><updated>2016-08-15T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2016-08-15:/blog/2016/08/product-journal-oops-a-scraper.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A while back we got our &lt;a href="https://github.com/ben-en"&gt;first contributor&lt;/a&gt; to &lt;a href="https://github.com/mozilla-services/pageshot/"&gt;PageShot&lt;/a&gt;, who contributed a feature he wanted for &lt;a href="https://outernet.is/"&gt;Outernet&lt;/a&gt; – the ability to use PageShot to create readable and packaged versions …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A while back we got our &lt;a href="https://github.com/ben-en"&gt;first contributor&lt;/a&gt; to &lt;a href="https://github.com/mozilla-services/pageshot/"&gt;PageShot&lt;/a&gt;, who contributed a feature he wanted for &lt;a href="https://outernet.is/"&gt;Outernet&lt;/a&gt; – the ability to use PageShot to create readable and packaged versions of websites for distribution.  Outernet is a neat project: they are building satellite capacity to distribute content anywhere in the world.  But it&amp;#8217;s purely one-way, so any content you send has to be complete.  And PageShot tries pretty hard to identify and normalize all that&amp;nbsp;content.&lt;/p&gt;
&lt;p&gt;Lately I spent a week with the &lt;a href="https://wiki.mozilla.org/Firefox/Activity_Stream"&gt;Activity Stream&lt;/a&gt; team, and got to thinking about the development process around recommendations.  I&amp;#8217;d like to be able to take my entire history and actually get the content, and see what I can learn from&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;And there&amp;#8217;s this feature in PageShot to do just that!  You can install the add-on and enable the pref to make the browser into a&amp;nbsp;server:&lt;/p&gt;
&lt;figure style="background-color: rgba(240, 240, 240, 0.4); padding: 5px; width: 90%; border: 1px solid #aaa; border-radius: 3px;"&gt;&lt;a href="/media/pageshot-server-pref-screenshot.png"&gt;&lt;img style="width: 100%; height: auto" src="/media/pageshot-server-pref-screenshot.png" /&gt;&lt;/a&gt;&lt;figcaption style="font-size: 80%; line-height: 1em; text-align: center;"&gt;&lt;tt&gt;about:addons&lt;/tt&gt; prefs&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;After that you can get the shot data from a page with a simple&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://mail.google.com
$ &lt;span class="nv"&gt;server&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://localhost:10082
$ curl &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;server&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/data/?url=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;allowUnknownAttributes=true&amp;amp;delayAfterLoad=1000&amp;quot;&lt;/span&gt; &amp;gt; data.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;allowUnknownAttributes&lt;/code&gt; preserves attributes like &lt;code&gt;data-*&lt;/code&gt; attributes that you might find useful in your processing.  &lt;code&gt;delayAfterLoad&lt;/code&gt; gives the milliseconds to wait, usually for the page to&amp;nbsp;&amp;#8220;settle&amp;#8221;.&lt;/p&gt;
&lt;p&gt;A fun part of this is that because it&amp;#8217;s in a regular browser it will automatically pick up your profile and scrape the page &lt;em&gt;as&lt;/em&gt; you, and you&amp;#8217;ll literally see a new tab open for a second and then close.  Install an ad blocker or anything else and its changes will also be&amp;nbsp;applied.&lt;/p&gt;
&lt;p&gt;The thing you get back will be a big &lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bodyAttrs&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;headAttrs&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;htmlAttrs&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;head&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;resources&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There&amp;#8217;s other stuff in there too (e.g., &lt;a href="http://ogp.me/"&gt;Open Graph properties&lt;/a&gt;), but this is what you need to reconstruct the page itself.  It has a few nice&amp;nbsp;features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The head and body are well formed; they are actually serialized from the &lt;span class="caps"&gt;DOM&lt;/span&gt;, not related to the &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;response.&lt;/li&gt;
&lt;li&gt;All embedded resources (mostly images) are identified in the &lt;code&gt;resources&lt;/code&gt; mapping.  The URLs in the page itself are replaced with those UUIDs, so you can put them back with a simple string substitutions, or you can rewrite the links&amp;nbsp;easily.&lt;/li&gt;
&lt;li&gt;Actual links (&lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt;) should all be&amp;nbsp;absolute.&lt;/li&gt;
&lt;li&gt;It will &lt;em&gt;try&lt;/em&gt; to tell you if the page is private (though it&amp;#8217;s just a&amp;nbsp;heuristic).&lt;/li&gt;
&lt;li&gt;If you want, it&amp;#8217;ll include a screenshot of the full page as a &lt;code&gt;data:&lt;/code&gt; &lt;span class="caps"&gt;URL&lt;/span&gt; (use &lt;code&gt;&amp;amp;thumbnailWidth=px&lt;/code&gt; to choose how&amp;nbsp;wide).&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt; will be inlined in a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag, perhaps reducing the complexity of the page for&amp;nbsp;you.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notably scripts and hidden elements will &lt;em&gt;not&lt;/em&gt; be included (because PageShot was written to share visible content and not to scrape&amp;nbsp;content).&lt;/p&gt;
&lt;p&gt;Anyway, fun to realize the tool can address some hidden and unintentional use&amp;nbsp;cases.&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry><entry><title>To All The Mothers</title><link href="https://ianbicking.org/blog/2016/05/to-all-the-mothers.html" rel="alternate"></link><published>2016-05-08T00:00:00-05:00</published><updated>2016-05-08T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2016-05-08:/blog/2016/05/to-all-the-mothers.html</id><summary type="html">&lt;p&gt;When we were expecting our first, when we couldn&amp;#8217;t actually &lt;em&gt;do&lt;/em&gt; anything but wait while Emily&amp;#8217;s body did all the parenting that could be done, when we spent a lot of time on idle research, I looked up mammary glands on&amp;nbsp;Wikipedia.  &lt;/p&gt;
&lt;p&gt;The theory is that they began …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When we were expecting our first, when we couldn&amp;#8217;t actually &lt;em&gt;do&lt;/em&gt; anything but wait while Emily&amp;#8217;s body did all the parenting that could be done, when we spent a lot of time on idle research, I looked up mammary glands on&amp;nbsp;Wikipedia.  &lt;/p&gt;
&lt;p&gt;The theory is that they began as glands to secrete lubricants onto an egg, maintaining a porous and healthy membrane.  I find a drawing of an early mammal.  I imagine her: small, flat, badger-like in shape.  A nest of eggs hidden as best she can.  I imagine it lined with soft pine needles.  She&amp;#8217;s anxious, nudges the clutch of eggs, tests them, hovers over them attending to their moisture and warmth.  She is neither happy nor sad, she does not ask herself these questions.  She cares dearly for these eggs.  This is the origin of caring; for if ever &amp;#8220;caring&amp;#8221; will mean something, it will mean something because it is like this&amp;nbsp;caring.&lt;/p&gt;
&lt;p&gt;This is not just a creature, an interesting factoid: she is my ancestor.  There is a chain of motherhood that leads from her to me.  That she is forgotten does not make her less&amp;nbsp;real.&lt;/p&gt;
&lt;p&gt;Does she love these eggs, little embryos swimming in a ball?  Does she love the little ones that hatch?  She keeps them warm, she licks them clean, she gives the affection that must trigger some unconscious reminder of the affection she herself received.  If she is not called upon to sacrifice her life for her children, there will be mothers among her own ancestors and descendants who&amp;nbsp;will.&lt;/p&gt;
&lt;p&gt;All of this is not inevitable.  Many creatures do not mother and are not mothered.  And yet she doesn&amp;#8217;t choose to mother.  She does not care for her children because they are beautiful or noble or worthy.  She cares for them because they are weak.  She cares for them by instinct.  Now we look down on instinct, but she mothers because it is inseparable from her existence, her instinct is not that which is unwillingly attached to her, it is not a burden, it just&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Many generations later her offspring will find a way to express &amp;#8220;love&amp;#8221;.  What might that expression have looked like?  A calming murmur of contentment, purposeless except to tell the one you are with it is well that you are there together?  Later it will become a word, a sound that will echo in our minds, until the sounds become self-aware in our self-reflection; the mind.  But love is older than&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll ask ourselves what &amp;#8220;love&amp;#8221; is, but the question is not the answer.  Life is older than love, and yet love itself proceeds the word by eons.  We&amp;#8217;ll ask what love is because we&amp;#8217;ll compare our ideas against the thing we already know, that which is already in&amp;nbsp;us.&lt;/p&gt;
&lt;p&gt;The eggs hatch.  The mother lies in her nest, her tiny children piled up – among them one will be the next generation that leads to me, a lineage whose conclusion we still do not know.  They squirm to press themselves against her warmth.  She&amp;#8217;s still anxious: what might appear in the dark?  Does she hear the squeak of a little one that has fallen out of the nest and is still too small to get itself back in?  But she&amp;#8217;s happy, even if she can&amp;#8217;t tell herself that she is happy.  She does not ask&amp;nbsp;why.&lt;/p&gt;
&lt;p&gt;Her eyes drift close.  Something else takes over as she drifts into sleep, but that something else still watches, still feels the bundles of warmth.  And the little ones also sleep, and that something that takes us over in sleep – it is not purpose, it is not will – that thing remembers.  It saves that moment.  And that is also the chain that brings us to where we are.  More than genes, we are an ancient and unbroken chain of these experiences.  We know this because we can see the chain broken by neglect or abuse, and though it&amp;#8217;s repairable, without repair life will not&amp;nbsp;continue.&lt;/p&gt;
&lt;p&gt;So to all the mothers who have brought us here – who have brought me here – I can only offer recognition.  To my mother Gay, who raised me, first taught me love.  To my wife Emily, mother to my own children.  To her mother Diane, upon whom rests another mysterious tree.  To my grandmother Jeanetta, now departed, who acted with such will in her life.  To my grandmother Joyce, now departed, who struggled with so many demons, and yet I believe began the mending.  To my great grandmother, who lived a life of such extreme stoicism; so stoic I don&amp;#8217;t know if she realized her own nature.  And to so, so, so many mothers I do not know.  It was never once easy.  Thank you&amp;nbsp;all.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>A Product Journal: Data Up and Data Down</title><link href="https://ianbicking.org/blog/2016/04/product-journal-data-up-and-data-down.html" rel="alternate"></link><published>2016-04-28T00:00:00-05:00</published><updated>2016-04-28T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2016-04-28:/blog/2016/04/product-journal-data-up-and-data-down.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We&amp;#8217;re in the process of reviewing the &lt;span class="caps"&gt;KPI&lt;/span&gt; (&lt;a href="https://en.wikipedia.org/wiki/Performance_indicator"&gt;Key Performance Indicators&lt;/a&gt;) for &lt;a href="https://www.mozilla.org/en-US/firefox/hello/"&gt;Firefox Hello&lt;/a&gt; (relatedly I joined the Firefox Hello team as engineering manager in October).  Mozilla is …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We&amp;#8217;re in the process of reviewing the &lt;span class="caps"&gt;KPI&lt;/span&gt; (&lt;a href="https://en.wikipedia.org/wiki/Performance_indicator"&gt;Key Performance Indicators&lt;/a&gt;) for &lt;a href="https://www.mozilla.org/en-US/firefox/hello/"&gt;Firefox Hello&lt;/a&gt; (relatedly I joined the Firefox Hello team as engineering manager in October).  Mozilla is trying (like everyone else) to make data-driven decisions.  Basing decisions on data has some potential to remove or at least reveal bias.  It provides a feedback mechanism that can provide continuity even as there are personnel changes.  It provides some accountability over time.  Data might also provide insight about product opportunities which we might otherwise&amp;nbsp;miss.&lt;/p&gt;
&lt;p&gt;Enter the &lt;span class="caps"&gt;KPI&lt;/span&gt;: for Hello (like most products) the key performance indicators are number of users, growth in users over time, user retention, and user sentiment (e.g., we use the &lt;a href="https://en.wikipedia.org/wiki/Net_Promoter"&gt;Net Promoter Score&lt;/a&gt;).  But like most projects those are not &lt;em&gt;actually&lt;/em&gt; our success criteria: product engagement is necessary but not sufficient for organizational goals.  Real goals might be revenue, social or political impact, or improvement in brand&amp;nbsp;sentiment.&lt;/p&gt;
&lt;p&gt;The value of &lt;span class="caps"&gt;KPI&lt;/span&gt; is often summarized as &amp;#8220;letting us know how we&amp;#8217;re doing&amp;#8221;.  I think the value &lt;span class="caps"&gt;KPI&lt;/span&gt; offers is more&amp;nbsp;select:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you &lt;em&gt;think&lt;/em&gt; a product is doing well, but it&amp;#8217;s not, &lt;span class="caps"&gt;KPI&lt;/span&gt; is&amp;nbsp;revealing.&lt;/li&gt;
&lt;li&gt;When you know a product isn&amp;#8217;t doing well, &lt;span class="caps"&gt;KPI&lt;/span&gt; let&amp;#8217;s you triage: is it hopeless? Do we need to make significant changes? Do we need to maintain our approach but try&amp;nbsp;harder?&lt;/li&gt;
&lt;li&gt;When a product is doing well the &lt;span class="caps"&gt;KPI&lt;/span&gt; gives you a sense of the potential.  You can also triage success: Should we invest heavily?  Stay the path?  Is there no potential to scale the success far&amp;nbsp;enough?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;#8217;m skeptical that &lt;span class="caps"&gt;KPI&lt;/span&gt; can provide the inverse of 1: when you think a product is doing poorly, can &lt;span class="caps"&gt;KPI&lt;/span&gt; reveal that it is doing well?  Because there&amp;#8217;s another set of criteria that defines &amp;#8220;success&amp;#8221;, &lt;span class="caps"&gt;KPI&lt;/span&gt; is necessary but not sufficient.  It requires a carefully objective executive to revise their negative opinion about the potential of a project based on &lt;span class="caps"&gt;KPI&lt;/span&gt;, and they may have reasonably lost faith that a project&amp;#8217;s &lt;span class="caps"&gt;KPI&lt;/span&gt;-defined success can translate into success given organizational&amp;nbsp;goals.&lt;/p&gt;
&lt;p&gt;The other theoretical value of &lt;span class="caps"&gt;KPI&lt;/span&gt; is that you could correlate &lt;span class="caps"&gt;KPI&lt;/span&gt; with changes to the product, testing whether each change improves your product&amp;#8217;s core value.  I&amp;#8217;m sure people manage to do this, with both very fine grained measurements and fine grained deployments of changes.  But it seems more likely to me that for most projects given a change in &lt;span class="caps"&gt;KPI&lt;/span&gt; you&amp;#8217;ll simply have to say &amp;#8220;yup&amp;#8221; and come up with unverified theories about that&amp;nbsp;change.  &lt;/p&gt;
&lt;p&gt;The metrics that actually &lt;em&gt;support&lt;/em&gt; the development of the product are not &amp;#8220;key&amp;#8221;, they are &amp;#8220;incidental&amp;#8221;.  These are metrics that find bugs in the product design, hint at unexplored opportunities, confirm the small wins.  These are metrics that are actionable by the people making the product: how do people interact with the tool?  What do they use it for?  Where do they get lost?  What paths lead to greater&amp;nbsp;engagement?&lt;/p&gt;
&lt;h2&gt;What is &lt;span class="caps"&gt;KPI&lt;/span&gt;&amp;nbsp;for?&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m trying to think more consciously about the difference between &lt;a href="https://en.wikipedia.org/wiki/Managing_up_and_managing_down"&gt;managing up and managing down&lt;/a&gt;.  A softer way of phrasing this is &lt;em&gt;managing in and managing out&lt;/em&gt; – but in this case I think the power dynamics are worth&amp;nbsp;highlighting.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;KPI&lt;/span&gt; is data that goes &lt;em&gt;up&lt;/em&gt;.  It lets someone outside the project – and above the project – make choices: about investment, redirection, cancellation.  &lt;span class="caps"&gt;KPI&lt;/span&gt; data doesn&amp;#8217;t go &lt;em&gt;down&lt;/em&gt;, it does little to help the people doing the work.  Feeling joy or despair about your project based on &lt;span class="caps"&gt;KPI&lt;/span&gt; is not actionable for those people on the inside of a&amp;nbsp;project.&lt;/p&gt;
&lt;h2&gt;Incentive or&amp;nbsp;support&lt;/h2&gt;
&lt;p&gt;I would also distinguish two kinds of management here: one perspective on management is that the organization should set up the right incentives and consequences so that rewards are aligned with organizational goals.  The right incentives might make people adapt their behavior to get alignment; &lt;em&gt;how&lt;/em&gt; they adapt is undefined.  The right incentives might also exclude those who aren&amp;#8217;t in alignment, culling misalignment from the organization.  Another perspective is that the organization should work to support people, that misalignment of purpose between a person and the organization is more likely a bug than a misalignment of intention.  Are people black boxes that we can nudge via punishment and reward?  Are there less mechanical ways to influence&amp;nbsp;change?&lt;/p&gt;
&lt;p&gt;Student performance measurement are another kind of &lt;span class="caps"&gt;KPI&lt;/span&gt;.  It lets someone on the outside (of the classroom) know if things are going well or poorly for the students.  It says little about &lt;em&gt;why&lt;/em&gt;, and it doesn&amp;#8217;t support improvement.  School reform based on measurement presumes that teachers and schools are &lt;em&gt;able&lt;/em&gt; to achieve the desired outcomes, but simply not &lt;em&gt;willing&lt;/em&gt;.  A risk of top-down reform: the people on the top use a perspective from the top.  As an authority figure, how do &lt;strong&gt;I&lt;/strong&gt; make decisions? The resulting reform is disempowering, supporting decisions from above, as opposed to using data to support the empowerment of those making the many day-to-day decisions that might effect a positive&amp;nbsp;outcome.&lt;/p&gt;
&lt;p&gt;Of course, having data available to inform decisions at all levels – from the executive to the implementor – would be great.  But there&amp;#8217;s a better criteria for data: it should support decision making processes.  What are your most important&amp;nbsp;decisions?&lt;/p&gt;
&lt;p&gt;As an example from Mozilla, we have data about how much Firefox is used and its marketshare.  How much should we pay attention to this data?  We certainly don&amp;#8217;t have the granularity to connect changes in this &lt;span class="caps"&gt;KPI&lt;/span&gt; to individual changes we make in the project.  The only real way to do that is through controlled experiments (which we are trying).  We aren&amp;#8217;t really willing to triage the project; no one is asking &amp;#8220;should we just give up on Firefox?&amp;#8221;  The only real choice we can make is: are we investing enough in Firefox, or should we invest more?  That&amp;#8217;s a question worth asking, but we need to keep our attention on the question and not the data.  For instance, if we decide to increase investment in Firefox, the immediate questions are: what kind of investment?  Over what timescale?  Data can be helpful to answer those questions, but not just any&amp;nbsp;data.&lt;/p&gt;
&lt;h2&gt;Exploratory&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;Weeks after I wrote (but didn&amp;#8217;t publish) this post I encountered &lt;a href="https://www.youtube.com/watch?v=dXQPL9GooyI"&gt;Why Greatness Cannot Be Planned: The Myth of the Objective&lt;/a&gt;, a presentation by Kenneth&amp;nbsp;Stanley:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/dXQPL9GooyI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Setting an objective can block its own achievement.  It can be an obstacle to creativity and innovation in general.  Without protection of individual autonomy collaboration can become dangerously&amp;nbsp;objective.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The example he uses is manually searching a space of  &lt;a href="https://en.wikipedia.org/wiki/Nonlinear_system"&gt;nonlinear&lt;/a&gt; image generation to find interesting images.  The positive &lt;a href="http://picbreeder.com/"&gt;example&lt;/a&gt; is one where people explore, branching from novel examples until something recognizable&amp;nbsp;emerges:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="/media/picbreeder-pics.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;One negative example is one where an algorithm explores with a goal in&amp;nbsp;mind:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="/media/picbreeder-trained.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Another negative example is selection by voting, instead of personal exploration; a product of &lt;em&gt;convergent consensus&lt;/em&gt; instead of &lt;em&gt;divergent treasure hunting&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="/media/picbreeder-competitor.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you decide what you are looking for, you are unlikely to find it.&lt;/em&gt;  This generated image search space is &lt;em&gt;deliberately&lt;/em&gt; nonlinear, so it&amp;#8217;s difficult to understand how actions affect outcomes.  Though artificial, I think the example is still valid: in a competitive environment, the thing you are searching for is hard to find, because if it was not hard then someone would have found it.  And it&amp;#8217;s probably hard because actions affect outcomes in unexpected&amp;nbsp;ways.&lt;/p&gt;
&lt;p&gt;You could describe this observation as another way of describing &lt;a href="http://chris-said.io/2016/02/28/four-pitfalls-of-hill-climbing/"&gt;the pitfalls of hill climbing&lt;/a&gt;: getting stuck at local maximums.  Maybe an easy fix is to add a little randomness, to bounce around, to see what lies past the hill you&amp;#8217;ve found.  But the hills themselves can be distractions: each hill supposes a measurement.  The divergent search doesn&amp;#8217;t just reveal novel solutions, but it can reveal a novel rubric for&amp;nbsp;success.&lt;/p&gt;
&lt;p&gt;This is also a similar observation to that in &lt;a href="https://en.wikipedia.org/wiki/The_Innovator%27s_Dilemma"&gt;Innovator&amp;#8217;s Dilemma&lt;/a&gt;: specifically that in these cases good management consistently and deliberately keeps a company &lt;em&gt;away&lt;/em&gt; from novelty and onto the established track, and it does so by paying attention to the feedback that defines the company&amp;#8217;s (current) success.  The &lt;em&gt;disruptive innovation&lt;/em&gt;, a term somewhat synonymous with the book, is an innovation that requires a change in metrics, and that a large portion of the innovation is &lt;em&gt;finding&lt;/em&gt; the metric (and so finding the market), not implementing the maximizing&amp;nbsp;solution.&lt;/p&gt;
&lt;p&gt;But I digress from the topic of data.  If we&amp;#8217;re going to be data driven to entirely new directions, we may need data that doesn&amp;#8217;t answer a question, doesn&amp;#8217;t support a decision, but just tells us about things we don&amp;#8217;t know.  To support exploration, not based on a hypothesis which we confirm or reject based on the data, because we are still trying to discover our hypothesis.  We use the data to look for the hidden variable, the unsolved need, the desire that has not been&amp;nbsp;articulated.&lt;/p&gt;
&lt;p&gt;I think we look for this kind of data more often than we would admit.  Why else would we want complex visualizations?  The visualizations are our attempt at finding a pattern we don&amp;#8217;t expect to&amp;nbsp;find.&lt;/p&gt;
&lt;h2&gt;In&amp;nbsp;Conclusion&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m lousy at conclusions.  All those words up there are like data, and I&amp;#8217;m curious what they mean, but I haven&amp;#8217;t figured it out&amp;nbsp;yet.&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry><entry><title>A Product Journal: CSS Object Model</title><link href="https://ianbicking.org/blog/2015/12/product-journal-css-object-model.html" rel="alternate"></link><published>2015-12-29T00:00:00-06:00</published><updated>2015-12-29T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-12-29:/blog/2015/12/product-journal-css-object-model.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And now for something entirely&amp;nbsp;technical!&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve had a contributor from &lt;a href="https://outernet.is/"&gt;Outernet&lt;/a&gt; exploring ways of using PageShot for capturing pages for distribution on their network.  Outernet satellite-based content …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And now for something entirely&amp;nbsp;technical!&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve had a contributor from &lt;a href="https://outernet.is/"&gt;Outernet&lt;/a&gt; exploring ways of using PageShot for capturing pages for distribution on their network.  Outernet satellite-based content distribution network.  It&amp;#8217;s a neat idea, but one challenge is that it&amp;#8217;s &lt;em&gt;very&lt;/em&gt; one-way – anyone (given the equipment) can listen in to what the satellites broadcast, but that&amp;#8217;s it (at least for the most interesting use cases).  Lots of modern websites aren&amp;#8217;t setup well for that, so acquiring content can be&amp;nbsp;tricky.&lt;/p&gt;
&lt;p&gt;Given that interest I started thinking more about inlining resources.  We&amp;#8217;ve been hotlinking to resources simply out of laziness.  Some things are easy to handle, but &lt;span class="caps"&gt;CSS&lt;/span&gt; is a bit more annoying because of the indirection of &lt;code&gt;@import&lt;/code&gt; and yet more relatively URLs.  Until I started poking around I had no idea that there is a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model"&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt; Object Model&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Given this there is now experimental support for inlining all &lt;span class="caps"&gt;CSS&lt;/span&gt; rules into the captured page in PageShot.  The support is still incomplete, and my understanding of everything you can do with &lt;span class="caps"&gt;CSS&lt;/span&gt; is still incomplete.  But the code isn&amp;#8217;t very hard.  One fun thing is that we can test each &lt;span class="caps"&gt;CSS&lt;/span&gt; rule against the page and see if it is needed.  Doing this typically allows 80% of rules to be&amp;nbsp;omitted.&lt;/p&gt;
&lt;p&gt;Some highlights of what I&amp;#8217;ve learned so&amp;nbsp;far:&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s two interesting objects: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStylesheet"&gt;CSSStylesheet&lt;/a&gt; (which inherits from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Stylesheet"&gt;Stylesheet&lt;/a&gt;) and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule"&gt;CSSRule&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;document.styleSheets&lt;/code&gt;: a list of all stylesheets, both remote (&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;), inline, and imported (&lt;code&gt;@import&lt;/code&gt;)&amp;nbsp;stylesheets.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;styleSheet.href&lt;/code&gt;: the &lt;span class="caps"&gt;URL&lt;/span&gt; of the stylesheet (&lt;code&gt;null&lt;/code&gt; if it was&amp;nbsp;inline).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;styleSheet.cssRules&lt;/code&gt;: a list of all the rules in the&amp;nbsp;stylesheet.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;cssRule.type&lt;/code&gt;: there&amp;#8217;s &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule#Type_constants"&gt;several types of rules&lt;/a&gt;.  I&amp;#8217;ve chosen to ignore everything but &lt;code&gt;STYLE_RULE&lt;/code&gt; and &lt;code&gt;MEDIA_RULE&lt;/code&gt; out of&amp;nbsp;laziness.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cssRule.cssRules&lt;/code&gt;: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media"&gt;media rules&lt;/a&gt; (like &lt;code&gt;@media (max-width: 600px) {.nav {display: none}}&lt;/code&gt;) contain sub-rules (&lt;code&gt;.nav {display: none}&lt;/code&gt; in this&amp;nbsp;case).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cssRule.parentRule&lt;/code&gt;: points back to a media rule if there is&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cssRule.parentStyleSheet&lt;/code&gt;: points back to the parent stylesheet.  There are probably ways of nesting media rules and stylesheets (that can have &lt;code&gt;media&lt;/code&gt; attributes) in ways to create compound media rules that I haven&amp;#8217;t accounted&amp;nbsp;for.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cssRule.cssText&lt;/code&gt;: the text of the rule.  This includes both selectors and style, or media queries and all the sub-rules.  I just split on &lt;code&gt;{&lt;/code&gt; to separate the selector or query.  I &lt;em&gt;assume&lt;/em&gt; these are representations of the parsed &lt;span class="caps"&gt;CSS&lt;/span&gt;, and so normalized, but I haven&amp;#8217;t explored that in&amp;nbsp;detail.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s all sorts of ways to create trees of media restrictions and other complexities that I know I haven&amp;#8217;t taken account of, but things Mostly Work&amp;nbsp;Anyway.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an example that makes use of this to create a single inline stylesheet for a page containing only necessary rules (using &lt;span class="caps"&gt;ES6&lt;/span&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;allRules&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// CSS rules, some of which may be media queries, form a kind of tree; this gets&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// this puts all the style rules in a flat list&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addRules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssRules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MEDIA_RULE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;addRules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STYLE_RULE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;allRules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Then we traverse all the stylesheets and grab rules from each:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;styleSheet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;styleSheets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;styleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;styleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;screen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// This is a stylesheet for some media besides screen&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;addRules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styleSheet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Then we collect the rules up again, clustered by media queries (with&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// rulesByMedia[&amp;quot;&amp;quot;] for no media query)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rulesByMedia&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;allRules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Skip selectors that don&amp;#39;t match anything&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentRule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentRule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MEDIA_RULE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentRule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;rulesByMedia&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rulesByMedia&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;rulesByMedia&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Now we can create a new clean stylesheet:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rulesByMedia&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; {&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rulesByMedia&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;style&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;/style&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviously there could be rules that apply to &lt;span class="caps"&gt;DOM&lt;/span&gt; elements that aren&amp;#8217;t present &lt;em&gt;right now&lt;/em&gt; but could be created.  And I&amp;#8217;m sure it&amp;#8217;s omitting fonts and animations.  But it&amp;#8217;s fun to hack around&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;It might be fun to use this hooked up to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"&gt;mutation observers&lt;/a&gt; during your testing and find orphaned&amp;nbsp;rules.&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry></feed>