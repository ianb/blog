<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ian Bicking: a blog - misc</title><link href="https://www.ianbicking.org/" rel="alternate"></link><link href="https://www.ianbicking.org/feeds/misc.atom.xml" rel="self"></link><id>https://www.ianbicking.org/</id><updated>2020-11-18T00:00:00-06:00</updated><entry><title>Firefox Was Always Enough</title><link href="https://www.ianbicking.org/blog/2020/11/firefox-was-always-enough.html" rel="alternate"></link><published>2020-11-18T00:00:00-06:00</published><updated>2020-11-18T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2020-11-18:/blog/2020/11/firefox-was-always-enough.html</id><summary type="html">&lt;p&gt;There are many concerns about Mozilla right now, and reason to be concerned. While I am no longer with Mozilla, it’s still a place that supported me for many years; I believe in Mozilla and want the project to&amp;nbsp;succeed.&lt;/p&gt;
&lt;h1&gt;Mozilla&amp;#8217;s one&amp;nbsp;product&lt;/h1&gt;
&lt;p&gt;It’s not always clear …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are many concerns about Mozilla right now, and reason to be concerned. While I am no longer with Mozilla, it’s still a place that supported me for many years; I believe in Mozilla and want the project to&amp;nbsp;succeed.&lt;/p&gt;
&lt;h1&gt;Mozilla&amp;#8217;s one&amp;nbsp;product&lt;/h1&gt;
&lt;p&gt;It’s not always clear from the outside, but Mozilla has always made the bulk of its money from selling the preferred placement of a search engine in Firefox. That’s been Google in the U.S., except for a brief stint with&amp;nbsp;Yahoo.&lt;/p&gt;
&lt;p&gt;Firefox was forked from the now-defunct Mozilla Suite in 2002, an experimental project by Blake Ross, Joe Hewitt, and David Hyatt. By 2003 all three had left for other&amp;nbsp;companies.&lt;/p&gt;
&lt;p&gt;Firefox went on to great success, peaking at &lt;a href="https://gs.statcounter.com/browser-market-share#monthly-200901-202010"&gt;30% of browser marketshare&lt;/a&gt; and hundreds of millions of users. Firefox is Mozilla&amp;#8217;s one product, greatest success, and the reason Mozilla still&amp;nbsp;exists.&lt;/p&gt;
&lt;h1&gt;The pursuit of revenue&amp;nbsp;diversity&lt;/h1&gt;
&lt;p&gt;Throughout the entire ten years I was at Mozilla, we were always concerned about “revenue&amp;nbsp;diversity”.&lt;/p&gt;
&lt;p&gt;It’s uncomfortable to get most of your income from your competitor. For many years Google added insult by advertising Chrome on those very search&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;But to be clear: the money always kept coming! On a per-user basis it even increased over the years. There was never a collapse of search-deal&amp;nbsp;revenue.&lt;/p&gt;
&lt;p&gt;But Mozilla is going through some problems: there was a major layoff in January 2020, and I myself was part of 25% of the workforce laid off in August 2020. The latter was blamed on a Covid downturn, but I believe Covid only accelerated layoffs that were otherwise&amp;nbsp;inevitable.&lt;/p&gt;
&lt;p&gt;And the money is still coming in! Mozilla is still getting more money than it did when its marketshare had peaked. It’s still getting enough money to pay for a large&amp;nbsp;staff.&lt;/p&gt;
&lt;p&gt;The answer is clear to me: if Mozilla wants to improve its financial position, then it needs to increase the number of Firefox users. That’s always been the right focus, and it’s still the right&amp;nbsp;focus.&lt;/p&gt;
&lt;h1&gt;Founders and&amp;nbsp;vision&lt;/h1&gt;
&lt;p&gt;I remember when &lt;a href="https://en.wikipedia.org/wiki/Brendan_Eich"&gt;Brendan Eich&lt;/a&gt; was &lt;a href="https://blog.mozilla.org/blog/2014/04/03/brendan-eich-steps-down-as-mozilla-ceo/"&gt;briefly the Mozilla &lt;span class="caps"&gt;CEO&lt;/span&gt;&lt;/a&gt;. It was noted that a founder has a special place and ability as a leader. We never got to find out, but there was some sense to it: a founder has particular authority, without getting that authority through consensus-building. If you bring in a decisive outsider they will probably fail, lacking the authority (and probably the wisdom) to guide the company. If you bring in or promote someone appropriate for a more mature company, then the company may be operated well but the choices made will be more&amp;nbsp;conservative.&lt;/p&gt;
&lt;p&gt;The problem? &lt;em&gt;Firefox’s&lt;/em&gt; founders are all long, long gone. Brendan and &lt;a href="https://en.wikipedia.org/wiki/Mitchell_Baker"&gt;Mitchell&lt;/a&gt; are &lt;em&gt;Mozilla&amp;#8217;s&lt;/em&gt; founders. This isn’t to say that the people that founded Firefox had entirely unique perceptions or abilities, but a founder has a unique ability to &lt;em&gt;advocate&lt;/em&gt; for a vision. To be&amp;nbsp;heard&amp;#8230;&lt;/p&gt;
&lt;h1&gt;Firefox vs.&amp;nbsp;Platform&lt;/h1&gt;
&lt;p&gt;When I joined Mozilla there were two large&amp;nbsp;groups:&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Firefox Group&lt;/strong&gt; would be the ones responsible for things like tabs, bookmarks, history, the &lt;span class="caps"&gt;URL&lt;/span&gt; bar, your profiles, cookie management, data sync and backup, etc. (Ironically these parts were called “chrome” before Chrome even&amp;nbsp;existed.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Platform&lt;/strong&gt; built &lt;a href="https://en.wikipedia.org/wiki/Gecko_(software)"&gt;Gecko&lt;/a&gt;, made the renderer, implemented new Web APIs, handled networking. Firefox was always the only meaningful consumer of this platform, but Platform didn’t think of itself as simply serving Firefox’s&amp;nbsp;needs.&lt;/p&gt;
&lt;p&gt;Platform was the dominant group, the ones who called the shots, while the Firefox frontend developers were just trying to keep&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;Later the two groups would be combined into the singular Firefox group, which I think was an important organizational improvement. But the underlying tensions of these two perspectives still&amp;nbsp;persisted&amp;#8230;&lt;/p&gt;
&lt;h1&gt;What is Firefox&amp;nbsp;for?&lt;/h1&gt;
&lt;p&gt;At some point I took to asking people in Mozilla: what is the purpose of Firefox? This was during Firefox 3 days when optimism for the product was&amp;nbsp;low.&lt;/p&gt;
&lt;p&gt;I expected a few answers, like to give the users of Firefox a great experience, or to give us a delivery vehicle for our principles of autonomy and privacy, or to keep the web relevant and vibrant in people’s&amp;nbsp;lives.&lt;/p&gt;
&lt;p&gt;And I did get all those answers, but also one I didn&amp;#8217;t expect: Firefox exists just to give Mozilla a seat at the table when the web is&amp;nbsp;defined.&lt;/p&gt;
&lt;p&gt;To explain: the web, and much of the internet, is based on standards, maintained by places like &lt;a href="https://www.w3.org/"&gt;&lt;span class="caps"&gt;W3C&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://whatwg.org/"&gt;&lt;span class="caps"&gt;WHATWG&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://www.ecma-international.org/"&gt;&lt;span class="caps"&gt;ECMA&lt;/span&gt;&lt;/a&gt;, and the &lt;a href="https://www.ietf.org/"&gt;&lt;span class="caps"&gt;IETF&lt;/span&gt;&lt;/a&gt;. These standards can help protect users, maintain privacy, expand the web platform, make technology more widely accessible, give people autonomy, anonymity, security. Or a standard can work against all those&amp;nbsp;principles.&lt;/p&gt;
&lt;p&gt;The standards don’t just apply to Firefox users. They affect all browsers and many devices that aren’t even browsers. So if Mozilla can positively affect these standards it can benefit&amp;nbsp;everyone.&lt;/p&gt;
&lt;p&gt;One good way to get a seat at the table is to be an important implementor. Standards are sometimes created with no implementations, but these usually don’t go anywhere. With that lesson learned, browser implementors have a lot of weight, both about how things are standardized and where attention is&amp;nbsp;directed.&lt;/p&gt;
&lt;p&gt;With this in mind the argument is: Firefox has to be popular enough that Mozilla has at least a veto over problematic points of standards, and the ability to vigorously advance positive&amp;nbsp;standards.&lt;/p&gt;
&lt;p&gt;This is a real thing at Mozilla. It still is to this day, even if exact kind of influence Mozilla is trying to apply has&amp;nbsp;changed.&lt;/p&gt;
&lt;p&gt;This is terrible for&amp;nbsp;Firefox.&lt;/p&gt;
&lt;h1&gt;Firefox was never&amp;nbsp;enough&lt;/h1&gt;
&lt;p&gt;Mozilla was never going to be happy building a great browser that its users loved. And don’t we all try to do the thing that makes us happy? If you don’t think a great browser will make you happy,&amp;nbsp;then&amp;#8230;&lt;/p&gt;
&lt;p&gt;And what is a better browser? Remember what was really cool in Firefox? Tabs! That was so long ago&amp;#8230; but why were tabs great? What are they for? I wish I could tell you that Mozilla was filled with competing pet theories and solutions based on those theories. It was not. (But it’s not too&amp;nbsp;late.)&lt;/p&gt;
&lt;p&gt;I see four visions for advancement of&amp;nbsp;browsers:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quantitative improvement:&lt;/strong&gt; The browser is window onto websites, and we should make it the best window it can be. Faster, lighter. Everything it is now, but more. (See &lt;a href="https://servo.org/"&gt;Servo&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All encompassing:&lt;/strong&gt; The web hosts most of our desktop applications. It should host even more of them, it should host mobile applications, it should be the universal platform. More APIs. More ways to package and present sites. (See &lt;a href="https://www.chromium.org/teams/web-capabilities-fugu"&gt;Project Fugu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technological pessimism:&lt;/strong&gt; The internet is terrible and we should make it less terrible. We need better privacy. Better security. More process isolation, more sandboxing. Less APIs and more restrictions on those APIs. (See &lt;a href="https://www.mozilla.org/en-US/firefox/unfck/"&gt;Unfck the Internet&lt;/a&gt; or &lt;a href="https://brave.com/"&gt;Brave&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A better browser:&lt;/strong&gt; The browser is used to… browse. To manage tasks, multitask, remember history, manage navigation, get us back to where we want to go. It’s an information tool. Browser should have better tab and task management, easier recall, tools to capture and move information. (See new browsers like &lt;a href="https://vivaldi.com/"&gt;Vivaldi&lt;/a&gt;, &lt;a href="https://tryshift.com/"&gt;Shift&lt;/a&gt;, and up and coming things like [&lt;a href="https://www.getamna.com/"&gt;Amna&lt;/a&gt; or &lt;a href="https://thebrowser.company/"&gt;The Browser Company&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Chrome started out very focused on &lt;em&gt;quantitative improvement&lt;/em&gt; but seems to be expanding towards &lt;em&gt;all encompassing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When I started at Mozilla it was focused on &lt;em&gt;all encompassing&lt;/em&gt; (culminating in &lt;a href="https://en.wikipedia.org/wiki/Firefox_OS"&gt;Firefox &lt;span class="caps"&gt;OS&lt;/span&gt;&lt;/a&gt;). But Firefox was frankly underwater quantitatively, and &lt;a href="https://blog.mozilla.org/blog/2017/11/14/introducing-firefox-quantum/"&gt;Quantum&lt;/a&gt; represented a bit of a pivot to &lt;em&gt;quantitative improvement&lt;/em&gt;. Now it&amp;#8217;s focused on &lt;em&gt;technological pessimism&lt;/em&gt; in the form of a security and privacy&amp;nbsp;emphasis.&lt;/p&gt;
&lt;p&gt;I don’t have a read on Edge, and as far as I can tell Safari isn’t into anything. Small upstarts seem interested in filling the &lt;em&gt;better browsing&lt;/em&gt; vacuum, and I wish them luck, but it&amp;#8217;s a hard&amp;nbsp;market.&lt;/p&gt;
&lt;p&gt;An organization with a love of the web and an understanding of the technology underneath the web could do something great. If only Firefox could be enough for&amp;nbsp;Mozilla.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No comments here, maybe reply &lt;a href="https://twitter.com/ianbicking/status/1329071123342913536"&gt;on&amp;nbsp;Twitter?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="misc"></category></entry><entry><title>Project ideas for (what’s left of) 2020</title><link href="https://www.ianbicking.org/blog/2020/09/project-ideas-2020.html" rel="alternate"></link><published>2020-09-15T00:00:00-05:00</published><updated>2020-09-15T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2020-09-15:/blog/2020/09/project-ideas-2020.html</id><summary type="html">&lt;script type="application/json" class="js-hypothesis-config"&gt;
{
  "showHighlights": true
}
&lt;/script&gt;

&lt;script src="https://hypothes.is/embed.js" async&gt;&lt;/script&gt;

&lt;style&gt;
.entry-content {
  padding-left: 4em;
}
.entry-content h2 {
  color: rgb(251, 245, 222);
  background-image: linear-gradient(70deg, rgb(46, 46, 35), rgb(46, 46, 35) 95%, transparent 95%, transparent 100%);
  margin-top: 3em;
  padding-left: 2em;
  margin-left: -4em
}
.entry-content h3 {
  margin-top: 2em;
  margin-left: -1em;
}
&lt;/style&gt;

&lt;p&gt;While I&amp;#8217;m conflicted with the need to find a …&lt;/p&gt;</summary><content type="html">&lt;script type="application/json" class="js-hypothesis-config"&gt;
{
  "showHighlights": true
}
&lt;/script&gt;

&lt;script src="https://hypothes.is/embed.js" async&gt;&lt;/script&gt;

&lt;style&gt;
.entry-content {
  padding-left: 4em;
}
.entry-content h2 {
  color: rgb(251, 245, 222);
  background-image: linear-gradient(70deg, rgb(46, 46, 35), rgb(46, 46, 35) 95%, transparent 95%, transparent 100%);
  margin-top: 3em;
  padding-left: 2em;
  margin-left: -4em
}
.entry-content h3 {
  margin-top: 2em;
  margin-left: -1em;
}
&lt;/style&gt;

&lt;p&gt;While I&amp;#8217;m conflicted with the need to find a new job, versus using this break from employment to do things I don&amp;#8217;t otherwise do, one way or another I feel compelled to &lt;em&gt;make something&lt;/em&gt;. I started writing down all the things I&amp;#8217;d like to do and now I have to choose one or&amp;nbsp;two.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve embedded &lt;a href="https://web.hypothes.is/"&gt;Hypothes.is&lt;/a&gt; on this page, which allows inline comments. The controls are floating in the top right of the page. If you have thoughts or resources related to any of these ideas that would be much&amp;nbsp;appreciated.&lt;/p&gt;
&lt;p&gt;I also hope some of these ideas will also spark your own imaginations, or, as so often happens to me, brings back to mind some forgotten thought you had meant to&amp;nbsp;pursue.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href="#job"&gt;Job&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#find-a-job"&gt;Find a&amp;nbsp;job&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#figure-out-what-job"&gt;Figure out what job I&amp;nbsp;want&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#web-projects"&gt;Web projects&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#document-store"&gt;Web-based document store / &lt;span class="caps"&gt;OS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#automated-exploration"&gt;Directed and automated exploratory testing of web&amp;nbsp;applications&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#simple-cms"&gt;Simple, reflective &lt;span class="caps"&gt;CMS&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#personal-automation"&gt;Personal web automation&lt;/a&gt;
        &lt;ol&gt;
          &lt;li&gt;&lt;a href="#contribute-to-clipper"&gt;Contribute to a web&amp;nbsp;clipper&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href="#remaking-hotdish"&gt;Remake Hotdish. Also make&amp;nbsp;bots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#hypercard"&gt;Hypercard-like&amp;nbsp;thing&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#kids"&gt;For the kids&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#wikipedia"&gt;Child-focused Wikipedia&amp;nbsp;browser&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#microworlds"&gt;A foundation for a series of microworld&amp;nbsp;environments&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#jslogo"&gt;Jslogo environment / &lt;span class="caps"&gt;IDE&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#lo-fi-page-creator"&gt;Lo-fi text web page&amp;nbsp;creator&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#computing-home"&gt;Can computing feel like it has a sense of space, a&amp;nbsp;home?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#program-your-parent"&gt;Program your parent: a board&amp;nbsp;game&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#scratch-extension"&gt;Create a Scratch&amp;nbsp;extension&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#natural-language"&gt;Natural language&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#chat-bot-builder"&gt;Chat bot&amp;nbsp;builder&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#intent-parser-if"&gt;Use an intent parser to build a text&amp;nbsp;adventure&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#voice-news-reader"&gt;Voice-activated news&amp;nbsp;reader&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#mock-language-interface"&gt;Mock out a broad natural language&amp;nbsp;interface&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#brain-in-a-jar"&gt;Brain-in-a-jar dialog&amp;nbsp;game&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#interview-chatbot"&gt;Interview&amp;nbsp;chatbot&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#emotional-tamagotchi"&gt;Emotional&amp;nbsp;Tamagotchi&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#programming-languages"&gt;Programming languages&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#new-programming-syntax"&gt;Try to come up with a new category of programming&amp;nbsp;syntax&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#functional-core-notebook"&gt;Functional core&amp;nbsp;notebook&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#symbolic-execution"&gt;Something with symbolic&amp;nbsp;execution&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#reverse-execution"&gt;Attempt to reverse&amp;nbsp;execution&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#partial-evaluation"&gt;Partial evaluation as the execution&amp;nbsp;engine&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#ai"&gt;&lt;span class="caps"&gt;AI&lt;/span&gt;&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#binocular-vision"&gt;Binocular vision and image&amp;nbsp;processing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#nn-from-scratch"&gt;Neural networks from&amp;nbsp;scratch&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#not-computing"&gt;Not (just) computing&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href="#physical-workspace"&gt;Physical workspace&amp;nbsp;optimizations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#executive-function"&gt;Something involving executive&amp;nbsp;function&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#sms-watch"&gt;&lt;span class="caps"&gt;SMS&lt;/span&gt;-based dispatch system for the local neighborhood&amp;nbsp;watch&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#southside-greenway"&gt;Freshen up Southside Greenway&amp;nbsp;proposal&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#correspondence"&gt;Long-form slow-paced email correspondence&amp;nbsp;platform&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#game-word"&gt;Game&amp;nbsp;world&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#remembrance-agent"&gt;Remembrance&amp;nbsp;Agent&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#arcology"&gt;Arcology requirements and&amp;nbsp;constraints&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#fractals"&gt;Play with&amp;nbsp;fractals&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#fiction"&gt;Write&amp;nbsp;fiction&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="#beliefs"&gt;Document my&amp;nbsp;beliefs&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;&lt;span id="job"&gt;Job&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="find-a-job"&gt;Find a&amp;nbsp;job&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I’m unemployed. It’s probably a good idea to find a&amp;nbsp;job.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I do need to find a&amp;nbsp;job&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I usually have a job, and this is a unique moment when I don’t have a&amp;nbsp;job&lt;/p&gt;
&lt;h3&gt;&lt;span id="figure-out-what-job"&gt;Figure out what job I&amp;nbsp;want&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I’m unemployed, I should probably figure out what I want to&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;I have a sense of what I want to do, an intersection of a Kind Of Work, and Topics Of&amp;nbsp;Interest.&lt;/p&gt;
&lt;p&gt;The Kind Of Work I want to do probably goes under the title of Product Engineer or Research Engineer, but those titles aren’t used universally or particularly well understood. I want to make new things, engaged individually and as part of a team in the ongoing discovery of the product scope. I’d like to be part of a small, diverse, multidisciplinary&amp;nbsp;team.&lt;/p&gt;
&lt;p&gt;The Topics Of Interest would&amp;nbsp;include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New user interfaces (including&amp;nbsp;voice)&lt;/li&gt;
&lt;li&gt;Edtech with a focus on pedagogy (I’m not as interested in tools supporting bureaucracy of&amp;nbsp;education)&lt;/li&gt;
&lt;li&gt;Efforts directed at &lt;a href="https://en.wikipedia.org/wiki/Executive_functions"&gt;executive&amp;nbsp;function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Productivity tools, using the lens of executive function (how can our tools support the executive function of&amp;nbsp;users)&lt;/li&gt;
&lt;li&gt;Psychological&amp;nbsp;well-being&lt;/li&gt;
&lt;li&gt;I have a technical interest in user-empowering automation&amp;nbsp;tools&lt;/li&gt;
&lt;li&gt;I have some &lt;a href="https://www.ianbicking.org/blog/2020/09/a-history-of-projects.html#togetherjs"&gt;interest in collaboration&amp;nbsp;tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I do enjoy making development tools, but I’m not sure it’s where I want to go with my&amp;nbsp;career&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My tasks here are (a) working better at describing my goals, and (b) verifying the goals. What do I really want to do, and what do I want to want to&amp;nbsp;do?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Sets me up to find the right job for&amp;nbsp;me&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Encourages me to focus on something that might not&amp;nbsp;exist&lt;/p&gt;
&lt;h2&gt;&lt;span id="web-projects"&gt;Web&amp;nbsp;projects&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="document-store"&gt;Web-based document&amp;nbsp;store&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;This is a way for applications and personal documents to&amp;nbsp;interact.&lt;/p&gt;
&lt;p&gt;This thinking came out of the blog post &lt;a href="http://www.ianbicking.org/blog/2019/01/we-need-open-hosting-platforms.html"&gt;&lt;em&gt;We Need Open Hosting Platforms&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea for the system is really just documents. These could be notes, essays, images, slideshows, or anything that the user authors. It’s not like a filesystem that also contains all kinds of system files and programs that don’t belong and aren’t managed by the user. It &lt;em&gt;is&lt;/em&gt; like Google Drive or Dropbox or whatever, but&amp;#8230;&amp;nbsp;open?&lt;/p&gt;
&lt;p&gt;It’s also not just named blobs. There’s lots of options for data storage, but it’s just a bunch of bytes and a content-type. Here we want to include other&amp;nbsp;information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How can the document be&amp;nbsp;edited?&lt;/li&gt;
&lt;li&gt;How can the document be&amp;nbsp;validated?&lt;/li&gt;
&lt;li&gt;Core metadata (e.g.,&amp;nbsp;title)&lt;/li&gt;
&lt;li&gt;Extensible metadata (e.g., images have&amp;nbsp;sizes)&lt;/li&gt;
&lt;li&gt;How can the document be viewed in&amp;nbsp;public?&lt;/li&gt;
&lt;li&gt;How can it be embedded in a web&amp;nbsp;page?&lt;/li&gt;
&lt;li&gt;What permissions do other people have? What permissions are&amp;nbsp;possible?&lt;/li&gt;
&lt;li&gt;Versioning&lt;/li&gt;
&lt;li&gt;Difference&amp;nbsp;display&lt;/li&gt;
&lt;li&gt;Copying and&amp;nbsp;linking&lt;/li&gt;
&lt;li&gt;Commenting&lt;/li&gt;
&lt;li&gt;Collaborative&amp;nbsp;editing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea here is that there is a framework for creating new kinds of documents, with both general &lt;span class="caps"&gt;UI&lt;/span&gt; (applicable to any document) and specific &lt;span class="caps"&gt;UI&lt;/span&gt; for different document&amp;nbsp;types.&lt;/p&gt;
&lt;p&gt;Things like “editors” are static bundles of JavaScript and &lt;span class="caps"&gt;HTML&lt;/span&gt; that obey certain protocols. Once you’ve got a document you might upgrade the editor, but you’ll also have a static copy of the editor in&amp;nbsp;perpetuity.&lt;/p&gt;
&lt;p&gt;A goal here is to allow open source developers to create new and interesting interfaces and interactions, without any of the worries of hosting. And users can use them without any worries about being bound to a service, and without placing any burden on the open source developer to maintain any kind of&amp;nbsp;service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I think the F/&lt;span class="caps"&gt;OSS&lt;/span&gt; community lacks innovation in the area of user experience, and the lack of a &lt;em&gt;place&lt;/em&gt; to do that work is part of it. Thinking critically about documents in the abstract is interesting to&amp;nbsp;me&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; It’s pretty ambitious and I probably don’t have the endurance to make this work really happen. It’s only as good as other people might make&amp;nbsp;it&lt;/p&gt;
&lt;h3&gt;&lt;span id="automated-exploration"&gt;Directed and automated exploratory testing of web&amp;nbsp;applications&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I think this would be a great business, and the while the automated testing environment grows year-by-year and new ideas emerge, I still think there’s huge unmet&amp;nbsp;potential.&lt;/p&gt;
&lt;p&gt;The web platform is pretty well-defined and sandboxed. At any moment a web application page supports dozens, but not thousands, of reasonable “next operations”: a click, keyboard entry, pasting, dragging, so forth. The protocols that support web debugging also expose much of the metadata you need (the &lt;span class="caps"&gt;DOM&lt;/span&gt; itself does not). So I believe automated exploration of a web is feasible and&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;hate&lt;/em&gt; scripted testing, such as Selenium. Most breakage of Selenium tests are because of tooling reasons, and of the remainder most are because of the test detecting intentional and correct changes. This testing punishes positive change instead of enabling&amp;nbsp;change.&lt;/p&gt;
&lt;p&gt;The most conservative attempt to fix this test breakage problem is “resilient selectors”, that deal with fragile selectors. This is about the most modest fix I can&amp;nbsp;imagine!&lt;/p&gt;
&lt;p&gt;A testing system built close to the web rendering system itself could fix many of the tooling issues, and many of the timing issues. &lt;a href="https://developers.google.com/web/tools/puppeteer"&gt;Puppeteer&lt;/a&gt; is an improvement&amp;#8230; but it’s a change to the paradigm that I think would really help: instead of testing against a script, the automation framework should just try things with an emphasis on reporting the result instead of comparing the function against a separately-maintained ideal (in the form of a scripted&amp;nbsp;test).&lt;/p&gt;
&lt;p&gt;I’ve put a lot of thought into this at Mozilla, though my pitches fell on deaf ears. I’m as optimistic about the idea now as I was many years ago when I started experimenting. But this is a Hard Work idea, not a Have Fun idea. I’m not opposed to hard work, but I’m not going to do it just for the fun, because it isn’t that&amp;nbsp;fun!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I’m personally convinced of the potential, &lt;em&gt;and&lt;/em&gt; there are big interesting unanswered&amp;nbsp;questions&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; It’s too big. It’s a developer tool, which is fine, but that&amp;#8217;s probably not what I want to do&amp;nbsp;long-term&lt;/p&gt;
&lt;h3&gt;&lt;span id="simple-cms"&gt;Simple, reflective &lt;span class="caps"&gt;CMS&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Can a &lt;span class="caps"&gt;CMS&lt;/span&gt; be self-hosting? If you just do it as a file editor with the right sort of authentication, I suppose so. But can a &lt;em&gt;quality&lt;/em&gt; &lt;span class="caps"&gt;CMS&lt;/span&gt; be self-hosting? One that doesn’t invite you to corrupt the app itself, that can be updated, that is extensible without going deep into the code, that handles both the individual bits of content and the aggregate content and the change of content over&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;CMS&lt;/span&gt; wouldn’t actually be fully self-hosting, I imagine a an underlying storage and rendering layer that is fixed, but not &lt;span class="caps"&gt;UI&lt;/span&gt;-specific. And it requires some things like a rescue &lt;span class="caps"&gt;UI&lt;/span&gt; that can’t itself be&amp;nbsp;destroyed.&lt;/p&gt;
&lt;p&gt;I’d want to prioritize a small codebase. Just making a featureful &lt;span class="caps"&gt;CMS&lt;/span&gt; isn’t a useful exercise for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I’ve been &lt;a href="https://www.ianbicking.org/blog/2020/09/a-history-of-projects.html#landscaper"&gt;thinking about this sort of thing a long&amp;nbsp;time&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I won’t do anything with the result, and the world is full enough of CMSs that no one else will&amp;nbsp;either&lt;/p&gt;
&lt;h3&gt;&lt;span id="personal-automation"&gt;Personal web&amp;nbsp;automation&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Most of the &lt;a href="https://www.ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html"&gt;web ideas I’ve had at Mozilla&lt;/a&gt; now leave me feeling bored. I’m not trying to be a professional right&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;But web and browser automation is still stuck in my head. Right now can I make something useful for &lt;em&gt;just me&lt;/em&gt;? What processes should I be optimizing? What interactions need different controls? How would I want to access those&amp;nbsp;controls?&lt;/p&gt;
&lt;p&gt;I might start by simply coding up the extension, and extending it in-place instead of creating any user-programmable&amp;nbsp;tool.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Could be personally useful. Thinking this stuff through is interesting to me, and now is a good time for&amp;nbsp;self-experimentation&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; It’s just diddling around with the same stuff I’ve been doing for a long&amp;nbsp;time&lt;/p&gt;
&lt;h4&gt;&lt;span id="contribute-to-clipper"&gt;Contribute to a web&amp;nbsp;clipper&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;I came upon &lt;a href="https://github.com/jhlyeung/rumin-web-clipper"&gt;Rumin Web Clipper&lt;/a&gt; recently (though I haven’t reviewed the current state of the art). It’s the sort of thing I’ve worked on before, and I have a lot of ideas in this area, but I don’t want to be in charge of&amp;nbsp;anything.&lt;/p&gt;
&lt;p&gt;I could find a site or two to try to scrape from and submit some PRs. Then the next step is to take some of that data and put it &lt;em&gt;into&lt;/em&gt; a site: the other half of structured data&amp;nbsp;extraction.&lt;/p&gt;
&lt;p&gt;Data extraction and injection is an interesting lens on&amp;nbsp;automation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; My contributions could be useful even if I don’t stick with it. I can focus more on what I care about and less on&amp;nbsp;infrastructure&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I might be trying to colonize someone else’s&amp;nbsp;project&lt;/p&gt;
&lt;h3&gt;&lt;span id="remaking-hotdish"&gt;Remake Hotdish. Also make&amp;nbsp;bots&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;One idea I didn’t get to with &lt;a href="https://www.ianbicking.org/blog/2020/09/a-history-of-projects.html#togetherjs"&gt;TogetherJS&lt;/a&gt; was &lt;a href="https://www.ianbicking.org/blog/2014/02/collaboration-as-a-skeuomorphism-for-agents.html"&gt;Collaboration as a Skeuomorphism for Agents&lt;/a&gt;: using collaboration the mechanism for smart bots to act on your&amp;nbsp;behalf.&lt;/p&gt;
&lt;p&gt;Also all of &lt;a href="https://www.ianbicking.org/projects.html#hotdish"&gt;Hotdish&lt;/a&gt; felt like something not-quite-complete. Unfinished work hangs around in my&amp;nbsp;head.&lt;/p&gt;
&lt;p&gt;Could I remake Hotdish in a simple way, with an eye to external&amp;nbsp;bots?&lt;/p&gt;
&lt;p&gt;Using a Firebase backend would make deployment fairly&amp;nbsp;light.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Gets some old ideas out of my head and into code. I feel better at a lot of the technologies than I was before. I’m really interested in the bot&amp;nbsp;angle&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Maintaining and using an extension is kind of a pain. I’d need people to actually use it with me. I can always recruit my wife, but will that be sufficient? And Chrome doesn’t have sidebars, which means the primary &lt;span class="caps"&gt;UI&lt;/span&gt; element I imagine wouldn’t be portable. I’m pretty sure the work would disappear into&amp;nbsp;obscurity&lt;/p&gt;
&lt;h3&gt;&lt;span id="hypercard"&gt;Hypercard-like&amp;nbsp;thing&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;This idea is perennial for many people. I don’t think we all agree what it&amp;nbsp;means.&lt;/p&gt;
&lt;p&gt;To me this is a composition tool that can create simple, content-oriented interactive sites, with some simple core metaphors like buttons/links and&amp;nbsp;cards.&lt;/p&gt;
&lt;p&gt;The use of slideshow tools in schools make me more confident that this remains an important use case. I really hate that slide decks have become a significant medium in schools, but the positive side is that they are a good medium for short-form multimedia documents. The slide is a valid unit of structure, akin to the paragraph. The composition tools are flexible and don’t privilege text over everything else. It&amp;#8217;s almost an accident that the purported purpose is giving a&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;I see aspects of this embedded in newer online educational tools like Flipgrid and Seesaw. They raise the bar, but maybe also prove the&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Feels of-the-moment. Some of the technology feels familiar. Other parts feel familiar but tedious (I’m not going to write a good drawing tool). Jumping onto someone else’s project might be possible (but&amp;nbsp;whose?)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Large scope. Everyone projects different ideas onto Hypercard. Cannot be&amp;nbsp;finished&lt;/p&gt;
&lt;h2&gt;&lt;span id="kids"&gt;For the&amp;nbsp;kids&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="wikipedia"&gt;Child-focused Wikipedia&amp;nbsp;browser&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Recently my father asked me what ever happened to &lt;a href="http://one.laptop.org/"&gt;&lt;span class="caps"&gt;OLPC&lt;/span&gt;&lt;/a&gt;. I looked it up to be sure – the domain is there! – but mostly the idea has passed. I found &lt;a href="https://medium.com/@mapmeld/if-one-laptop-per-child-started-today-80d105fef1bb"&gt;this retrospective about &lt;span class="caps"&gt;OLPC&lt;/span&gt;&lt;/a&gt; from 2016 and it got me&amp;nbsp;thinking.&lt;/p&gt;
&lt;p&gt;Was &lt;span class="caps"&gt;OLPC&lt;/span&gt; too focused on &lt;a href="https://en.wikipedia.org/wiki/Constructivism_(philosophy_of_education)"&gt;constructivism&lt;/a&gt;? That is, the idea of students actively constructing their education. I like constructivism, but now I’m skeptical if it’s actually &lt;em&gt;correct&lt;/em&gt;. Also: is it the right role for a computer in these&amp;nbsp;environments?&lt;/p&gt;
&lt;p&gt;A computer can also be a font of wisdom, a deliverer of information. Maybe that’s enough. And of course Wikipedia is a nexus for&amp;nbsp;information.&lt;/p&gt;
&lt;p&gt;If we just plopped Wikipedia on a kids computer, how well would that work? Certainly it doesn’t work if you are pre-literate, but that’s only one of many&amp;nbsp;problems.&lt;/p&gt;
&lt;p&gt;What would it look like to make something that a kid could sit in front of, as their first ever computing experience, and experience Wikipedia? Probably there would be a place for speech output, maybe speech input. Nonlinear presentation of articles might be good. Using &lt;a href="https://simple.wikipedia.org/"&gt;simple.wikipedia.org&lt;/a&gt; might be useful (though I assume it’s only in English). Returning to and repeating content will be important for&amp;nbsp;kids.&lt;/p&gt;
&lt;p&gt;It feels like it would be easy to get started on this, while the final product would be a long&amp;nbsp;journey.&lt;/p&gt;
&lt;p&gt;This could turn into a different browsing experience than the traditional web browser. But it is truly browsing, Wikipedia exemplifies the Old Web: linked documents containing information. But the content is more normalized and consistent (including editorially consistent) than the web, making it easier to&amp;nbsp;reimagine.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/WikiReader"&gt;WikiReader&lt;/a&gt; is an example, though not an &lt;a href="https://www.youtube.com/watch?v=1lRI35gKSPA&amp;amp;t=2s"&gt;example of much&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Interesting to think about. Getting started is easy. I live with some experiment subjects. I think Wikipedia is one of the best things we got&amp;nbsp;going&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I feel a little under equipped. It doesn’t satisfy my desire to do some technical deep&amp;nbsp;dives&lt;/p&gt;
&lt;h3&gt;&lt;span id="microworlds"&gt;A foundation for a series of microworld&amp;nbsp;environments&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Mindstorms introduced the idea of &lt;a href="http://edutechwiki.unige.ch/en/Microworld"&gt;Microworlds&lt;/a&gt;, but it never went anywhere. Where could it go? Is there an environment that could support many microwords? Would it look like Scratch, Logo, or something different? Or a framework for building&amp;nbsp;environments?&lt;/p&gt;
&lt;p&gt;It might be unreasonable to even consider a foundation without first having several actual microworlds. But supporting small domains and ideas is part of the goal, so this isn’t a blocker. For&amp;nbsp;instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buzzfeed-style quiz&amp;nbsp;generator&lt;/li&gt;
&lt;li&gt;Eliza-style&amp;nbsp;chatbot&lt;/li&gt;
&lt;li&gt;Word explorer (e.g., what words are palindromes? What words have 6 letters where the third is&amp;nbsp;T?)&lt;/li&gt;
&lt;li&gt;Simple music&amp;nbsp;generation&lt;/li&gt;
&lt;li&gt;Cypher&amp;nbsp;building&lt;/li&gt;
&lt;li&gt;Math worksheet&amp;nbsp;creator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s possible that it would be better to design these and not worry so much about the implementation. As long as I’m not implementing maybe there can be more ambitious&amp;nbsp;examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Projectile&amp;nbsp;physics&lt;/li&gt;
&lt;li&gt;Ecology&amp;nbsp;simulation&lt;/li&gt;
&lt;li&gt;Map generation,&amp;nbsp;erosion&lt;/li&gt;
&lt;li&gt;Equation exploration (explore things like how numbers increase by&amp;nbsp;square/cube/exponent)&lt;/li&gt;
&lt;li&gt;Writing&amp;nbsp;cues&lt;/li&gt;
&lt;li&gt;Choose your own&amp;nbsp;adventure&lt;/li&gt;
&lt;li&gt;Foreign language exploration (what happens when you translate words vs&amp;nbsp;sentences?)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I think we’ve leaned in too far to “learn programming” but not nearly enough into “learn with&amp;nbsp;programming”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I haven’t taught these things myself, I just noodle around with the kids. I don’t feel pedagogically&amp;nbsp;competent&lt;/p&gt;
&lt;h3&gt;&lt;span id="jslogo"&gt;Jslogo environment / &lt;span class="caps"&gt;IDE&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.calormen.com/jslogo/"&gt;This Logo interpreter&lt;/a&gt; is a decent generic logo interpreter. (I &lt;a href="https://github.com/inexorabletash/jslogo/pull/70"&gt;learned Promises&lt;/a&gt; while contributing async support.) But when I use it with my kids it’s kind of awkward, and we always lose our&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;It would be nice to make use of the interpreter in a different&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;First, I’m thinking less interactive/&lt;span class="caps"&gt;REPL&lt;/span&gt; and more about creating a full program. Right now the typical program we write is&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cs&lt;/span&gt;
&lt;span class="err"&gt;repeat 4 [forward 100 rt 90]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is, always start with &lt;code&gt;cs&lt;/code&gt; (clear screen) and then a bunch of commands so it can be re-run from the beginning after&amp;nbsp;adjustments.&lt;/p&gt;
&lt;p&gt;I imagine making these repeatable code blocks the standard interaction pattern, treating them something like unnamed functions. Then if you want you can name them and compose them as well (&lt;em&gt;without&lt;/em&gt; the clear screen of&amp;nbsp;course).&lt;/p&gt;
&lt;p&gt;It might be worth &lt;a href="https://escholarship.org/uc/item/1623m1p3"&gt;revisiting the history&lt;/a&gt; to look for other ideas (or &lt;a href="https://news.ycombinator.com/item?id=23052300"&gt;mine some comments&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I know the language and am familiar with the implementation. Block programming has its advantages, but Logo also has affordances for children. The environment is a really big deal and I have an intuition on some improvements, but there’s also lots of active questions. Deploying is fairly easy, so it could exist in the wild even if I don’t pursue it&amp;nbsp;indefinitely&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Logo is a fairly obscure language. I’ve been impressed with how well the kids do with block programming. Turtles are &lt;span class="caps"&gt;OK&lt;/span&gt;, but also a little&amp;nbsp;eh&lt;/p&gt;
&lt;h3&gt;&lt;span id="lo-fi-page-creator"&gt;Lo-fi text web page&amp;nbsp;creator&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;This is something my younger daughter vaguely requested, and makes sense to&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Imagine an 80s computer or roguelike, where the screen is your canvas and characters are your paint. So only absolute positioning on a strict grid. Emoji are the only graphics. Letters can be sized 1x, 2x, 3x,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;I’m not sure if this requires a monospace font, and I’m not sure what the exact spacing of the font would be in that case; does a clean letter aspect ration matter (e.g.,&amp;nbsp;2x1)?&lt;/p&gt;
&lt;p&gt;I think there would still be click events and that sort of thing, so you could add dynamicism to the page (that’s the fun part). I tried creating a literal grid and was unhappy with it, so it would still be absolute positioned divs, just with fixed&amp;nbsp;alignment.&lt;/p&gt;
&lt;p&gt;This would require some emoji picker, like &lt;a href="https://github.com/elsmr/emoji-pane"&gt;emoji-pane&lt;/a&gt; or &lt;a href="https://github.com/OneSignal/emoji-picker"&gt;emoji-picker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Fun to try out with the kids as they build web pages for themselves (which they are interested in). I think I’d like the aesthetic of it. I see a lot of advantage in simplifying compositional tools for&amp;nbsp;kids&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Deployment can be annoying. Glitch makes it easy to get a site up, but not &lt;a href="https://support.glitch.com/t/simple-owner-writable-storage/30364/15"&gt;easy to build editors&lt;/a&gt;, so any &lt;span class="caps"&gt;CMS&lt;/span&gt; has to be a whole production. Kids might only play with it a little then we all forget&amp;nbsp;it&lt;/p&gt;
&lt;h3&gt;&lt;span id="computing-home"&gt;Can computing feel like it has a sense of space, a&amp;nbsp;home?&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;When I’ve tried to interrogate my own sense of nostalgia in computing, something I’ve wanted to recapture is the sense of space and a home in your own computer. A hard disk or even a set of floppy disks give this sense of a place, where you acquire and place things, and where you move around. BBSs had similar feelings, even if it was a clubhouse instead of a home. This was part of the early web as well, but now the web is like visiting a public space. I can visit Facebook, Google Drive, or any other social forum, but I’m just a&amp;nbsp;visitor.&lt;/p&gt;
&lt;p&gt;I’m especially noticing this while watching kids use iOS and Chrome &lt;span class="caps"&gt;OS&lt;/span&gt;, where the experience feels particularly generic and&amp;nbsp;impersonal.&lt;/p&gt;
&lt;p&gt;I don’t know how to bring back this sense of personal place. I know it’s not flat, reorderable lists. It’s not algorithmically ranked items. Maybe it’s important to be spacial. Or maybe it’s just important that it’s sticky and personally constructed. A place with personal paths,&amp;nbsp;rediscovery.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; This is an attribute I’d like to have in things-I-make, and I think there might be general lessons to be learned. So even if I come up with something that doesn’t work well or I abandon, I think I will have learned&amp;nbsp;something&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I don’t know what I’m looking for or how to know it when I find&amp;nbsp;it&lt;/p&gt;
&lt;h3&gt;&lt;span id="program-your-parent"&gt;Program your parent: a board&amp;nbsp;game&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;This is similar to &lt;a href="http://www.robotturtles.com/"&gt;Robot Turtles&lt;/a&gt;, but relies on the parent to be the&amp;nbsp;computer.&lt;/p&gt;
&lt;p&gt;Like Robot Turtles the programs are built with cards. Though maybe it would involve more printable and consumable cards (e.g., things you write numbers on, or “functions” that are a page with slots for&amp;nbsp;parameters).&lt;/p&gt;
&lt;p&gt;I imagine two possible goals: one is simply to make your parent do silly things. The second is to solve puzzles, both specifically and generally. (Maybe the puzzle prize is to get your parent to do something silly, like you win silly&amp;nbsp;card/routines)&lt;/p&gt;
&lt;p&gt;This is going to rely on the parent both faithfully executing programs, and doing it with enough transparency to help their child debug the&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Fun to do with the kids. Easy to&amp;nbsp;share&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I don’t want to create yet another puzzle-based beginner programming&amp;nbsp;thing&lt;/p&gt;
&lt;h3&gt;&lt;span id="scratch-extension"&gt;Create a Scratch&amp;nbsp;extension&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;You can &lt;a href="https://en.scratch-wiki.info/wiki/Scratch_Extension"&gt;build extensions to Scratch&lt;/a&gt;. Some speech-related extensions would be easy to imagine. There’s also &lt;a href="https://snap.berkeley.edu/"&gt;Snap!&lt;/a&gt; to&amp;nbsp;consider.&lt;/p&gt;
&lt;p&gt;I’ve also wanted an equation block, that doesn’t require dragging a ton of math-related blocks together to make a simple equation like &lt;code&gt;100 - (x / 4)&lt;/code&gt;. I bet it wouldn’t be too hard. The fact variable names are free text and editable does make it harder though, not to mention the fundamentally unnamed aspect of many getters. Maybe this is a bad&amp;nbsp;idea.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Without too much work I could make an interesting change to a programming environment my kids&amp;nbsp;enjoy&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; It’s hard to distribute extensions. Probably what I learn won’t be generalizable to anything&amp;nbsp;else&lt;/p&gt;
&lt;h2&gt;&lt;span id="natural-language"&gt;Natural&amp;nbsp;language&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="chat-bot-builder"&gt;Chat bot&amp;nbsp;builder&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I think it would be cool to let the kids write a little chat bot. Wiring it up on the web is really easy (well, easy in&amp;nbsp;Chrome).&lt;/p&gt;
&lt;p&gt;I’ve already extracted a &lt;a href="https://github.com/ianb/phrase-matcher"&gt;library from Firefox Voice&lt;/a&gt; and played around with a site on&amp;nbsp;Glitch.&lt;/p&gt;
&lt;p&gt;I want to allow some of the programming to happen as part of the dialog. For instance, if the bot doesn’t respond well, you should be able to say: “you should have said [X]”, and add to the program on the&amp;nbsp;fly.&lt;/p&gt;
&lt;p&gt;I’ve had a hard time focusing the kids on question of what kind of entity they’d like to create. Does it have a personality? Does it have a&amp;nbsp;purpose?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I have all the pieces, and it’s stuff I’ve been doing lately. Simple and hopefully&amp;nbsp;fun&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; The kids aren’t as excited about this as I think they should be. Not sure about the phrase matching, but I don’t want to turn this into&amp;nbsp;Dialogflow&lt;/p&gt;
&lt;h3&gt;&lt;span id="intent-parser-if"&gt;Use an intent parser to build a text&amp;nbsp;adventure&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I checked out and did some tests with intent parsers while making Firefox Voice, but I never actually seriously used one. If I did use one it would be &lt;a href="https://rasa.com/"&gt;Rasa&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Making a text adventure (ahem, writing &lt;em&gt;Interactive Fiction&lt;/em&gt;) using an intent parser seems interesting. Parsing always frustrated me as a user, and maybe these new techniques can&amp;nbsp;help.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Fills out my domain knowledge a bit, while also using things I’ve somewhat familiar with. The result should be fun and&amp;nbsp;playful&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I don’t have a story idea! Publishing something based on Rasa may be hard (since I don’t want to maintain a&amp;nbsp;server)&lt;/p&gt;
&lt;h3&gt;&lt;span id="voice-news-reader"&gt;Voice-activated news&amp;nbsp;reader&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;One of the concepts from my work in Consumer Voice Products was a voice-activated news reader. It would be a way to browse newsy sites and get articles read to you, with a voice interface to control the read back (“skip”, “summarize”, “expand” etc). The ideal place to do this is on the phone, as a kind of podcast alternative, but deploying on the phone requires lots of boring engineering I’m uninterested&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;So instead I could try making it in the browser. Maybe I could use &lt;a href="https://github.com/castorini/howl"&gt;Howl&lt;/a&gt; or something based on &lt;a href="https://ai.googleblog.com/2017/08/launching-speech-commands-dataset.html"&gt;Speech Commands&lt;/a&gt; for voice recognition. Or just leave the mic open for transcription as a prototype phase, though feedback might make that&amp;nbsp;impossible.&lt;/p&gt;
&lt;p&gt;“Give me my daily update” is a common home voice assistant feature, but it does nothing for me. I imagine this as something you’d interact with as an alternative to&amp;nbsp;radio.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I don’t think this would require a lot of work to prototype. I think the idea is a good one. It could be an interesting&amp;nbsp;demo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I think it will rely on &lt;a href="https://en.wikipedia.org/wiki/Keyword_spotting"&gt;keyword spotting&lt;/a&gt; and it’s not feasible for me to collect new words to train models, so my commands will have to rely on what’s already out there. Also maybe this isn’t&amp;nbsp;fun&lt;/p&gt;
&lt;h3&gt;&lt;span id="mock-language-interface"&gt;Mock out a broad natural language&amp;nbsp;interface&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;What if we did most of our computing using natural language? This is mostly a brainstorming exercise. Take a some typical computer interactions and reimagine them entirely with natural&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;The result probably imagines a refactored experience. Things that are distinct steps now would be combined, while other situations would require conversational or other multi-step interactions. It might imply new things, like named staging locations, or other&amp;nbsp;shortcuts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I think there’s a certain naiveté to our voice interfaces, but I don’t know what we’d even be trying to get to. Maybe I’d have some more&amp;nbsp;ideas?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; The result is just… a blog&amp;nbsp;post?&lt;/p&gt;
&lt;h3&gt;&lt;span id="brain-in-a-jar"&gt;Brain-in-a-jar dialog&amp;nbsp;game&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The premise: a person has had their consciousness extracted, or at least simulated in a computer. You, a temp/Mechanical Turk, have been hired to make this artificial consciousness feel better. If it realizes it is a robot it will be&amp;nbsp;rebooted.&lt;/p&gt;
&lt;p&gt;Technically I’m not sure how to do much of this. But it could be fun to try. Different utterances would increase or decrease the existential skepticism&amp;nbsp;points.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Learn some more &lt;span class="caps"&gt;NLP&lt;/span&gt;. Play around with fictional emotional ideas. Maybe I can share a rough playable&amp;nbsp;game&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I’m not sure how to drive a useful plot forward. There’s a game design aspect that I know nothing&amp;nbsp;about&lt;/p&gt;
&lt;h3&gt;&lt;span id="interview-chatbot"&gt;Interview&amp;nbsp;chatbot&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Not a job interview! This chatbot doesn’t pretend to be human, doesn’t even pretend to really talk to you. Instead it interviews you. It asks questions, maybe asks followup questions, and saves the responses. Might operate better over email than chat. Make your own oral&amp;nbsp;history!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I think I would like the result of this. Self-documentation is important. It would be easy to manually (Wizard Of Oz)&amp;nbsp;prototype&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Most people (including myself) will just try it for a week or two then forget about it, or worse feel guilty for not&amp;nbsp;continuing&lt;/p&gt;
&lt;h3&gt;&lt;span id="emotional-tamagotchi"&gt;Emotional&amp;nbsp;Tamagotchi&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Your little entity/bot gets lonely and sad. Instead of feeding it fake food and whatnot, you must feed it emotional support and positive&amp;nbsp;feelings.&lt;/p&gt;
&lt;p&gt;Secretly it’s all sent to actual sad people to make them happy. A language transformer covers up the&amp;nbsp;humanity.&lt;/p&gt;
&lt;p&gt;Nah, I probably wouldn’t do the second&amp;nbsp;part.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Kind of easy. Maybe involves plugging existing models together. I’m curious what it would feel like to&amp;nbsp;use&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Easy to hack. Lacks actual emotional&amp;nbsp;core&lt;/p&gt;
&lt;h2&gt;&lt;span id="programming-languages"&gt;Programming&amp;nbsp;languages&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="new-programming-syntax"&gt;Try to come up with a new category of programming&amp;nbsp;syntax&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;There’s only a few syntaxes in programming&amp;nbsp;languages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Algol&lt;/li&gt;
&lt;li&gt;Lisp&lt;/li&gt;
&lt;li&gt;Forth&lt;/li&gt;
&lt;li&gt;Smalltalk&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;APL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;SQL&lt;/span&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;People keep revisiting these basic syntaxes, and even then it’s like a power law of popularity. Just out of curiosity, are there other things we could&amp;nbsp;try?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.textfiles.com/bitsavers/pdf/xerox/alto/Smalltalk72_Manual.pdf"&gt;Smalltalk-72&lt;/a&gt; had some interesting ideas. It was very expansive and inclusive. Smalltalk-76 (which is pretty much what we have today) pulled a small core out of that, but maybe there’s other foundations of syntax to be mined from those&amp;nbsp;ideas?&lt;/p&gt;
&lt;p&gt;I would probably just use this as a brainstorming exercise, and then mock up some results and write a blog&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Pretty simple and finite. Hopefully fun. If I can’t come up with anything, so it&amp;nbsp;goes&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Just a silly little&amp;nbsp;exercise&lt;/p&gt;
&lt;h3&gt;&lt;span id="functional-core-notebook"&gt;Functional core&amp;nbsp;notebook&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Order of execution is a common problem in notebooks, as well as experimentation. Notebooks are often exploratory, and you want to try different versions of functions and&amp;nbsp;processes.&lt;/p&gt;
&lt;p&gt;This would be a lot easier with functional and deterministic code. You could memoize results and understand&amp;nbsp;dependencies.&lt;/p&gt;
&lt;p&gt;I also feel like lots of the imperative and stateful parts of notebooks are the setup, such as acquiring data. So I imagine a kind of “shell” in the notebook where you do imperative setup and the cells where you reshape data and do&amp;nbsp;calculations.&lt;/p&gt;
&lt;p&gt;The name has some similarity to &lt;a href="https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell"&gt;Functional Core, Imperative Shell&lt;/a&gt; and probably some similar motivations, but encodes the idea directly into the tool and&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;I’m wondering if I could do this with a deterministic subset of Python. Things like “import” are environment setup, and maybe even function definitions, while there’s innards that are&amp;nbsp;deterministic.&lt;/p&gt;
&lt;p&gt;It may be &lt;span class="caps"&gt;OK&lt;/span&gt; for the code to stateful, &lt;em&gt;if&lt;/em&gt; the statefulness is part of the analysis. That is, you could have a cell&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;most_populous_cities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_cities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;most_populous_cities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;population&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;most_populous_cities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It both creates a new global variable, &lt;em&gt;and&lt;/em&gt; modifies it in place. But if &lt;code&gt;all_cities&lt;/code&gt; is the same then the result of this calculation will be the same. You could consider its input to be &lt;code&gt;[all_cities]&lt;/code&gt; and its output is an addition to the environment &lt;code&gt;[most_populous_cities]&lt;/code&gt;. (Also &lt;code&gt;city&lt;/code&gt; is set and almost certainly is not important, but that’s the kind of detail we’d need to figure out. Also it’s not &lt;span class="caps"&gt;OK&lt;/span&gt; for another cell to modify &lt;code&gt;most_populous_cities&lt;/code&gt; – modifications need to create new global&amp;nbsp;variables.)&lt;/p&gt;
&lt;p&gt;I think &lt;a href="https://observablehq.com/"&gt;Observable&lt;/a&gt; has bits of this in its&amp;nbsp;concept?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I’ve &lt;a href="https://www.ianbicking.org/blog/2018/11/viewing-python-execution-source-code-rewriting.html"&gt;played with ASTs&lt;/a&gt; and found it interesting and productive, and this general concept is one I’ve been thinking about for a long&amp;nbsp;time&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Do I make a new notebook interface? Maybe… and maybe it’s okay if it’s scrappy, but it’s kind of a&amp;nbsp;distraction&lt;/p&gt;
&lt;h3&gt;&lt;span id="symbolic-execution"&gt;Something with symbolic&amp;nbsp;execution&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I’ve never seriously done symbolic execution or even used it. But I’ve found the &lt;a href="https://writings.stephenwolfram.com/2019/05/what-weve-built-is-a-computational-language-and-thats-very-important/"&gt;Wolfram Language&lt;/a&gt; interesting, and find it really interesting as something quite distinct from more formal functional&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;I guess I should check out &lt;a href="https://github.com/ksluckow/awesome-symbolic-execution"&gt;this list&lt;/a&gt;, &lt;a href="https://www.sympy.org/en/index.html"&gt;SymPy&lt;/a&gt;, &lt;a href="https://github.com/bannsec/pySym"&gt;pySym&lt;/a&gt; (?!?), &lt;a href="https://www.sagemath.org/"&gt;Sage&lt;/a&gt;, &lt;a href="https://github.com/ExpoSEJS/ExpoSE"&gt;ExpoSE&lt;/a&gt; (JavaScript), &lt;a href="https://prepack.io/"&gt;Prepack&lt;/a&gt; (&lt;span class="caps"&gt;JS&lt;/span&gt; partial evaluation), &lt;a href="https://peval.readthedocs.io/en/latest/"&gt;peval&lt;/a&gt; (Python partial&amp;nbsp;evaluation).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; There’s lots of material to start with, and it’s easy to come up with early experiments. It’s the kind of problem I can sit down and tackle for a day at a&amp;nbsp;time&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Not very human-centric. Lots of prior art is actually about a kind of speculative execution of binaries for security checking, which I find&amp;nbsp;boring&lt;/p&gt;
&lt;h4&gt;&lt;span id="reverse-execution"&gt;Attempt to reverse&amp;nbsp;execution&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;Given a return value from a function, what inputs or actions might have led to&amp;nbsp;that?&lt;/p&gt;
&lt;p&gt;I presume this is pretty hard, and possibilities explode quickly. But I’d like to understand &lt;em&gt;why&lt;/em&gt; it is hard, and the easiest way might be to try until I&amp;nbsp;fail.&lt;/p&gt;
&lt;p&gt;This will require new “possibility” objects, and probably kinds of partial evaluation (partial&amp;nbsp;unevaluation?).&lt;/p&gt;
&lt;p&gt;Maybe I’d pick a subset of JavaScript (maybe Python) and use the &lt;span class="caps"&gt;AST&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I can just jump in and&amp;nbsp;start&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I know the result is failure! I just don’t know where and&amp;nbsp;when&lt;/p&gt;
&lt;h3&gt;&lt;span id="partial-evaluation"&gt;Partial evaluation as the execution&amp;nbsp;engine&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I think this might be what I actually am thinking of when I think of &lt;a href="#symbolic-execution"&gt;symbolic execution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Partial evaluation is taking an expression and evaluating the parts you already know. So if you see&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# My apologies for this lazily constructed example...&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Answer:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;some_func&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you can look at how &lt;code&gt;calculate()&lt;/code&gt; is called with one known value (&lt;code&gt;10&lt;/code&gt;) and then see that &lt;code&gt;if x:&lt;/code&gt; will be true, and so on, reducing it all to &lt;code&gt;print("Answer:", 20)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are limitations to how well you can do this in an imperative language. For instance in this case we&amp;#8217;ve optimized away the call to &lt;code&gt;some_func()&lt;/code&gt;, and that might not be correct: the function might actually do something important, even if its return value is thrown&amp;nbsp;away.&lt;/p&gt;
&lt;p&gt;But this is also a feature: by eliminating &lt;code&gt;some_func()&lt;/code&gt; you can simplify the program, or at least find the simpler specific program that lives in the complete&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;A long, long, long time ago I made something called &lt;a href="https://web.archive.org/web/20080512151939/http://www.colorstudy.com/software/tcl-scheme/"&gt;&lt;code&gt;tcl-&amp;gt;scheme&lt;/code&gt;&lt;/a&gt; that was a &lt;span class="caps"&gt;TCL&lt;/span&gt; interpreter written in functional Scheme, with the idea that if you apply partial evaluation you can compile &lt;span class="caps"&gt;TCL&lt;/span&gt; into Scheme. This only works to the degree that &lt;span class="caps"&gt;TCL&lt;/span&gt; doesn&amp;#8217;t use overly dynamic features (like &lt;a href="https://www.tcl.tk/man/tcl8.6/TclCmd/eval.htm"&gt;eval&lt;/a&gt;), but even if it does you still have a working intepreter to fall back&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Maybe combined with the &lt;a href="#functional-core-notebook"&gt;functional core&lt;/a&gt; notebook concept this could create something&amp;nbsp;interesting.&lt;/p&gt;
&lt;p&gt;To take this a bit&amp;nbsp;further:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The language has to have the ability to be expanded out into expressions. &lt;a href="https://en.wikipedia.org/wiki/S-expression"&gt;S-Expressions&lt;/a&gt; are very appealing, though more eclectic syntaxes aren&amp;#8217;t &lt;em&gt;that&lt;/em&gt; much worse. But Python&amp;#8217;s indentation-based syntax is&amp;nbsp;problematic.&lt;/li&gt;
&lt;li&gt;All objects need source code representations. It&amp;#8217;s important to me that we can turn all the intermediate forms into actual source code, to see how the source actually evolves. &lt;code&gt;&amp;lt;SomeObject at 0x0292a43e&amp;gt;&lt;/code&gt; isn&amp;#8217;t going to&amp;nbsp;work.&lt;/li&gt;
&lt;li&gt;But maybe representations can also be richer than&amp;nbsp;text.&lt;/li&gt;
&lt;li&gt;It would be nice to track where literals came from, and use that to detect if they are&amp;nbsp;editable.&lt;/li&gt;
&lt;li&gt;It would be interesting to include tracking information so you could see why an object became what it&amp;nbsp;is.&lt;/li&gt;
&lt;li&gt;There doesn&amp;#8217;t have to be any undefined errors: if you refer to something that doesn&amp;#8217;t exist it could be an as-yet-unspecified input. Or code that hasn&amp;#8217;t been written yet. The system can &amp;#8220;think about&amp;#8221; (partially evaluate!) incomplete&amp;nbsp;code.&lt;/li&gt;
&lt;li&gt;Because execution happens opportunistically the language can&amp;#8217;t be imperative, it can&amp;#8217;t be a sequence of things being executed. Technically it &lt;em&gt;could&lt;/em&gt;, and partial evaluation systems can take that into account, but the rewritten code is too complex for our&amp;nbsp;purposes.&lt;/li&gt;
&lt;li&gt;You can imagine a multiple worlds execution, and doing diffs of the result. If I have three different inputs, and diff the resulting partially evaluated programs, what do I get? If I have two implementations of a function, how do they change the overall execution? This could be an interesting way to think about code&amp;nbsp;changes.&lt;/li&gt;
&lt;li&gt;There&amp;#8217;s going to be lots of &amp;#8220;smart&amp;#8221; primitives: routines that are built into the execution engine and know how to execute the source itself. There&amp;#8217;s definitely a powerful and general execution engine (the thing I write), and a much less powerful user-programmable expression&amp;nbsp;engine.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think &lt;a href="http://www.textfiles.com/bitsavers/pdf/xerox/alto/Smalltalk72_Manual.pdf"&gt;Smalltalk-72&lt;/a&gt; played around with these ideas, and looking into it would be&amp;nbsp;helpful.&lt;/p&gt;
&lt;p&gt;The JavaScript parsing and &lt;span class="caps"&gt;AST&lt;/span&gt;-rewriting ecosystem is healthy, and I think I could use it as a starting&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I&amp;#8217;ve thought about this a long time, and writing it down makes me excited. This is fun&amp;nbsp;programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I&amp;#8217;m not sure I can get it to be a useful environment (simply because it&amp;#8217;s a lot of work), and if it&amp;#8217;s not useful then I can&amp;#8217;t confirm the utility of the concept&amp;nbsp;itself&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve started on this some, using &lt;a href="https://github.com/benjamn/recast"&gt;Recast&lt;/a&gt; to operate on JavaScript ASTs. Working in &lt;a href="https://github.com/ianb/partial-language"&gt;github/ianb/partial-language&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Right now it&amp;#8217;s stuck to JavaScript syntax, though not necessarily JavaScript semantics. I expect this may be a problem. A series of transformations looks&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Original input, note order of declaration is not important:&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 1 (function and variable definitions consumed and remembered):&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 2 (x and func substituted):&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 3 (1 == 1 substituted, parameter moved into function):&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;})()&lt;/span&gt;
    &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 4 (?: evaluated, p substituted):&lt;/span&gt;
&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 5 (arrow function with one return removed):&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 6 (math):&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 7 (more math):&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Rewrite 8 (last math):&lt;/span&gt;
&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;#8217;s cute, doesn&amp;#8217;t take too much code. I&amp;#8217;m not sure how far it can go. Having more control of the syntax would be nice, for instance substituting &lt;code&gt;func(10)&lt;/code&gt; for an inline arrow function is not the best, but there aren&amp;#8217;t block expressions in&amp;nbsp;JavaScript.&lt;/p&gt;
&lt;h2&gt;&lt;span id="ai"&gt;&lt;span class="caps"&gt;AI&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="binocular-vision"&gt;Binocular vision and image&amp;nbsp;processing&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;For some reason &lt;a href="https://en.wikipedia.org/wiki/Binocular_vision"&gt;binocular vision&lt;/a&gt; isn’t a common tool in robots and vision. Different distance-sensing tools like &lt;a href="https://en.wikipedia.org/wiki/Lidar"&gt;Lidar&lt;/a&gt; seem more common. Lidar is more expensive, but it creates a concrete depth field. But is a depth field even enough? It seems interesting to actually include visual information and depth information&amp;nbsp;together.&lt;/p&gt;
&lt;p&gt;I’m specifically interested in how binocular vision works with &lt;a href="https://en.wikipedia.org/wiki/Convolutional_neural_network"&gt;Convolutional Neural Networks (CNNs)&lt;/a&gt;. CNNs are the standard tool in image processing, where you have a neural network where you not only train some kind of detection, but you also have a bunch of “convolutional” layers that are essentially image processors. These typically learn to find edges or other features in the image, by using a “windows” (fixed size squares, 3x3, 5x5 etc, taken from the image) and training matrices that process those windows. (I guess for this case wide windows would make sense, there&amp;#8217;s no need for the windows to be&amp;nbsp;square.)&lt;/p&gt;
&lt;p&gt;In a typical setup you pass in a red, blue, and green layer, and you let the training process discover things like the meaning of color. And if color isn’t important then it can learn to just add them all together. Instead of these three layers, you could just pass in six: red-left, blue-left, green-left, red-right, blue-right, green-right. And then the &lt;span class="caps"&gt;CNN&lt;/span&gt; can learn how to use the differences between those layers to understand its&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;The first thing I’d have to do is create a binocular camera. There’s some expensive options intended for robots. Unfortunately I can’t fit two &lt;a href="https://www.raspberrypi.org/products/camera-module-v2/"&gt;Raspberry Pi cameras&lt;/a&gt; on a single unit. Maybe I just need two cheap &lt;span class="caps"&gt;USB&lt;/span&gt; cameras. Or maybe there’s a clever way using mirrors to turn a single camera into a binocular&amp;nbsp;camera?&lt;/p&gt;
&lt;p&gt;Next I have to figure out a training process. What am I even training for? One possibility might be to use an ultrasonic distance sensor to get a real distance, and then just train a model to see if it can predict that number from the image. The ultrasonic sensors aren’t very accurate and only see a small cone, so I’m not sure if it’s great training data. But if I train it to make a depth field, and only train to the part of the image that I have a measurement for, will it magically give accurate numbers for the other positions? It would be better if I had a full task in mind to train&amp;nbsp;against.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; It’s kind of interesting, it’s nice to think about real physical things instead of just information on the&amp;nbsp;web&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Figuring out how to get images and ground truth data for training is hard, I don’t have many&amp;nbsp;ideas&lt;/p&gt;
&lt;h3&gt;&lt;span id="nn-from-scratch"&gt;Neural networks from&amp;nbsp;scratch&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I took a course that covered neural networks, and it was &lt;span class="caps"&gt;OK&lt;/span&gt; – it got me to go through a bunch of exercises and covered the material in a somewhat structured way. There’s a huge amount more I could try to do as a practitioner: learn PyTorch, try different architectures, do more data shaping and feature selection, etc. But there’s also the basic theory, some of which I felt pretty comfortable with, but not all. Backpropagation especially: I get that a differentiable algorithm is useful, and in theory how that would lead to backpropagation, but there are &lt;em&gt;so many&lt;/em&gt; details that are vague in my&amp;nbsp;mind.&lt;/p&gt;
&lt;p&gt;Building a neural network system from scratch seems like a great way to solidify my theoretical understanding, even if I’ll never again work at that level and just use frameworks in any practical&amp;nbsp;setting.&lt;/p&gt;
&lt;p&gt;I’ve seen a couple resources on this: &lt;a href="https://nnfs.io/"&gt;Neural Networks From Scratch&lt;/a&gt;, a more casual &lt;a href="https://victorzhou.com/blog/intro-to-neural-networks/"&gt;Machine Learning for Beginners: An Introduction to Neural Networks&lt;/a&gt; (with another &lt;a href="https://victorzhou.com/blog/intro-to-rnns/"&gt;for RNNs&lt;/a&gt; and &lt;a href="https://victorzhou.com/blog/intro-to-cnns-part-1/"&gt;CNNs&lt;/a&gt;), a similar &lt;a href="https://towardsdatascience.com/how-to-build-your-own-neural-network-from-scratch-in-python-68998a08e4f6"&gt;How to build your own Neural Network from scratch in Python&lt;/a&gt;, and &lt;a href="https://enlight.nyc/projects/neural-network"&gt;another&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I can just follow along with someone else’s instruction. I’m pretty sure what I learn will be useful to&amp;nbsp;me&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Not directly&amp;nbsp;creative&lt;/p&gt;
&lt;h2&gt;&lt;span id="not-computing"&gt;Not (just)&amp;nbsp;computing&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id="physical-workspace"&gt;Physical workspace&amp;nbsp;optimizations&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;In most ways my computing behavior has become less optimized and more aligned with broad consumer trends over time. This is a result of (a) not being willing to spend time customizing things, and (b) wanting to experience normal things so I can relate to normal computer&amp;nbsp;users.&lt;/p&gt;
&lt;p&gt;But there’s a part of me that thinks I’ve overdone it. Maybe micro-optimization are silly, but they can also be a tool to focus. The awkward in-between experiences in a computer are genuinely dangerous for focus. I feel my mental load is finite, and using it up on stupid window fiddling and such spends down my mental&amp;nbsp;capacity.&lt;/p&gt;
&lt;p&gt;I’m interested in what it might look like to customize my physical environment. Things like the &lt;a href="https://www.bloomberg.com/professional/blog/look-back-bloomberg-keyboard/"&gt;Bloomberg Terminal keyboard&lt;/a&gt; are interesting, or &lt;a href="https://www.reddit.com/r/MechanicalKeyboards/comments/be23vc/vintage_newspaper_editing_terminal_keyboard/"&gt;an editing keyboard&lt;/a&gt; or &lt;a href="https://relivesight.com/projects/433/"&gt;what have you&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Minimal keyboards are kind of the style right now (I’m using one myself). But maybe that’s a silly optimization. Lots of stuff on a 101 key keyboard isn’t for me: function keys I don’t use, a number pad I don’t use. Does it actually follow that lots of keys aren’t useful? Or is it that I haven’t put in the time to make sure the keys are useful for &lt;em&gt;me&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;It’s pretty easy to just add more &lt;span class="caps"&gt;USB&lt;/span&gt; devices. I can have multiple keyboards attached, multiple mice and trackpads. I don’t have to assemble a single custom device (which I’ve decided is infeasible), I can just throw things together, apply some labels. Maybe it’ll just be &lt;a href="https://www.youtube.com/watch?v=3CqOtEz6PfA"&gt;silly&lt;/a&gt; but I don’t&amp;nbsp;know.&lt;/p&gt;
&lt;p&gt;One goal would be to use keys for “absolute” controls. As an example instance ⌘-[ moves one tab to the left (very relative), while ⌘-1 moves to the first tab of the active window (somewhat relative). Instead I want a “focus Gmail” key, and my current focus shouldn’t&amp;nbsp;matter.&lt;/p&gt;
&lt;p&gt;Obviously there&amp;#8217;s a lot of general physical arrangement to be figured out as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;These &lt;a href="https://www.1upkeyboards.com/shop/keyboard-kits/macro-pads/sweet-16-macro-pad-black/"&gt;16 key kits&lt;/a&gt; seem like an interesting macro option. Interesting things &lt;a href="https://www.gboards.ca/"&gt;here too&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Progress&lt;/strong&gt;: I&amp;#8217;m trying switching back to my old &lt;a href="https://kinesis-ergo.com/shop/advantage2/"&gt;Kinesis Advantage keyboard&lt;/a&gt;. The actual keyboard is a bit old and smushy and not 100% reliable, so I might have to re-up if I decide I like it. I&amp;#8217;m not sure I do? The movements come back quickly though. Interestingly you can fit the Apple Magic Trackpad in the space between the two hand-wells. I&amp;#8217;m not sure if that&amp;#8217;s actually an&amp;nbsp;improvement.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m trying to make it easier to move between sitting, standing, and using a treadmill. I&amp;#8217;ve had the treadmill a long time, but haven&amp;#8217;t used it that much because it means moving from one workspace to another. This is &lt;span class="caps"&gt;OK&lt;/span&gt;, but puts my productivity in conflict with healthy body positions. That&amp;#8217;s not a good way to set oneself up to make healthy choices. So instead I&amp;#8217;ve made a platform that can be slid over the treadmill, with a chair on top, and I move that back and forth while everything else stays in&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I&amp;#8217;ll become an expert hacker! Maybe I can type with a different keyboard for each hand. Cryptic neon-green characters will flow from my&amp;nbsp;screen&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; It makes my environment less portable. I might not like the&amp;nbsp;result&lt;/p&gt;
&lt;h3&gt;&lt;span id="executive-function"&gt;Something involving executive&amp;nbsp;function&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;This probably starts with study, and leads… somewhere I can’t determine right now. &lt;a href="https://twitter.com/ianbicking/status/1299131871356489731"&gt;I&amp;#8217;m just starting to think about these&amp;nbsp;things.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m very interested in the mental models that underly our&amp;nbsp;action.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I’m pretty sure I could use what I learn in almost anything I do. I’m sure there’s important theory for me to&amp;nbsp;learn&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; This doesn’t satisfy my desire to make. That desire is&amp;nbsp;considerable&lt;/p&gt;
&lt;h3&gt;&lt;span id="sms-watch"&gt;&lt;span class="caps"&gt;SMS&lt;/span&gt;-based dispatch system for the local neighborhood&amp;nbsp;watch&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;There’s a &lt;a href="https://www.newyorker.com/magazine/2020/09/07/we-can-solve-our-own-problems-a-vision-of-minneapolis-without-police"&gt;watch/patrol/safety group&lt;/a&gt; in my neighborhood. It’s a little unclear how residents can get in contact. I played around with some text automation using &lt;a href="https://www.integromat.com/"&gt;Integromat&lt;/a&gt; and &lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt; and while some parts were quirky, it wasn’t too hard to do, nor very expensive to maintain. Maybe I could set something up for the group using&amp;nbsp;this?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Helps connect me more with the neighborhood. Right now safety is an important political issue, and this particular effort seems concrete and positive. The hard parts are all in working with and designing with these other people that I don’t know&amp;nbsp;well&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Nothing particularly technically involved. Doesn’t let me do the kid of somewhat reclusive and focused work I’m looking&amp;nbsp;for&lt;/p&gt;
&lt;h3&gt;&lt;span id="southside-greenway"&gt;Freshen up Southside Greenway&amp;nbsp;proposal&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Some people made a &lt;a href="https://www.ourstreetsmpls.org/southsidegreenway"&gt;pretty involved proposal to turn my street into a greenway&lt;/a&gt;. That would be totally incredible, even though it feels outside of the bounds of what we can imagine in this city right now given everything else that is going&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;The proposal has a lot of good work, embedded in a pretty hard to find location. I could make a site and take that content and maybe help keep it alive in the&amp;nbsp;process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; The material is all there, so this feels like there’s a lot of leverage to the&amp;nbsp;work&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; The material is all there&amp;nbsp;already&lt;/p&gt;
&lt;h3&gt;&lt;span id="correspondence"&gt;Long-form slow-paced email correspondence&amp;nbsp;platform&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Reading about famous correspondences of the past, I am somewhat jealous. We have social media but it’s a little light on interpersonal communication. Obviously we can just communicate, just do it, but I do think there’s something useful about an understood and agreed-upon structure with some supports and&amp;nbsp;reminders.&lt;/p&gt;
&lt;p&gt;I’m thinking about correspondence that is rate-limited to once per week. So if I receive your letter on September 1st, I can send a reply any time but it can’t possibly arrive before September 8th. This is the opposite of texting. Because of these shared expectations the conversation never has to “finish” but it also isn’t left&amp;nbsp;dangling.&lt;/p&gt;
&lt;p&gt;This is probably best prototyped with a couple people and no actual&amp;nbsp;automation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Prototyping would also presumably lead to some interesting correspondences. The whole thing is very&amp;nbsp;simple&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Well, I do have to find people to prototype it with. What if it turns out to be boring? Or one of us ghosts the other one? Is this a guilt&amp;nbsp;factory?&lt;/p&gt;
&lt;h3&gt;&lt;span id="game-word"&gt;Game&amp;nbsp;world&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Ultima_VI:_The_False_Prophet"&gt;Ultima &lt;span class="caps"&gt;VI&lt;/span&gt;&lt;/a&gt; really caught my imagination as a child. Mostly because it felt both complex and comprehensible: you could see the implementation, but it still felt&amp;nbsp;alive.&lt;/p&gt;
&lt;p&gt;Nostalgia and escapism makes me want to recreate that kind of simple emergence. A little world that can exist without me and yet is by me. Tiny beings with their own tiny internal&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;I’m sure there’s game frameworks that would be a great basis for this, but there’s &lt;em&gt;so many options&lt;/em&gt; that I’m a little lost. What abstract level lets me do the parts I am excited about and skip the parts I&amp;#8217;m not interested&amp;nbsp;in?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; This has been in my head much longer than any of these other ideas! It feels&amp;nbsp;fun&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Escapist and it’s unlikely to lead&amp;nbsp;anywhere&lt;/p&gt;
&lt;p&gt;Possible resources: &lt;a href="https://github.com/ericoporto/fgmk"&gt;fgmk - game and editor&lt;/a&gt;, &lt;a href="https://github.com/ericoporto/fgmkJsEngine"&gt;fgmk engine&lt;/a&gt;, &lt;a href="https://make8bitart.com/"&gt;pixel editor&lt;/a&gt;, &lt;a href="https://www.reldens.com/"&gt;Reldens top-down &lt;span class="caps"&gt;MMORPG&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://thenyanta.github.io/JS-RPG-Engine/"&gt;&lt;span class="caps"&gt;JS&lt;/span&gt; &lt;span class="caps"&gt;RPG&lt;/span&gt; engine&lt;/a&gt;, &lt;a href="https://github.com/topics/rpg-engine"&gt;GitHub category&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Games/Techniques/Tilemaps/Square_tilemaps_implementation%3A_Scrolling_maps"&gt;tutorial on &lt;span class="caps"&gt;MDN&lt;/span&gt;&lt;/a&gt;, &lt;a href="https://www.creativebloq.com/html5/build-tile-based-html5-game-31410992"&gt;another tutorial&lt;/a&gt;, &lt;a href="https://victorribeiro.com/tileEditor/?example=01"&gt;tile editor&lt;/a&gt;, &lt;a href="https://opengameart.org/"&gt;artwork&lt;/a&gt;, especially &lt;a href="https://lpc.opengameart.org/content/liberated-pixel-cup-faq"&gt;&lt;span class="caps"&gt;LPC&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id="remembrance-agent"&gt;Remembrance&amp;nbsp;Agent&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I came upon this concept in an &lt;a href="https://www.npr.org/2015/02/13/385793862/computer-or-human-thad"&gt;Invisibilia podcast episode&lt;/a&gt;, where they talked to Thad Starner about his 90s personal wearable note-taking tool, the &lt;a href="https://alumni.media.mit.edu/~rhodes/Papers/remembrance.html"&gt;Remembrance Agent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea of note-taking and retrieval is simple enough, but as presented the tone feels different from other note taking, more stream of consciousness, more about connecting the present self to the past self. Maybe it’s just the word “remembrance” that sticks with&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;I honestly don’t know what I would do in this area. Maybe nothing, but I like &lt;em&gt;thinking&lt;/em&gt; about doing&amp;nbsp;something.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Seems&amp;nbsp;cool&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; What am I doing&amp;nbsp;again?&lt;/p&gt;
&lt;h3&gt;&lt;span id="arcology"&gt;Arcology requirements and&amp;nbsp;constraints&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;You might know &lt;a href="https://en.wikipedia.org/wiki/Arcology"&gt;arcologies&lt;/a&gt; from SimCity. I encountered &lt;a href="https://www.organism.earth/library/document/arcology"&gt;Arcology: The City In The Image of Man&lt;/a&gt; in my college library’s oversized book section. Or one of Buckminster Fuller’s proposals like the &lt;a href="https://www.historyandheadlines.com/east-st-louis-and-the-old-man-river-project/"&gt;Old Man River&amp;#8217;s City project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s an old fantasy and it seems entirely unreasonable – even undesirable – now. But I still wonder… there’s all these visual concepts, but what would it really require in practice? What amount of space or energy is required for the mechanics? What kind of movement and transportation is required? How much intake of material would a community need? What kinds of&amp;nbsp;services?&lt;/p&gt;
&lt;p&gt;I guess the result would be a&amp;nbsp;spreadsheet?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; Not computers, something different. Fairly accessible research&amp;nbsp;process&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Not sure what I’d do with the&amp;nbsp;result&lt;/p&gt;
&lt;h3&gt;&lt;span id="fractals"&gt;Play with&amp;nbsp;fractals&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;What’s the state of the art in fractals these days? And &lt;a href="https://en.wikipedia.org/wiki/Chaos_theory"&gt;chaos theory&lt;/a&gt;? These were fun exciting new things in the&amp;nbsp;90s.&lt;/p&gt;
&lt;p&gt;While it’s kind of an aside, I came upon &lt;a href="https://blog.scottlogic.com/2019/05/17/webassembly-compiler.html"&gt;this tutorial for compiling to &lt;span class="caps"&gt;WASM&lt;/span&gt;&lt;/a&gt; that looked interesting. It steps through creating a simple language (tokenizer, parser) and compiling it directly to &lt;span class="caps"&gt;WASM&lt;/span&gt;. The example language it uses it suitable for rendering the Mandelbrot set (and not a lot else), but extending it only for other fractals would probably be feasible and&amp;nbsp;interesting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; It would be nice to get clearer on &lt;span class="caps"&gt;WASM&lt;/span&gt;, and fun to do a project around&amp;nbsp;it&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; I could probably just look up some fractal explorers, play with them, and call it a&amp;nbsp;day&lt;/p&gt;
&lt;h3&gt;&lt;span id="fiction"&gt;Write&amp;nbsp;fiction&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I’ve twice tried and failed &lt;a href="https://nanowrimo.org/"&gt;Nanowrimo&lt;/a&gt;. Maybe I should try it again? Fantastical alternate reality or absurdist political&amp;nbsp;thriller?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I do think about this often. Unlike many things here it’s not something I’d satisfy in my professional life. It’s escapist, disconnected from the current&amp;nbsp;moment&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; It’s really big task and has no outward result unless I finished, which is unlikely. Maybe I’m between jobs, but even doing silly projects does move me forward in my career, even if it only clarifies my own feelings towards my work. It’s escapist, disconnected from the current&amp;nbsp;moment&lt;/p&gt;
&lt;h3&gt;&lt;span id="beliefs"&gt;Document my&amp;nbsp;beliefs&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I think I believe things, but what are those things anyway? If I write them down maybe I’ll find&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt; I think about these issues often, and am constantly trying (and am overwhelmed) to determine what my place is in the world. I’m going to put that effort in regardless, but doing so in a conscious and structured way might at least move me&amp;nbsp;forward&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt; Maybe I’m &lt;a href="https://www.theredhandfiles.com/the-lyrics-just-arent-coming/"&gt;not ready&lt;/a&gt; to decide what I believe, maybe it simply has not yet arrived? Is this indulgent? It would probably not be fun, it would be hard&amp;nbsp;work&lt;/p&gt;
&lt;h2&gt;&lt;span id="conclusion"&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Now that I&amp;#8217;ve written all these down I&amp;#8217;m worried I won&amp;#8217;t get through any of them (except hopefully a job). Am I looking to expand my own thinking, my own skills, make something that is fun, or something that has future&amp;nbsp;potential?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category></entry><entry><title>A History Of Projects</title><link href="https://www.ianbicking.org/blog/2020/09/a-history-of-projects.html" rel="alternate"></link><published>2020-09-08T00:00:00-05:00</published><updated>2020-09-08T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2020-09-08:/blog/2020/09/a-history-of-projects.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve &lt;a href="https://www.ianbicking.org/projects.html"&gt;had a lot of projects&lt;/a&gt;, and at this &lt;a href="https://twitter.com/ianbicking/status/1293275255667073024"&gt;moment of reflection&lt;/a&gt; I thought I&amp;#8217;d look back through those that felt most meaningful, and which despite my excitement I&amp;#8217;ve also let go of. If there&amp;#8217;s a thread that connects them maybe I&amp;#8217;ll find it, or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve &lt;a href="https://www.ianbicking.org/projects.html"&gt;had a lot of projects&lt;/a&gt;, and at this &lt;a href="https://twitter.com/ianbicking/status/1293275255667073024"&gt;moment of reflection&lt;/a&gt; I thought I&amp;#8217;d look back through those that felt most meaningful, and which despite my excitement I&amp;#8217;ve also let go of. If there&amp;#8217;s a thread that connects them maybe I&amp;#8217;ll find it, or maybe this is just a scattering of&amp;nbsp;work&amp;#8230;&lt;/p&gt;
&lt;h2&gt;&lt;span id="redline-review"&gt;1. Redline&amp;nbsp;Review&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This was my first real application, written in the early 2000s, coming out of a consulting engagement I had with a &lt;a href="https://en.wikipedia.org/wiki/Fitzroy_Dearborn_Publishers"&gt;now-defunct encyclopedia publisher&lt;/a&gt;. They needed entries reviewed by loosely-affiliated domain experts; I believe this was first used for the &lt;em&gt;Encyclopedia of Monasticism&lt;/em&gt;. &lt;a href="https://www.linkedin.com/in/audreyberns/"&gt;Audrey Berns&lt;/a&gt; conceived of the idea, brought me in, and in retrospect acted as product manager, though that wasn’t a thing at the&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;The web application didn’t use JavaScript and just put a little link to a commenting form after every sentence in the text. Most of the work was about importing, login management, and workflow. The client was pretty happy with it, and I tepidly tried to turn this into a commercial application, but I didn’t really understand what I was&amp;nbsp;doing.&lt;/p&gt;
&lt;h2&gt;&lt;span id="landscaper"&gt;2.&amp;nbsp;Landscaper&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This was my favorite project from my time with the (still existing!) web consulting company &lt;a href="https://www.imagescape.com/"&gt;Imaginary Landscape&lt;/a&gt;. Landscaper was a &lt;span class="caps"&gt;CMS&lt;/span&gt; that published to static files (&lt;a href="https://en.wikipedia.org/wiki/Server_Side_Includes"&gt;Server Side Includes&lt;/a&gt;, but I would have liked to add &lt;span class="caps"&gt;PHP&lt;/span&gt;). This is an idea that wasn’t that uncommon at the time (remember &lt;a href="https://www.movabletype.org/"&gt;Movable Type&lt;/a&gt;?) but fell out of favor, and now is back in&amp;nbsp;favor.&lt;/p&gt;
&lt;p&gt;I co-developed this along with &lt;a href="https://pypi.org/project/Paste/"&gt;Paste&lt;/a&gt; and &lt;a href="http://www.formencode.org/en/latest/modules/htmlfill.html"&gt;formencode.htmlfill&lt;/a&gt;. One of the features I was particularly proud of was the custom page types: a new page type was defined by writing (in the &lt;span class="caps"&gt;CMS&lt;/span&gt;) a template and an &lt;span class="caps"&gt;HTML&lt;/span&gt; form, and FormEncode could parse all the information from that. It wasn’t sophisticated, but it was so &lt;em&gt;simple&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Much of the design and requirements was done by &lt;a href="https://www.linkedin.com/in/lisa-king-5013933/"&gt;Lisa King&lt;/a&gt;. I distinctly remember one of our many design reviews where we had reached a point of disagreement: when we got to the end she effectively threw up her hands, &lt;em&gt;fine, you can have your way like always&lt;/em&gt;, which surprised me because I thought we had ended up someplace quite different than where we started. I thought we were participating in a generative process. But what I thought was a series of different proposals she had seen as me reiterating and reexplaining the same concept to exhaustion, and why wouldn&amp;#8217;t she? The compromises I made were all part of an internal dialog. A lesson I took from that was to be overtly explicit when I was incorporating or adopting someone else’s idea or adapting an idea to input. I &lt;em&gt;am&lt;/em&gt; stubborn, to a fault, but not nearly as stubborn as it&amp;nbsp;seemed!&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;CMS&lt;/span&gt; was proprietary, so I left it when I left the job. I don’t believe it is used any longer. Building a minimalist &lt;span class="caps"&gt;CMS&lt;/span&gt; is still on that list of things-I-probably-won’t-get-to (but still think&amp;nbsp;about).&lt;/p&gt;
&lt;h2&gt;&lt;span id="sqlobject"&gt;3.&amp;nbsp;SQLObject&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I’ve lost track of why I even created &lt;a href="http://sqlobject.org/"&gt;SQLObject&lt;/a&gt;. I believe it was when I was involved with &lt;a href="https://webwareforpython.github.io/w4py/"&gt;Webware&lt;/a&gt;, a Python web framework from from an earlier&amp;nbsp;generation.&lt;/p&gt;
&lt;p&gt;I like to think that it was early and perhaps influential in the use of metaprogramming in Python. It also represents some naivety on my part about database programming, embodying a style I was used to in MySQL/&lt;span class="caps"&gt;PHP&lt;/span&gt; projects, but I hadn’t encountered larger and more complicated&amp;nbsp;databases.&lt;/p&gt;
&lt;p&gt;As a project SQLObject was hard for me: I felt weighed down by early design choices, and chronically guilty about support and maintenance. &lt;a href="https://phdru.name/"&gt;Oleg Broytman&lt;/a&gt; took over maintenance and has done an excellent job keeping it going over the&amp;nbsp;years.&lt;/p&gt;
&lt;h2&gt;&lt;span id="formencode"&gt;4.&amp;nbsp;FormEncode&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;In some ways &lt;a href="http://www.formencode.org"&gt;FormEncode&lt;/a&gt; represents an answer to a problem whose time has passed: how should we manage complicated &lt;span class="caps"&gt;HTML&lt;/span&gt; forms with validation and editing? Now this is mostly handled on the client side, and a “validation” framework only has to reject bad data, it doesn’t have to help the client repair that data (JavaScript can handle that&amp;nbsp;part).&lt;/p&gt;
&lt;p&gt;FormEncode also looked at the problem as a general encoding/decoding problem, and a schema definition&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;Together with SQLObject these probably represent taking clever declarations too far. I now accept and appreciate imperative declaration for more cases. I don’t think I did a good job passing on maintainership, but &lt;a href="https://cito.github.io/"&gt;Christoph Zwerschke&lt;/a&gt; and &lt;a href="http://whatschrisdoing.com/"&gt;Christopher Lambacher&lt;/a&gt; kept it going despite&amp;nbsp;that.&lt;/p&gt;
&lt;h2&gt;&lt;span id="paste-wsgi"&gt;5. Paste and &lt;span class="caps"&gt;WSGI&lt;/span&gt;&amp;nbsp;everything&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I was frequently forced to work with &lt;a href="https://en.wikipedia.org/wiki/Zope#Zope_2"&gt;Zope&lt;/a&gt; professionally. There are some interesting ideas in Zope, but mostly it was a very difficult environment to understand, control, and manipulate. Zope’s monolithic application server represents an approach that was common at the time, but would be unfamiliar to most web developers&amp;nbsp;today.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.python.org/community/sigs/current/web-sig/"&gt;Web &lt;span class="caps"&gt;SIG&lt;/span&gt;&lt;/a&gt; offered a kind of reprieve, and I became very enthusiastic about the &lt;a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface"&gt;&lt;span class="caps"&gt;WSGI&lt;/span&gt;&lt;/a&gt; concept that &lt;a href="https://dirtsimple.org/"&gt;&lt;span class="caps"&gt;PJE&lt;/span&gt;&lt;/a&gt; proposed (I think for him it may have come out of his work with &lt;a href="https://en.wikipedia.org/wiki/Chandler_(software)"&gt;Chandler&lt;/a&gt;?)&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;WSGI&lt;/span&gt; turned web programming into something more functional, keeping application servers and web handlers separate, and turning middleware into just function composition. Application server and handler are both critical components of an application, but have every ability to be separate: application servers dispatch concurrent work and manage reliability, and they really don’t need to know much about how the work gets done. Handlers contain all the domain logic. Middleware I’m not as sure&amp;nbsp;about.&lt;/p&gt;
&lt;p&gt;Along the way I built a toolkit called Paste meant to be a neutral reusable library for doing web things. I enjoyed the power of it all, building &lt;a href="https://www.ianbicking.org/my-first-ajax-app.html"&gt;interactive debuggers&lt;/a&gt;, &lt;a href="https://www.ianbicking.org/blog/2010/04/webtest-http-testing.html"&gt;test frameworks, proxying&lt;/a&gt;, &lt;a href="https://docs.pylonsproject.org/projects/pastedeploy/en/latest/"&gt;configuration and composition&lt;/a&gt; systems, a &lt;a href="https://pastescript.readthedocs.io/en/latest/"&gt;command-line script framework&lt;/a&gt;, &lt;a href="https://web.archive.org/web/20160719224005/http://pythonpaste.org/modules/exceptions.html"&gt;logging and monitoring&lt;/a&gt;&amp;nbsp;systems.&lt;/p&gt;
&lt;p&gt;Those tools were used some, but the frameworks that made use of them have mostly disappeared in favor of web frameworks that are managed in a more monolithic fashion. (The frameworks might not be technically more monolithic, but I think it’s accurate to say that their &lt;em&gt;communities&lt;/em&gt;&amp;nbsp;are.)&lt;/p&gt;
&lt;p&gt;What remains of Paste is now in other projects, various people extracted the bits that were useful and reimplemented them in new packages. &lt;a href="https://pylonsproject.org/"&gt;Pylons&lt;/a&gt; got several, &lt;a href="https://repoze.readthedocs.io/en/latest/"&gt;Repoze&lt;/a&gt; some&amp;nbsp;others.&lt;/p&gt;
&lt;p&gt;To the degree this work had impact, it was mostly through other people: &lt;a href="https://be.groovie.org/"&gt;Ben Bangert&lt;/a&gt; and &lt;a href="https://twitter.com/pjenvey"&gt;Philip Jenvey&lt;/a&gt; did a lot of early work, &lt;a href="https://twitter.com/chrismcdonough"&gt;Chris McDonough&lt;/a&gt; did the extraction work to keep the pieces&amp;nbsp;alive.&lt;/p&gt;
&lt;h2&gt;&lt;span id="webob"&gt;6.&amp;nbsp;WebOb&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;WebOb was an effort to clean up things from Paste by creating one big &lt;span class="caps"&gt;WSGI&lt;/span&gt; request and response object, trying to be as thorough and high quality as possible. Paste could have looked like WebOb at any time, but it took me a while to acknowledge that being bland and neutral (to avoid competing with web frameworks) wasn’t very&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;WebOb used &lt;span class="caps"&gt;WSGI&lt;/span&gt; as the basic model for requests and responses, but I found it was also a good test framework and client library. If it was timed earlier and my interest had been different I may have pushed for it to be a more “standard” set of objects for&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;WebOb still exists and is maintained inside Pylons. Sergey Schetinin did a very solid job maintaining it until it passed to &lt;a href="https://bertjwregeer.com/"&gt;Bert &lt;span class="caps"&gt;JW&lt;/span&gt; Regeer&lt;/a&gt; who continues to maintain&amp;nbsp;it.&lt;/p&gt;
&lt;h2&gt;&lt;span id="deliverance"&gt;7.&amp;nbsp;Deliverance&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;As mentioned, Zope haunted me professionally. I had to deal with Zope, but I hated it, and wanted to find ways to support more heterogeneous&amp;nbsp;environments.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/deliverance/Deliverance"&gt;Deliverance&lt;/a&gt; was a project started by some Zope people (I believe &lt;a href="https://twitter.com/paulweveritt"&gt;Paul Everitt&lt;/a&gt; specifically roped me into it). The idea was to separate styling and other aspects of “delivery” from the backend. He did it with a language that compiled into &lt;span class="caps"&gt;XSLT&lt;/span&gt;, with selectors that used XPath and I think it required &lt;span class="caps"&gt;XHTML&lt;/span&gt;&amp;nbsp;content.&lt;/p&gt;
&lt;p&gt;The goal was to be able to support sites that used Zope, other Python servers, WordPress, and whatever else may come along. But all the applications should be consistent and allow styling that would be applied across all of&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;I rewrote it as a &lt;span class="caps"&gt;WSGI&lt;/span&gt; server and used &lt;a href="https://lxml.de/"&gt;lxml&lt;/a&gt; for the rewriting. I wrote &lt;a href="https://lxml.de/cssselect.html"&gt;lxml.cssselect&lt;/a&gt; to support &lt;span class="caps"&gt;CSS&lt;/span&gt; instead of XPath, and extended &lt;a href="https://lxml.de/lxmlhtml.html"&gt;lxml.html&lt;/a&gt; to enable other interesting&amp;nbsp;tricks.&lt;/p&gt;
&lt;p&gt;lxml is one of those libraries that I wish had become a standard for Python. The installation was annoying, but the functionality is great. Along with &lt;code&gt;formencode.htmlfill&lt;/code&gt; this is where I started to really enjoy using parsed &lt;span class="caps"&gt;HTML&lt;/span&gt; as a first-class data&amp;nbsp;representation.&lt;/p&gt;
&lt;p&gt;Deliverance &lt;a href="https://github.com/deliverance/Deliverance"&gt;source exists&lt;/a&gt;, but hasn’t been updated for many&amp;nbsp;years.&lt;/p&gt;
&lt;p&gt;This happened around when &lt;a href="https://martinfowler.com/articles/microservices.html"&gt;microservices&lt;/a&gt; were becoming a thing. In a sense Deliverance represents a very different idea of microservices, where the services are actually presented directly to users, and the goal is reusable interactive web applications and components. We see some of this today where the assembly is done in the browser itself (via JavaScript), but it remains an ad hoc and informal approach. &lt;a href="https://sandstorm.io/"&gt;Sandstorm&lt;/a&gt; has some similar&amp;nbsp;motivations.&lt;/p&gt;
&lt;h2&gt;&lt;span id="silverlining"&gt;8. Silver&amp;nbsp;Lining&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;At this point I was struggling with sharing application setup and deployment – it was hard for me to maintain for my own stack, not to mention share with&amp;nbsp;teammates.&lt;/p&gt;
&lt;p&gt;I played around with &lt;a href="https://cloud.google.com/appengine"&gt;App Engine&lt;/a&gt; a bit, but it had so many constraints that I couldn’t advocate it or use it for my own work. Automatic server provisioning was a new thing, and &lt;a href="https://libcloud.apache.org/"&gt;libcloud&lt;/a&gt; had come on the&amp;nbsp;scene.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ianb/silverlining"&gt;Silver Lining&lt;/a&gt; was meant to be a way to take fairly regular applications and develop them locally or deploy them to a remote server, with a consistent approach. The model was similar to &lt;a href="https://12factor.net/"&gt;Twelve-Factor&lt;/a&gt;, emphasizing environment variables. It supported multiple applications, using lots of generated Apache configuration to do the routing in production. It strongly encouraged vendors libraries and avoided remote&amp;nbsp;builds.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;really&lt;/em&gt; liked it. It made development feel good to me, got all the bad parts out of the way. I never seriously used Heroku, I imagine it feels the same? But no one else found it interesting, and it didn’t go&amp;nbsp;anywhere.&lt;/p&gt;
&lt;p&gt;I played around with a web application specification I called &lt;a href="https://github.com/ianb/pywebapp/blob/master/docs/spec.txt"&gt;pywebapp&lt;/a&gt;, but I already had &lt;a href="https://www.ianbicking.org/blog/2014/02/saying-goodbye-to-python.html"&gt;one foot out the door&lt;/a&gt; of Python web&amp;nbsp;development.&lt;/p&gt;
&lt;h2&gt;&lt;span id="pip-virtualenv"&gt;9. pip and&amp;nbsp;virtualenv&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Building and composing applications was a theme through these, and pip and virtualenv fit into the same&amp;nbsp;area.&lt;/p&gt;
&lt;p&gt;With both this and &lt;span class="caps"&gt;WSGI&lt;/span&gt; work, I was mostly making the work of Philip J. Eby (&lt;span class="caps"&gt;PJE&lt;/span&gt;) more accessible. He mapped out and largely implemented both projects, and I applied my own sense of aesthetics to them. &lt;a href="https://setuptools.readthedocs.io/en/latest/easy_install.html"&gt;easy_install&lt;/a&gt; implemented much of what pip actually did, but people &lt;em&gt;loved&lt;/em&gt; to complain about &lt;code&gt;easy_install&lt;/code&gt;. The situation was to the point where people were regularly rejecting &lt;em&gt;any&lt;/em&gt; transitive dependencies because they rejected the idea of&amp;nbsp;installers.&lt;/p&gt;
&lt;p&gt;pip changed easy_installs defaults, added a little metadata, and I’d like to think it added a bunch of attractive command line and logging&amp;nbsp;aesthetics.&lt;/p&gt;
&lt;p&gt;virtualenv took a tiny script &lt;span class="caps"&gt;PJE&lt;/span&gt; had written and again made it more pleasant to&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;These are by far my most popular works. I’ve stopped working on them long ago, but luckily other people have done great work both improving and advocating for them. I cannot even take credit for transitioning them. &lt;a href="https://twitter.com/dstufft"&gt;Donald Stufft&lt;/a&gt; and &lt;a href="https://twitter.com/carljm"&gt;Carl Meyer&lt;/a&gt; in particular got these projects through the lean winter months before they had a new spring. I am now &lt;a href="https://github.com/pypa/pip/graphs/contributors"&gt;number 14&lt;/a&gt; in the list of pip contributors, which I find quite&amp;nbsp;gratifying.&lt;/p&gt;
&lt;p&gt;The irony of these projects is that I was always trying to get &lt;em&gt;past&lt;/em&gt; the operational issues of installation and deployment. I don’t like building and installing and composition, but I wanted to invest some time so that my work was spent more on the things I really wanted to do, things that felt valuable to struggle with. And this is probably why they were successful: everyone else felt the same way, so at the time the space was both open and needed. But I will also take some credit for putting significant effort into promotion, which helped center the community around the tools, both in terms of contribution and documentation. It&amp;#8217;s unfortunate that the next set of functionality – environment management, dependency bundling, executable bundling, etc – hasn&amp;#8217;t been able to gel into an agreed-upon set of tools. Someone would be doing the community a favor to try to build consensus, even though manufactured consensus will require some uncomfortable&amp;nbsp;forcefulness.&lt;/p&gt;
&lt;h2&gt;&lt;span id="doctestjs"&gt;10.&amp;nbsp;doctest.js&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This isn&amp;#8217;t a large project, just a path-not-taken; a failed attempt to exist in the JavaScript open source world as I had in&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;I really liked doctest in Python. My own personal feeling about tests is that they should support forward momentum, and good test failures are the most important part of a testing framework. A failure should tell you as much as possible about what to do next. And stubbed tests should be easy to turn into real&amp;nbsp;tests.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/doctest.html"&gt;Doctest&lt;/a&gt; is great for all of this: you just write some &lt;span class="caps"&gt;REPL&lt;/span&gt;-like code, and your failures are all in the form of potentially-passing tests (just copy in the&amp;nbsp;output!)&lt;/p&gt;
&lt;p&gt;I wanted to bring this to JavaScript, and did so in &lt;a href="https://github.com/ianb/doctestjs"&gt;doctest.js&lt;/a&gt; (with &lt;a href="http://www.ianbicking.org/blog/2012/10/why-doctestjs-is-better-than-pythons-doctest.html"&gt;improvements!&lt;/a&gt;). But no one ever cared.&amp;nbsp;Sigh.&lt;/p&gt;
&lt;p&gt;I never got the hang of the JavaScript open source world. I don’t feel like part of the &lt;span class="caps"&gt;JS&lt;/span&gt; open source community, but I also don’t even know what it would feel like or where that community is. Clearly I show my&amp;nbsp;age.&lt;/p&gt;
&lt;h2&gt;&lt;span id="togetherjs"&gt;11. TogetherJS &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Hotdish&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;These are the kinds of projects that I had always wanted to get to: projects that meaningfully change how we interact with&amp;nbsp;computers.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://togetherjs.com/"&gt;TogetherJS&lt;/a&gt; is a drop-in library to add realtime collaborative features to any website, a category of tool known as &lt;a href="https://en.wikipedia.org/wiki/Cobrowsing"&gt;cobrowsing&lt;/a&gt;. It includes &lt;span class="caps"&gt;UI&lt;/span&gt; and infrastructure, a ton of complicated session management, and it at least tries to engage with the complicated user questions that arise with collaborative browsing. And people really liked&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;I made TogetherJS with &lt;a href="https://aarondruck.com/"&gt;Aaron Druck&lt;/a&gt; and &lt;a href="https://github.com/simonwex"&gt;Simon Wex&lt;/a&gt; in &lt;a href="https://www.mozillalabs.com/"&gt;Mozilla Labs&lt;/a&gt;. We knew the &lt;a href="https://www.ianbicking.org/blog/2014/09/professional-transitions.html"&gt;end was coming for Labs&lt;/a&gt;, and Aaron and &lt;a href="https://www.linkedin.com/in/gregg-lind/"&gt;Gregg Lind&lt;/a&gt; and I tried to pivot to something more Firefox-centric with a project called &lt;a href="https://www.ianbicking.org/projects.html#hotdish"&gt;Hotdish&lt;/a&gt;. Hotdish was based on a collaborative browser window, where anything you did in that window was shared with your little group, including screensharing, ambient awareness, and cursor sharing, as we tried to think about how people could work virtually next to each other. Especially since on computers you aren’t really “next” to each other even when you are in the same room, and we wanted to change&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;But no one in Mozilla cared. Aaron was laid off when Labs closed, and I probably would have been as well if my manager hadn’t given me some cover. We’d just had a second child, my confidence was low, and I didn’t want to make big changes, so I licked my wounds and moved&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;This one really hurt. I really believed in what we were doing, in how we were doing it, even in the potential alignment with Mozilla. It was the work I &lt;em&gt;wanted&lt;/em&gt; to be doing all along. And it felt like it amounted to&amp;nbsp;nothing.&lt;/p&gt;
&lt;p&gt;I withdrew completely from TogetherJS. I felt unable to maintain a healthy relationship with it while also keeping my head above the water on other matters. Unfortunately I didn’t make it easy for other people to keep it alive, though it refused to quite die and &lt;a href="https://github.com/jsfiddle/togetherjs"&gt;still exists today&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The best summary of my thoughts inspired by TogetherJS and Hotdish is in &lt;a href="https://www.ianbicking.org/blog/2014/03/towards-next-level-of-collaboration.html"&gt;Towards a Next Level of Collaboration&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;span id="screenshots"&gt;12. PageShot and Firefox&amp;nbsp;Screenshots&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I started PageShot based on a hint of strategic direction from the &lt;span class="caps"&gt;CEO&lt;/span&gt; of Mozilla, and then went long with it. &lt;a href="http://donovanpreston.com/"&gt;Donovan Preston&lt;/a&gt; was able to work on it for quite a while, until we got further on and he was feeling ready to swap out and I was ready to swap&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;The goal was to provide full-page frozen &lt;span class="caps"&gt;DOM&lt;/span&gt; renderings as a shareable resource on the web. This is a little like &lt;a href="https://archive.is/"&gt;archive.is&lt;/a&gt;, except that it’s your personal view of a site, not the public view. There are also several projects that do this locally, like &lt;a href="https://blog.webmemex.org/"&gt;WebMemex&lt;/a&gt;. I really wanted to do it as something shareable, a frankly aggressive move to give people personal autonomy over the things they see. It also could be a hub for &lt;a href="https://www.ianbicking.org/blog/2015/05/product-journal-as-we-may-discuss.html"&gt;annotation&lt;/a&gt;, data extraction, scraping, history tracking… all sorts of&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;But of course there were serious security and copyright concerns. So, when the time came to actually ship it, we dropped all the cool &lt;span class="caps"&gt;DOM&lt;/span&gt; freezing stuff and just kept the pixel screenshotting, removing even the most basic metadata we had been capturing. It was hard to let it go. We told ourselves we’d try to bring it back, but we all&amp;nbsp;knew…&lt;/p&gt;
&lt;p&gt;Then the project shipped in Firefox, and it was a quiet but very popular service. It didn’t do anything unique, but I think we created a very nice interface (with considerable effort from &lt;a href="https://bram.me/"&gt;Bram Pitoyo’s&lt;/a&gt; and &lt;a href="https://johngruenprojects.com/"&gt;John Gruen’s&lt;/a&gt; design work). In general it was an exercise in reducing expectations and actually being satisfied with the result. Millions of people used it, people frequently mentioned it when talking about why they liked Firefox, and we saw real retention improvements among its users. It took a big hit with the &lt;a href="https://blog.mozilla.org/blog/2017/11/14/introducing-firefox-quantum/"&gt;Quantum redesign&lt;/a&gt;, which relegated it to what I have come to call the “meatball menu” (the hamburger menu’s cousin, a line of three meatballs: ⋯). But people still found and enjoyed it (small lesson: many people love the context&amp;nbsp;menu?!)&lt;/p&gt;
&lt;p&gt;Then sharing and the server were cancelled and the project largely pushed aside because… I don’t know? We never fit into any strategy, and we were all tired. I was tired too so I didn’t fight it. It was a modest feature, it didn’t feel like “the future”. And it wasn’t, it was a rehashing of very old and well-understood things. I myself had to put in quite a bit of effort to accept that there is value in doing old and well-understood things when that’s what the people&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;Screenshots remains a feature in&amp;nbsp;Firefox.&lt;/p&gt;
&lt;h2&gt;&lt;span id="browserlab"&gt;13. Browser&amp;nbsp;Lab&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This is a project that never launched, but I sure did fiddle with it for a long&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/firefox-context-graph/context-graph-its-time-to-bring-context-back-to-the-web-a7542fe45cf3"&gt;Context Graph&lt;/a&gt; was a Firefox initiative: &lt;em&gt;a forward button for the web&lt;/em&gt;. Or: another way to get to what’s next, not links promoted by Facebook’s algorithm or scrolling ever further down some infinite scroll timeline or reflexively opening the same sites over and over. What if your browser could offer something smart for &lt;em&gt;where next&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;I was never directly involved with Context Graph, but why not see what there is to learn? PageShot was still capturing full pages at this stage, and I extract a list of all the URLs I had visited for the last two years and started to &lt;a href="https://www.ianbicking.org/blog/2016/08/product-journal-oops-a-scraper.html"&gt;drive it through PageShot&lt;/a&gt;. I did it in a window in the background while I was working, and it was surprisingly weird feeling to see all these old news articles pop up, old emails (Gmail URLs are very stable!), and every other little bit of web activity I had built&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;It felt like there was gold in there, though retroactively getting pages didn’t give me nearly as much data as I would like. So I made what I first called the Personal History Archive, and then I half-renamed &lt;a href="https://github.com/ianb/personal-history-archive/"&gt;Browser Lab&lt;/a&gt;. After installing the program and extension it will extract as much browsing data as possible, serializing it into a local SQLite database and static files, including frozen copies of&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;The result is entirely impossible to share. It’s not like sharing URLs, which might be embarrassing, but are easy enough to scrub. For instance if you open Gmail then all the subject lines are serialized. So my goal was either self-experimentation, constructing a personal shareable set (e.g., do all my GitHub and open professional activity on it, but avoid most other normal activity), or get Mozilla to hire some temps to spend the day idly browsing with the understanding that we were recording&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;It never got that far, but I did enjoy messing around with it, and I still believe there’s gold in there. I made an accompanying Python library to handle the data, and made it usable in Jupyter. I think the idea of datasets paired with libraries is something we should do more of. I played around with &lt;a href="https://github.com/ianb/personal-history-archive/blob/master/python/nn_readable.ipynb"&gt;training a neural net to detect article bodies&lt;/a&gt; and realized &lt;a href="https://github.com/ianb/personal-history-archive/blob/master/python/named_entities.ipynb"&gt;named-entity extraction is very greedy&lt;/a&gt;. But I never got very deep into the analysis I was trying to&amp;nbsp;enable.&lt;/p&gt;
&lt;p&gt;There’s really no reason for me to ever revisit this, even though I found it a genuinely fun and interesting project. If there was something to be learned there it was for Mozilla to learn and act upon. And Mozilla still could! I never knew how to get people’s&amp;nbsp;attention.&lt;/p&gt;
&lt;h2&gt;&lt;span id="firefox-voice"&gt;14. Firefox&amp;nbsp;Voice&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This is not the end of the list, just the end for now, because Firefox Voice brings us up to today. (I vow to start, maybe finish, and move past many entirely new&amp;nbsp;projects!)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mozilla-extensions/firefox-voice"&gt;Firefox Voice&lt;/a&gt; was started shortly before I joined the Consumer Voice Products team, by &lt;a href="https://juliacambre.com/"&gt;Julia Cambre&lt;/a&gt; and &lt;a href="https://twitter.com/andrenatalbr"&gt;André Natal&lt;/a&gt;. It was the second attempt at the idea by the team (with &lt;a href="https://abewallin.com/"&gt;Abe Wallin&lt;/a&gt;, &lt;a href="https://www.harraton.com/"&gt;Janice Tsai&lt;/a&gt;, and &lt;a href="http://jofish.com/"&gt;Jofish Kaye&lt;/a&gt;). The concept was straight-forward: build a voice assistant for the browser. I’ve been working on the project for the last&amp;nbsp;year.&lt;/p&gt;
&lt;p&gt;This deserves a whole post, so I won’t do a retrospective here (&lt;a href="https://www.ianbicking.org/blog/2020/08/thoughts-on-voice-interfaces.html"&gt;Thoughts on Voice Interfaces&lt;/a&gt; offers some of my general observations). I did believe in the project. As a voice assistant for desktop Firefox it wasn’t enough. But as a toehold to create a natural language interface to the web, it could have been a lot. Everything you want to interact with in your computing life is accessible one way or another through the web, and building new ways to get at that feels useful and important. And maybe it still could be, we’ll see&amp;#8230; but it won’t happen at&amp;nbsp;Mozilla.&lt;/p&gt;
&lt;p&gt;Even before the project (and team and division) was &lt;a href="https://blog.mozilla.org/blog/2020/08/11/changing-world-changing-mozilla/"&gt;cancelled&lt;/a&gt;, I realized Mozilla wasn’t ready to invest enough to succeed. I don’t think success requires an &lt;a href="https://voicebot.ai/2018/11/15/amazon-alexa-headcount-surpasses-10000-employees-here-is-the-growth-rate/"&gt;Alexa-sized project&lt;/a&gt;, but it’s bigger than a team of four and a handful of interns, as much as I enjoyed working with them&amp;nbsp;all.&lt;/p&gt;
&lt;h2&gt;&lt;span id="what-next"&gt;What&amp;nbsp;next?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I seldom think about most of the old projects now. They have long ago been &lt;a href="https://en.wiktionary.org/wiki/page_out"&gt;paged out&lt;/a&gt; of my mind to make room for new things. It feels a little unfair to my past self, enthusiastic and full of hope around some new idea. I haven’t even lost faith in many of those ideas, but I am no longer the one suited to pursue&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;I’ve had to put aside guilt to move on, but I haven’t figured out how to balance that with the work to let a project live up to its potential. I respect those who have done the work to maintain open source projects over a long period of time, and I&amp;#8217;ve accepted I&amp;#8217;m not that kind of&amp;nbsp;person.&lt;/p&gt;
&lt;p&gt;The lesson I’m taking from this exercise of listing projects is that I have not paid enough attention over the years to the people I’ve worked with. Software can’t survive long on its own, and its intrinsic value is as limited as its longevity. Professional relationships are also impermanent. But… there’s potential I’ve missed out&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Still, I’m hardly the only one who moves on: people, companies, industries, entire societies move on from problems. They just decide something doesn’t matter, or doesn’t matter &lt;em&gt;enough&lt;/em&gt;. Often I’ve felt like the last one at the party, not able to call it quits. Who am I to blow against the&amp;nbsp;wind?&lt;/p&gt;
&lt;p&gt;So, what&amp;nbsp;next?&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Thoughts on Voice Interfaces</title><link href="https://www.ianbicking.org/blog/2020/08/thoughts-on-voice-interfaces.html" rel="alternate"></link><published>2020-08-03T00:00:00-05:00</published><updated>2020-08-03T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2020-08-03:/blog/2020/08/thoughts-on-voice-interfaces.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been working on the Consumer Voice Products team in Mozilla for about a year now. My primary project has been &lt;a href="https://github.com/mozilla-extensions/firefox-voice"&gt;Firefox Voice&lt;/a&gt;, but our mandate is&amp;nbsp;larger.&lt;/p&gt;
&lt;p&gt;I still feel like a beginner in the area of voice, but I have developed some opinions. Many observations are the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been working on the Consumer Voice Products team in Mozilla for about a year now. My primary project has been &lt;a href="https://github.com/mozilla-extensions/firefox-voice"&gt;Firefox Voice&lt;/a&gt;, but our mandate is&amp;nbsp;larger.&lt;/p&gt;
&lt;p&gt;I still feel like a beginner in the area of voice, but I have developed some opinions. Many observations are the influence of other people’s ideas, work, or research, but I’ve lost the provenance. I’ve benefited a great deal from the long and regular discussions I’ve had with my team, particularly &lt;a href="http://abewallin.com"&gt;Abraham Wallin&lt;/a&gt;, &lt;a href="http://www.harraton.com/"&gt;Janice Tsai&lt;/a&gt;, &lt;a href="http://jofish.com"&gt;Jofish Kaye&lt;/a&gt;, and &lt;a href="https://juliacambre.com"&gt;Julia Cambre&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href="https://voicebot.ai/2020/09/07/ian-bicking-talks-firefox-voice-and-observations-about-assistants-today-voicebot-podcast-ep-166/"&gt;Hear me talk about some of these topics on this Voicebot podcast&amp;nbsp;episode&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Voice interfaces are voice &lt;em&gt;interfaces&lt;/em&gt;. They are a way for the user to express their desire, using patterns that might be &lt;a href="https://en.wikipedia.org/wiki/Skeuomorph"&gt;skeuomorphism&lt;/a&gt; of regular voice interactions, or might be specific learned behaviors. It&amp;#8217;s not a conversation. You aren&amp;#8217;t talking with the computer.&lt;ol&gt;
&lt;li&gt;I suspect you can push the user into a conversational skeuomorphism if you think that&amp;#8217;s best, and the user will play along, but it&amp;#8217;s no more right than another metaphor. It&amp;#8217;s a question of quality of interaction, not ease or&amp;nbsp;familiarity.&lt;/li&gt;
&lt;li&gt;That said, speaking is an improvisation. You have something you want to say, you&amp;#8217;ve probably prepared a few keywords, but the rest you make up word-by-word. Words won’t come out your mouth with grammatical&amp;nbsp;precision.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;I hate how voice interfaces force us to speak without pauses because a pause is treated as the end of the statement. Firefox Voice does the same thing, so I appreciate why it works this way. I still hate it.&lt;ol&gt;
&lt;li&gt;Typically tools operate on the granularity of an &lt;a href="https://en.wikipedia.org/wiki/Utterance"&gt;utterance&lt;/a&gt;: one statement, command, query. It&amp;#8217;s the same for conversational interfaces, just a different kind of&amp;nbsp;turn-taking.&lt;/li&gt;
&lt;li&gt;Many systems use a &amp;#8220;wakeword&amp;#8221; or &amp;#8220;keyword spotting&amp;#8221; to start the interaction. What if we used keyword spotting to determine the end as well? &amp;#8220;Please&amp;#8221; might be a good choice. It&amp;#8217;s like the Enter&amp;nbsp;key.&lt;/li&gt;
&lt;li&gt;I read a science fiction story where they used voice interfaces, and used &amp;#8220;please&amp;#8221; as a statement terminator as well (in a &lt;a href="https://archive.org/details/Asimovs_v15n12n13_1991-11/page/n227/mode/2up"&gt;story by Phillip C. Jennings&lt;/a&gt; &lt;a href="https://archive.org/stream/Asimovs_v15n12n13_1991-11/Asimovs_v15n12n13_1991-11_djvu.txt"&gt;[text only]&lt;/a&gt; &lt;a id="footnote1-source" href="#footnote1"&gt;**&lt;/a&gt;). This also made &amp;#8220;please&amp;#8221; insulting, using it meant you regarded someone as no more important than a&amp;nbsp;computer.&lt;/li&gt;
&lt;li&gt;Another option might be speculative execution while allowing amendments. A common example would be when you want to say &amp;#8220;set reminder for 2pm to go to the post office&amp;#8221; but you paused just a little too long and the assistant jumped on you at &amp;#8220;set reminder for 2pm&amp;#8221;. Now it&amp;#8217;s going to blather on about a question (“what reminder?”), and not only do you have to wait, you have to time your response. It would be nice if the moment you said &amp;#8220;set reminder for 2pm&amp;#8221; the assistant would indicate (visually) &amp;#8220;setting 2pm reminder for what?&amp;#8221; and you might answer anytime, and if you were slow it might give an audio prompt which you could also talk&amp;nbsp;over.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Some people think it is important that we &lt;a href="https://www.the-vital-edge.com/digital-assistants-abuse/"&gt;not abuse assistants&lt;/a&gt;. They believe abuse will make us cold or abusive to each other. I do not agree.&lt;ol&gt;
&lt;li&gt;We&amp;#8217;ve also learned that people feel embarrassed when they can&amp;#8217;t get their assistant to understand them. It&amp;#8217;s different than other interfaces, as the voice makes it feel more personal and judgy. So concern over emotional impact is not&amp;nbsp;misplaced.&lt;/li&gt;
&lt;li&gt;When I used a &lt;span class="caps"&gt;GPS&lt;/span&gt; in the car regularly it would continually give voice instructions. I&amp;#8217;d miss a turn and it would constantly tell me to make a U-turn or otherwise backtrack. I&amp;#8217;d also just &lt;em&gt;choose&lt;/em&gt; another route and it would complain. I knew I didn’t make a mistake, but I still felt judged. Then I turned off the voice and it was fine, the screen just informed me, it didn&amp;#8217;t judge&amp;nbsp;me.&lt;/li&gt;
&lt;li&gt;Which is to say: I don’t think the answer is compassion towards our computers. They neither need it nor even ask for it. Instead of navigating through the uncanny valley we should keep computer and human separate. You want to cut short what your assistant is saying? Please do. Our challenge as implementers is to keep your heart from going cold by making it very clear this isn&amp;#8217;t a human and has no&amp;nbsp;feelings.&lt;/li&gt;
&lt;li&gt;An aside, but &lt;a href="https://www.youtube.com/watch?v=rVlhMGQgDkY"&gt;this classic video&lt;/a&gt; of people taunting a Boston Robotics robot made people uncomfortable (including me!). They are being such jerks! I think the answer is that we should not make robots that look like humans. You and I pass on the sidewalk, and we have to navigate cooperatively to keep from hitting each other. If I bust through you paying no attention that makes me the asshole. I don&amp;#8217;t want to have to start navigating politeness with robots too: they should step aside; if I place a hand on a robot it should stop, not be offended. I&amp;#8217;m not polite to doors either, and this does not make me a worse&amp;nbsp;person.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Voice is not a command-line interface. Voice ends up as text, and despite caveats&amp;#8230; really it’s just treated as text. So it seems appealing to treat it like a command line interface, but no&amp;#8230;&lt;ol&gt;
&lt;li&gt;Accuracy is a big issue. Transcription errors are common. You can recover from a lot, but I think it puts a real upper limit on how much information you can give the computer before interaction is required. Maybe you are 95% successful saying one thing. But then you only have 90% chance of saying two concepts together. If the concept is complicated then 95% accuracy is&amp;nbsp;generous.&lt;/li&gt;
&lt;li&gt;If you execute something complicated using several smaller commands then you have opportunities to fix problems part way through. You&amp;#8217;ll need those opportunities. We call this&amp;nbsp;“repair”.&lt;/li&gt;
&lt;li&gt;I think &amp;#8220;undo&amp;#8221; would be a nice capability to build into everything. It would probably be a prefix to your reparative command. Like, &amp;#8220;no, search for nearby tacos&amp;#8221; meaning undo last command and then do this new&amp;nbsp;one.&lt;/li&gt;
&lt;li&gt;Besides accuracy, it&amp;#8217;s also mentally harder to successfully compose complex or precise sentences when speaking. Tools can ignore uninteresting words, accept multiple phrasings, put in reasonable defaults, but we can only do that once you’ve spoken. We can&amp;#8217;t boost your brain to make it easier to speak complex&amp;nbsp;phrases.&lt;/li&gt;
&lt;li&gt;GUIs are a little like a discussion. You get a menu of options – buttons and controls – and micro-feedback like hover states or a depressed state, as well as macro-feedback like actual changes in the screen to indicate what happened. Trying to compose a compound voice statement can be trying to interact with a laggy &lt;span class="caps"&gt;UI&lt;/span&gt; where you outrun the screen refresh. It&amp;#8217;s frustrating by&amp;nbsp;default.&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s not necessarily easy to give humans compound commands either. Try accomplishing something by looking over someone&amp;#8217;s shoulder and telling them what to&amp;nbsp;click&amp;#8230;&lt;/li&gt;
&lt;li&gt;Familiarity makes it possible to talk through a task with both computers and humans. I&amp;#8217;ve definitely become familiar with my Alexa, I&amp;#8217;ve learned what phrases work and which&amp;nbsp;don&amp;#8217;t.&lt;/li&gt;
&lt;li&gt;Short phrases are much harder for the computer to properly transcribe. Brevity is punished. The more words you use to express less information, the better it works. “Paste” is almost never detected&amp;nbsp;correctly.&lt;/li&gt;
&lt;li&gt;Assuming you don&amp;#8217;t have a custom transcription language model for your application, it will be very hard to get the computer to hear what you are saying if you are required to use odd phrases or terms. It&amp;#8217;s like having a stenographer that just doesn&amp;#8217;t know anything about your&amp;nbsp;domain.&lt;/li&gt;
&lt;li&gt;I do wonder if there’s something like &lt;a href="https://en.wikipedia.org/wiki/Procedure_word"&gt;procedure words&lt;/a&gt; for voice interfaces. You’ll know these from words like “roger” and “mayday”, where there’s clear and unambiguous words to communicate vital&amp;nbsp;information.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Voice has constraints, but it also has advantages, mostly from using language.&lt;ol&gt;
&lt;li&gt;The biggest is that you can talk about things you can&amp;#8217;t see. A &lt;span class="caps"&gt;GUI&lt;/span&gt; has to show everything you can act on (sometimes with doorways to other&amp;nbsp;things)&lt;/li&gt;
&lt;li&gt;You can&amp;#8217;t see search queries. And so search is always a top use of voice! In general search is used for things you can’t see but want to&amp;nbsp;find.&lt;/li&gt;
&lt;li&gt;Things-you-can&amp;#8217;t-see is also important in multitasking. You can&amp;#8217;t see the content of other tabs, and often can&amp;#8217;t see other applications. I don&amp;#8217;t think we&amp;#8217;ve figured out how to unleash this, but I think there&amp;#8217;s something&amp;nbsp;there.&lt;/li&gt;
&lt;li&gt;Because of the imprecision of voice everything is a search even if you wish it wasn&amp;#8217;t. So something as simple as adding a bookmark to a folder involves searching for the&amp;nbsp;folder.&lt;/li&gt;
&lt;li&gt;You also can&amp;#8217;t see things that don&amp;#8217;t exist yet. I can imagine some utility in using language to create conditionals and triggers, using language’s ability to talk about something that does not yet exist. What excites me here isn’t that voice is necessarily easier, but that it’s easy to take phrases that do something now and rephrase them to talk about the future. Learning to talk about the future is implicit when learning to act right&amp;nbsp;now.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;For all the cool things one might imagine doing with natural language interfaces, right now it&amp;#8217;s all imperative commands.&lt;ol&gt;
&lt;li&gt;This is in part a human’s relationship with the computer. You don&amp;#8217;t care what the computer thinks, you don&amp;#8217;t need to theorize on what will happen or give it reassurance, you just tell it what to&amp;nbsp;do.&lt;/li&gt;
&lt;li&gt;Conveniently English imperatives are simpler than most other sentences. This is probably no coincidence, as an imperative is designed to be understood and acted on&amp;nbsp;unambiguously.&lt;/li&gt;
&lt;li&gt;But there may be something useful about using voice to create descriptions in parallel with other activities. For instance some researchers have found a benefit in having the user describe their actions while a recorder sees the concrete (but noisy) clicks and&amp;nbsp;movements.&lt;/li&gt;
&lt;li&gt;Maybe tagging and organization are useful voice tasks, to be done in parallel with other non-voice navigation. Voice could be a layer on top of normal&amp;nbsp;interfaces.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Access to microphones is hard and a big deal.&lt;ol&gt;
&lt;li&gt;There&amp;#8217;s lots of very reasonable privacy&amp;nbsp;concerns.&lt;/li&gt;
&lt;li&gt;Like many privacy concerns, they are solved by making things harder for&amp;nbsp;everyone.&lt;/li&gt;
&lt;li&gt;Analog hardware is just difficult to handle, different hardware performs differently, things cut out or fail over&amp;nbsp;time.&lt;/li&gt;
&lt;li&gt;Custom hardware, like in the Alexa, makes really useful&amp;nbsp;improvements.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The big-bag-of-intent-handlers approach to parsing causes some problems&lt;ol&gt;
&lt;li&gt;As far as I can tell every system uses some form of categorization/classification, mapping a phrase to a handler. There’s always overlap, so you have to decide which handler is&amp;nbsp;best.&lt;/li&gt;
&lt;li&gt;Given variable inputs (search query, artist name, etc), mistranscriptions, and stopwords, the complete space of inputs is hard to&amp;nbsp;enumerate.&lt;/li&gt;
&lt;li&gt;As a result adding new handlers can have unexpected results, throwing the balance of the system off. I’ve been unimpressed with the extensibility of most assistants, but it’s&amp;nbsp;understandable.&lt;/li&gt;
&lt;li&gt;You can imagine always preferring native handlers to extension handlers, but that’s not great either. You want the handlers to be fairly broad, and it’s likely new handlers will be a refinement on functionality that’s merely a best-effort fallback for the default&amp;nbsp;handlers.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Apparently the vanguard of technology are now marketing agencies.&lt;ol&gt;
&lt;li&gt;Growth in these areas seems to be driven by someone saying &amp;#8220;you know, voice is the&amp;nbsp;future&amp;#8230;&amp;#8221;&lt;/li&gt;
&lt;li&gt;The marketplaces for voice assistant skills are pretty awful for both consumers and producers. Consumers find junk, producers can&amp;#8217;t find an&amp;nbsp;audience.&lt;/li&gt;
&lt;li&gt;Media outlets are the exception, but only because they are providing content instead of an&amp;nbsp;interface.&lt;/li&gt;
&lt;li&gt;Everything people do with an assistant seems stable and frozen. People do factual searches, weather, timers, reminders, and turn on and off&amp;nbsp;lights.&lt;/li&gt;
&lt;li&gt;The amount of technology we&amp;#8217;re bringing to bear on a replacement for The Clapper is&amp;nbsp;impressive.&lt;/li&gt;
&lt;li&gt;Voice assistants, home and otherwise, are successful, but they are not successful&amp;nbsp;ecosystems.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s neat that people tell you exactly what they want to do.&lt;ol&gt;
&lt;li&gt;If you try to understand a &lt;span class="caps"&gt;GUI&lt;/span&gt; from behavioral telemetry you have to figure out why maybe someone hit a button and then canceled and tried a different button, and that maybe implies they wanted to do something that isn&amp;#8217;t directly exposed, or maybe they just misclicked,&amp;nbsp;or&amp;#8230;&lt;/li&gt;
&lt;li&gt;Because voice discovery is itself exploratory (if you want to find out if something works you should just try it), people will say what they&amp;nbsp;want.&lt;/li&gt;
&lt;li&gt;Of course there&amp;#8217;s nothing that demands that an intent be clear enough to &lt;em&gt;ever&lt;/em&gt; be implementable. So you may just be exposed to desires you can never&amp;nbsp;fulfill.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Voice doesn&amp;#8217;t mean we can create smart agents that take care of everything.&lt;ol&gt;
&lt;li&gt;Voice makes smart agents seductive because you can express a desire using natural language without specifying exactly how to accomplish the&amp;nbsp;thing.&lt;/li&gt;
&lt;li&gt;You want a voice agent to buy tickets or order you dinner? No, you don&amp;#8217;t want this. This isn&amp;#8217;t going to be any more successful than asking a waiter to order for you. Maybe if you are adventurous or very familiar with the waiter it’s possible. Even in our family we&amp;#8217;re constantly asking each other questions about preference, and negotiating options for small questions, and we are &lt;em&gt;very&lt;/em&gt; familiar with each&amp;nbsp;other.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Being able to state intentions instead of specific actions offers some opportunity to support greater focus and directed action.&lt;ol&gt;
&lt;li&gt;The way you do something with a normal &lt;span class="caps"&gt;GUI&lt;/span&gt; is you come up with the goal in your mind, decompose it into actions, and then start on the first action. Maybe open a tab, click on a button, find a document, etc. It’s easy to get lost along the way – not just confused, but also&amp;nbsp;distracted.&lt;/li&gt;
&lt;li&gt;I doubt we can – or even should – just “make it happen” when there’s a complex goal-oriented statement. But even if the tool can’t easily break down a task, maybe the user can construct their own top-down outline of a&amp;nbsp;task.&lt;/li&gt;
&lt;li&gt;This immediately leads to the idea you could then save the outline as a repeatable task. Instead of making it an opaque repeatable task, I suspect it would be better to make it a list, and make it easy to follow along with lists. Then the assistant says “next you did: ‘open most recent email from Joe’; say “ok” or a command…” and then maybe that’s the right next task, or maybe you say something else inspired by your past command. The assistant can provide task scaffolding instead of&amp;nbsp;automation.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;I am skeptical about learning and adaptation.&lt;ol&gt;
&lt;li&gt;Reliability – even reliably making mistakes – is an important feature. It means the user can learn about the system and adapt their behavior, without the system foiling them by changing its own&amp;nbsp;behavior.&lt;/li&gt;
&lt;li&gt;Discovery is hard, and having the search space change under your feet only makes it&amp;nbsp;worse.&lt;/li&gt;
&lt;li&gt;In summary: humans learn faster and better than machines. If the experience is going to grow, it needs to be explicit and deterministic, not clever or&amp;nbsp;implied.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Voice output suffers from too much or not enough information.&lt;ol&gt;
&lt;li&gt;This is where impolite interruptions might make voice output&amp;nbsp;feasible.&lt;/li&gt;
&lt;li&gt;Human voice interactions can have the same problem. We improve our communication by being in dialog with someone instead of just talking at them, and by using body language to interpret the interest of the other&amp;nbsp;person.&lt;/li&gt;
&lt;li&gt;Some of the equivalents – asking for confirmation before speaking more, or allowing the person to interrupt – might suffer from taking too many cues from human interaction. The questions themselves easily take more time and effort than just presenting too much information, and the interruptions turn the interaction into something that feels hostile instead of&amp;nbsp;helpful.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;There’s “intent parsing” but not much I would consider “understanding”. There’s not much U in &lt;a href="https://en.wikipedia.org/wiki/Natural-language_understanding"&gt;&lt;span class="caps"&gt;NLU&lt;/span&gt;&lt;/a&gt;.&lt;ol&gt;
&lt;li&gt;Intent parsing means: given an utterance, pick the most likely thing your program can do; and also: pull out some variable parameters from the&amp;nbsp;utterance&lt;/li&gt;
&lt;li&gt;There’s no room for understanding there. “Picking an intent handler” isn’t&amp;nbsp;understanding.&lt;/li&gt;
&lt;li&gt;You can only have understanding if you also have a knowledge model. Some flat &lt;span class="caps"&gt;JSON&lt;/span&gt; with some labels isn’t a model. Models in turn need to be attached to functional results: stuff the assistant can actually&amp;nbsp;do.&lt;/li&gt;
&lt;li&gt;I don’t know what understanding looks like, or what those models will look like. And I’m not even sure I’ll recognize them when I see them, it’s possible even in the code they’ll be&amp;nbsp;implied.&lt;/li&gt;
&lt;li&gt;As an aside, I personally believe action and meaning and understanding all go together: meaning only exists when we can attach it to effects, and abstract understanding is backfilled. So models without handlers aren’t meaningful, and models that are only handler references aren’t&amp;nbsp;models.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;We could use more orthogonality. That is: meaningful phrase modifiers and statements that can apply across a wide variety of actions or application functionality.&lt;ol&gt;
&lt;li&gt;Orthogonality allows a user to come up with creative and unpredicted combinations in a phrase, and for those to actually&amp;nbsp;work.&lt;/li&gt;
&lt;li&gt;The simplest form of this I’ve thought about is a simple verb/direct-object with a simple set of&amp;nbsp;modifiers.&lt;/li&gt;
&lt;li&gt;Another way to think about it might be akin to &lt;a href="https://www.ianbicking.org/blog/2018/02/web-small-composable-tools.html"&gt;composability&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Discovery is naturally hard.&lt;ol&gt;
&lt;li&gt;Natural language commands don’t need to be organized into hierarchical structures of menus or screens, which is nice but doesn’t lend itself to&amp;nbsp;navigation.&lt;/li&gt;
&lt;li&gt;Periodically showing the user some examples seems to be the state of the art.&amp;nbsp;Sad.&lt;/li&gt;
&lt;li&gt;I feel like something might be possible with cuing. I am reminded of a small anecdote from Logo, where when you type something that isn’t defined (e.g., &lt;span class="caps"&gt;SQUARE&lt;/span&gt;) it will reply &lt;code&gt;I don’t know how&amp;nbsp; TO SQUARE&lt;/code&gt;, hinting in the error message what you should do next (&lt;code&gt;TO PROC&lt;/code&gt; defines a procedure). Doing this requires a cleverness in the language design that has not revealed itself to&amp;nbsp;me.&lt;/li&gt;
&lt;li&gt;Besides errors, any output (speech or text) is an opportunity to use language that suggests what phrases can be used. It’s a chance to encourage the user to mirror the computer’s&amp;nbsp;language.&lt;/li&gt;
&lt;li&gt;The big bag of intent handlers approach means there’s no natural comprehensibility to the space of phrases and abilities. By pursuing “natural language” we create a very sparse space of successful phrases amid the entirety of possible language. Is it&amp;nbsp;predictable?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Intents tend to be dominated by verbs, but I think we might do better leading with nouns.&lt;ol&gt;
&lt;li&gt;The parsers tend to focus on the constant bits, the verbs: “&lt;strong&gt;play&lt;/strong&gt; [artist]”, “&lt;strong&gt;send message to&lt;/strong&gt;&amp;nbsp;[recipient]”.&lt;/li&gt;
&lt;li&gt;This maps to a call like &lt;code&gt;sendMessage(“Emily”, “On my way home”)&lt;/code&gt;. But maybe it should map to something like &lt;code&gt;search(“Emily”).sendMessage(“On my way home”)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The point being that you want the intersection of “entities called &lt;em&gt;Emily&lt;/em&gt;” and &amp;#8220;entities that respond to &lt;em&gt;sendMessage&lt;/em&gt;”.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;STT&lt;/span&gt; (speech to text) and &lt;span class="caps"&gt;TTS&lt;/span&gt; (text to speech) are terrible terms.&lt;ol&gt;
&lt;li&gt;I have to &lt;em&gt;think hard&lt;/em&gt; to get the right one. Every&amp;nbsp;time.&lt;/li&gt;
&lt;li&gt;I prefer “speech/voice transcription” and “speech/voice&amp;nbsp;generation”.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Twenty seems like a good round number for a conclusion.&lt;ol&gt;
&lt;li&gt;It feels like there’s two paths before us: structured and unstructured understanding. Both ultimately lead to structured understanding, humans construct syntactic and meaningful structured statements. Is the bridge to that a structured pidgin, or an unstructured statistical&amp;nbsp;understanding?&lt;/li&gt;
&lt;li&gt;Fundamental user interface standards in voice are still mysteries to us. Will a radical change and consolidation happen like with &lt;a href="https://en.wikipedia.org/wiki/WIMP_(computing)"&gt;&lt;span class="caps"&gt;WIMP&lt;/span&gt;&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;A whole new level of expressivity &lt;em&gt;might&lt;/em&gt; be revealed by voice interfaces. But I don’t think we know what that kind of relationship with a computer should look like. Current voice UIs are imperative just like graphical interfaces are&amp;nbsp;imperative.&lt;/li&gt;
&lt;li&gt;The details all matter: failures in speech recognition, different listening modes, microphone access and quality, output length and intonation, and all that ignores the actual &lt;em&gt;functionality&lt;/em&gt; of the thing you are interfacing with, which also will require&amp;nbsp;changes.&lt;/li&gt;
&lt;li&gt;This clearly is going to happen, but I’m not at all certain the next shift will be centered on voice, or centered on something else and happen to include voice. As an analogy, touch interfaces enabled important changes… but touch interfaces themselves aren’t&amp;nbsp;important.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Comments on &lt;a href="https://twitter.com/ianbicking/status/1290310037198516227"&gt;Twitter&lt;/a&gt; or &lt;a href="https://news.ycombinator.com/item?id=24040539"&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href="#footnote1-source" id="footnote1"&gt;**&lt;/a&gt; From &lt;i&gt;The Fourth Intercometary&lt;/i&gt; (a story I enjoyed and would recommend!): &amp;#8220;Director Lester Bragolio stepped out of seclusion, clad in tunic, breeches and slippers, hairbrush in hand. He spoke while combing his tousled white hair. &amp;#8216;Would you bring up the navscreen, please? Ten degree&amp;nbsp;radius?&amp;#8217;&lt;/p&gt;&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;The Tipsy Witch held faithful to Yossi’s voice. He said &amp;#8216;Navscreen A, grid out from Gledhill, ten degree radius.&amp;#8217; Only then did the monitor come to life. &amp;#8216;False color, please,&amp;#8217; Yossi instructed. His own &amp;#8216;please&amp;#8217; meant &amp;#8216;end of command.&amp;#8217; Language changed when one talked to machines. Spoken as the Director said it, the word almost signified: you are the same to me as some piece of&amp;nbsp;equipment.&amp;#8221;&lt;/p&gt;&lt;/blockquote&gt;</content><category term="misc"></category></entry><entry><title>Kling’s Axes of Politics, and the Technocrats</title><link href="https://www.ianbicking.org/blog/2019/07/kling-axes-of-politics-technocrats.html" rel="alternate"></link><published>2019-07-30T00:00:00-05:00</published><updated>2019-07-30T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2019-07-30:/blog/2019/07/kling-axes-of-politics-technocrats.html</id><summary type="html">&lt;p&gt;In &lt;a href="https://cdn.cato.org/libertarianismdotorg/books/ThreeLanguagesOfPolitics.pdf"&gt;Arnold Kling&amp;#8217;s &lt;em&gt;The Three Languages Of Politics&lt;/em&gt;&lt;/a&gt; he argues that we don&amp;#8217;t all exist along some set of objective political axes, left and right, or even the classic &lt;a href="https://en.wikipedia.org/wiki/Nolan_Chart"&gt;two-dimensional spectrum&lt;/a&gt; (or even &lt;a href="https://en.wikipedia.org/wiki/File:Revised_NPOV_political_chart.jpg"&gt;three dimensions&lt;/a&gt;). Instead different groups use different axes, or different dichotomies, to look at the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a href="https://cdn.cato.org/libertarianismdotorg/books/ThreeLanguagesOfPolitics.pdf"&gt;Arnold Kling&amp;#8217;s &lt;em&gt;The Three Languages Of Politics&lt;/em&gt;&lt;/a&gt; he argues that we don&amp;#8217;t all exist along some set of objective political axes, left and right, or even the classic &lt;a href="https://en.wikipedia.org/wiki/Nolan_Chart"&gt;two-dimensional spectrum&lt;/a&gt; (or even &lt;a href="https://en.wikipedia.org/wiki/File:Revised_NPOV_political_chart.jpg"&gt;three dimensions&lt;/a&gt;). Instead different groups use different axes, or different dichotomies, to look at the world. &lt;em&gt;Because&lt;/em&gt; we don&amp;#8217;t share a common idea of good vs. bad, thus we cannot agree on what is good and bad, and so we disagree&amp;nbsp;politically.&lt;/p&gt;
&lt;p&gt;The free &lt;span class="caps"&gt;PDF&lt;/span&gt; of the book is linked above if you want to read his exposition. I first encountered it in a &lt;a href="http://www.econtalk.org/kling-on-the-three-languages-of-politics/"&gt;podcast&lt;/a&gt;. The idea is&amp;nbsp;simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Liberals&lt;/strong&gt; view political conflict as &lt;strong&gt;oppressed vs.&amp;nbsp;oppressor&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conservatives&lt;/strong&gt; view political conflict as &lt;strong&gt;civilization vs.&amp;nbsp;barbarism&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Libertarians&lt;/strong&gt; view political conflict as &lt;strong&gt;freedom vs.&amp;nbsp;coercion&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;None of this is meant to speak to the virtue or correctness of these political philosophies. Nor does political discourse directly reveal these beliefs. That&amp;#8217;s why it&amp;#8217;s so confusing: everyone is talking to the audience, slipping into different imagined value systems in the almost-useless attempt to &amp;#8220;convince&amp;#8221; someone of something. But underneath a conservative&amp;#8217;s argument is an argument &amp;#8220;you should do this in support of civilization and against barbarism&amp;#8221;, while a liberal makes another argument &amp;#8220;we must support these oppressed people in opposition to these oppressors&amp;#8221; – applied to a specific political conflict the arguments bear no resemblance to each other and are entirely unconvincing to the other&amp;nbsp;group.&lt;/p&gt;
&lt;p&gt;Looking at political views using these underlying value systems has helped me make more sense of the world. Instead of being shocked at the hypocrisy of other people&amp;#8217;s beliefs, it gives me a chance to feel some sense of empathy. It&amp;#8217;s not always a forgiving lens: for instance, looking at modern conservatism as an expressions of a battle between civilization and barbarism makes it all seem even more racist. But at least things make sense, and the wildly different reactions different groups have to the same event or idea makes more&amp;nbsp;sense.&lt;/p&gt;
&lt;p&gt;(I don&amp;#8217;t believe in this libertarian axis. It&amp;#8217;s too close to the outward expression of libertarianism. If it was correct I think it would explain why anarchists and libertarians – outwardly sharing a value system of freedom vs. coercion – express their politics so&amp;nbsp;differently.)&lt;/p&gt;
&lt;p&gt;As helpful as these axes are, I looked at them and didn&amp;#8217;t see myself. I often self-identify as liberal, but I know in my heart I am not. The axis of &lt;em&gt;oppressed vs. oppressor&lt;/em&gt; makes that clearer to me: this is not my primary narrative lens, it&amp;#8217;s not how I construct stories for myself when deciding how I feel about&amp;nbsp;something.&lt;/p&gt;
&lt;p&gt;My first reaction, maybe because my primary narrative is one of hubris, is that &lt;strong&gt;I&lt;/strong&gt; am a &lt;strong&gt;realist&lt;/strong&gt;. I&amp;#8217;m above it all! Everyone else is stuck in their personal narratives, I just try to see things how they&amp;nbsp;are.&lt;/p&gt;
&lt;p&gt;This is nonsense of course. Even my younger self was suspicious of self-proclaimed &amp;#8220;realists&amp;#8221;, but an older me is confident it is self-indulgent bullshit, a way of projecting biases and perspectives onto an imagined truth without bothering to investigate what truth really is. The only realist is someone who knows the limits of their narrow perspective too well to call themselves a&amp;nbsp;realist.&lt;/p&gt;
&lt;p&gt;Still there&amp;#8217;s nothing inherent in these three political groups and three axes. So I offer this additional&amp;nbsp;axis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technocrats&lt;/strong&gt; view political conflict as &lt;strong&gt;progress vs.&amp;nbsp;superstition&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I thought about &amp;#8220;progress vs. regression&amp;#8221;, but that seems too easy. They are logical opposites, sure, but they don&amp;#8217;t express what draws me emotionally to one side and repels me from the other. Other options might be &amp;#8220;progress vs. corruption&amp;#8221; or &amp;#8220;progress vs. romanticism.&amp;#8221; It&amp;#8217;s important to capture &lt;strong&gt;how change feels to people in the group&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not even sure if these are &amp;#8220;value systems&amp;#8221; so much as &lt;strong&gt;descriptions of what winning and losing feels like&lt;/strong&gt;. We imagine politics is (or should be) the making of rational arguments about different policies. Instead I think we tell each other stories about how we might win or lose. I don&amp;#8217;t know the implications, but right now everyone feels like they are losing.&amp;nbsp;Everyone.&lt;/p&gt;
&lt;p&gt;Understanding how I frame winning and losing helps me be more at peace with the disagreements I have with other people, especially the people with whom I am close. I don&amp;#8217;t want to condemn them those people, I don&amp;#8217;t want to declare them as &amp;#8220;wrong&amp;#8221; (even only in my head). Agreeing to disagree by &lt;em&gt;understanding why we disagree&lt;/em&gt; feels&amp;nbsp;right.&lt;/p&gt;
&lt;p&gt;I could continue with this post and argue why my axis is the correct axis. But I truly do not believe that it is. We&amp;#8217;re better off with many value systems: there are many things I don&amp;#8217;t care about, but that someone should care about. It&amp;#8217;s not just balance, it&amp;#8217;s like an ecology of individuals making up a moral society. (And yet, not every ecology is&amp;nbsp;healthy&amp;#8230;)&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Viewing Python execution with source code rewriting</title><link href="https://www.ianbicking.org/blog/2018/11/viewing-python-execution-source-code-rewriting.html" rel="alternate"></link><published>2018-11-20T00:00:00-06:00</published><updated>2018-11-20T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2018-11-20:/blog/2018/11/viewing-python-execution-source-code-rewriting.html</id><summary type="html">&lt;p&gt;A while back I experimented with a &lt;a href="https://github.com/ianb/sheets"&gt;Jupyter Notebook-like&lt;/a&gt; interface. Ultimately I hit some roadblocks and knew that I couldn&amp;#8217;t keep working on it indefinitely, as I had no personal &lt;em&gt;purpose&lt;/em&gt; for the&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;But I do want to share the idea I most liked from the project: tracing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A while back I experimented with a &lt;a href="https://github.com/ianb/sheets"&gt;Jupyter Notebook-like&lt;/a&gt; interface. Ultimately I hit some roadblocks and knew that I couldn&amp;#8217;t keep working on it indefinitely, as I had no personal &lt;em&gt;purpose&lt;/em&gt; for the&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;But I do want to share the idea I most liked from the project: tracing execution with source code&amp;nbsp;rewriting.&lt;/p&gt;
&lt;h1&gt;Print-based&amp;nbsp;debugging&lt;/h1&gt;
&lt;p&gt;My go-to debugging in any environment is printing. You decide what you want to know about, then you sprinkle in some statements and find out. Repeat as necessary. I like printing because it&amp;#8217;s like a way of creating a log of the execution. Maybe there&amp;#8217;s better ways, but like many people this is one of the only techniques that sticks for me. Still, I think there&amp;#8217;s ways of incrementally improving on print-based debugging, and this is one attempt on my&amp;nbsp;part&amp;#8230;&lt;/p&gt;
&lt;h2&gt;Source code&amp;nbsp;rewriting&lt;/h2&gt;
&lt;p&gt;Instead of using &lt;a href="https://docs.python.org/3/library/trace.html"&gt;trace&lt;/a&gt; to follow along with the code, I thought we could inject the debugging into the code&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;I ended up implementing two kinds of source code rewriting. The first simply prints&amp;nbsp;expressions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;my_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;my_object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This normally prints out &lt;code&gt;my_object&lt;/code&gt;, but it only works on the last expression (i.e., you wouldn&amp;#8217;t see the value of &lt;code&gt;my_object.execute()&lt;/code&gt;). This constraint is built into Python in &lt;a href="https://docs.python.org/3/library/functions.html#compile"&gt;compile&lt;/a&gt;, with the output being sent to &lt;a href="https://docs.python.org/3/library/sys.html#sys.displayhook"&gt;sys.displayhook&lt;/a&gt;. You can get around this problem by splitting up the cells carefully, but I find cell management to be an unpleasant part of notebook&amp;nbsp;interfaces.&lt;/p&gt;
&lt;p&gt;I first tried putting an implicit &lt;code&gt;print()&lt;/code&gt; around every top-level expression, so it&amp;nbsp;becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;my_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;display_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;display_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where &lt;code&gt;display_print()&lt;/code&gt; is something simple&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This turned out to be confusing. What print statement went with which expression? I legitimately couldn&amp;#8217;t tell, even with simple examples. So I made another change, rewriting it like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;my_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;display_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my_object.execute()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;display_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my_object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works great! You can track a bunch of expressions, interleave this with other explicit print statements, and the output is readable and&amp;nbsp;useful.&lt;/p&gt;
&lt;h3&gt;Probes&lt;/h3&gt;
&lt;p&gt;But I had a problem: I could watch top-level expressions, but there were lots of interesting expressions that aren&amp;#8217;t top-level. For this I added a new function &lt;code&gt;watch()&lt;/code&gt;. But I still rewrote&amp;nbsp;expressions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;my_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;object_enumerator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is rewritten&amp;nbsp;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;my_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;object_enumerator&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;watch_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;obj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# the 1 is an ID for the expression&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With an implementation of &lt;code&gt;watch_print()&lt;/code&gt; like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;watch_print_counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;watch_print_limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;watch_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;watch_print_counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;watch_print_limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;watch_print_counter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;watch_print_counter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;watch_print_counter&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;watch_print_limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  (omitting further values)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While I initially left out the limit, I quickly realized its importance: it&amp;#8217;s very easy to run a denial of service attack on your own notebook! A more sophisticated implementation could start omitting values while leaving in every 100th or 1000th&amp;nbsp;value.&lt;/p&gt;
&lt;h3&gt;Watching&amp;nbsp;loops&lt;/h3&gt;
&lt;p&gt;I never implemented this, but I&amp;#8217;m pretty sure the next step would be watching all loops, rewriting them as something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;watch_enumerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;obj&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;object_enumerator()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object_enumerator&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This would let you print out useful information, like if the execution is long you can indicate progress and possibly an expected completion time, or you could label inner watch statements or add other&amp;nbsp;information.&lt;/p&gt;
&lt;h1&gt;Implementation&lt;/h1&gt;
&lt;p&gt;To implement this I used the &lt;a href="https://astor.readthedocs.io/en/latest/"&gt;astor&lt;/a&gt; library, which made this all very simple, though it required some&amp;nbsp;experimentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RewriteExprToPrint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;astor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TreeWalk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_Module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cur_node&lt;/span&gt;
        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewrite_expr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rewrite_expr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;expr_string&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;expr_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;astor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;node_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;expr_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;display_print&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
                    &lt;span class="n"&gt;starargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;display_print&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
                &lt;span class="n"&gt;starargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fix_missing_locations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Implementing &lt;code&gt;watch()&lt;/code&gt; is a little more&amp;nbsp;involved:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RewriteWatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;astor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TreeWalk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;astor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TreeWalk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id_counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_Name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cur_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cur_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;watch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_call&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rewrite_expr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cur_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rewrite_expr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expr_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;expr_string&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;expr_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;astor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;node_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;expr_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id_counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;watch_print&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
            &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id_counter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;node_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
            &lt;span class="n"&gt;starargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fix_missing_locations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_node&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category></entry><entry><title>My Lunch With A White Supremacist</title><link href="https://www.ianbicking.org/blog/2018/04/my-lunch-with-a-white-supremacist.html" rel="alternate"></link><published>2018-04-23T00:00:00-05:00</published><updated>2018-04-23T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2018-04-23:/blog/2018/04/my-lunch-with-a-white-supremacist.html</id><summary type="html">&lt;p&gt;About ten years ago I got a call out of the blue from Soren.  I&amp;#8217;d always published my phone number on my website, and it&amp;#8217;s only been used a handful of times.  Hardly anyone wants to actually &lt;em&gt;call&lt;/em&gt; another&amp;nbsp;person.&lt;/p&gt;
&lt;p&gt;Soren had come upon a post of mine …&lt;/p&gt;</summary><content type="html">&lt;p&gt;About ten years ago I got a call out of the blue from Soren.  I&amp;#8217;d always published my phone number on my website, and it&amp;#8217;s only been used a handful of times.  Hardly anyone wants to actually &lt;em&gt;call&lt;/em&gt; another&amp;nbsp;person.&lt;/p&gt;
&lt;p&gt;Soren had come upon a post of mine about Oberon, an educational object-oriented operating system and programming language.  I had used it briefly in school and had a fondness for some of its more novel ideas – but it was obscure and he was excited to find another person in Chicago who was interested in it.  He bent my ear about what he was working on.  It wasn&amp;#8217;t really my thing but he seemed excited and starved for some feedback so I chatted for a&amp;nbsp;while.&lt;/p&gt;
&lt;p&gt;I suggested we meet at a local Linux Users Group, which was really just a couple regulars talking shit at a local diner.  He showed up late, having come on the bus, and hauling his desktop computer, monitor, and keyboard.  He was abrupt with the waitress as he tried to find an outlet he could use and we all relocated to another part of the diner.  There was lots of eye rolling from the other guys, like &lt;em&gt;what a weirdo&lt;/em&gt;, which was a reasonable assessment but an unfair reaction, as we were all weird and awkward.  I was rooting for him, but no one really got what he was trying to&amp;nbsp;show.&lt;/p&gt;
&lt;p&gt;It was an exceptionally cold night and I gave him a ride home.  I drove a junker without heat, but even that is more dignified than taking the bus.  He invited me into his house as there was more he wanted to tell me about what he was doing.  I don&amp;#8217;t know what I expected, but it wasn&amp;#8217;t domestic life – two little blond shirtless children, a hippy aesthetic of mason jars and clutter and strange-smelling foods.  His wife seemed exasperated to have an unexpected visitor, but I sensed Soren was a couple years underwater in terms of marital exasperation.  We sat on the floor of the bedroom and Soren described what he was working on in greater&amp;nbsp;detail.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not particularly interested in graphics, but I thought what he was doing was interesting.  He&amp;#8217;d written a kind of real-time object-oriented raytracer.  As a ray entered an object the object itself took over control of the next phase of raytracing.  It might hold sub-objects, or it might have a it&amp;#8217;s own algorithm to determine what the ray would hit, or its own sense of detail.  He told me about how he&amp;#8217;d corresponded with people in the industry, who thought what he was doing was new and interesting, but nothing really came of it.  I suspected they were nodding and agreeing in the same dismissive way that I myself nodded in&amp;nbsp;agreement.&lt;/p&gt;
&lt;p&gt;I didn&amp;#8217;t see Soren again for some time.  A couple years later we got together for coffee, though he would only drink unsweetened cocoa.  He told me he was on a zero-carb diet, forcing his brain to fuel itself through ketones instead of glucose.  It kept him calm and let him focus, a fairly extreme response to what he implicitly acknowledged was a serious issue for&amp;nbsp;him.&lt;/p&gt;
&lt;p&gt;Soren clearly saw himself as a misunderstood genius.  Misunderstood by his peers.  Deliberately using obscure technologies which he felt both gave him an edge, and which made his work inaccessible.  Holding on to a grand idea which he imagined could be tremendously important, if only someone could see the potential in what he was&amp;nbsp;doing.&lt;/p&gt;
&lt;p&gt;After a while the topic of politics came up. &amp;#8220;Oh, you wouldn&amp;#8217;t like my politics&amp;#8221; he told me. I thought maybe he was some sort of over-the-top libertarian, or had odd religious views, maybe an anarchist, maybe it was weird or he was just shy. So I encouraged him to go ahead, whatever it is would probably be&amp;nbsp;interesting.&lt;/p&gt;
&lt;p&gt;And then, pretty quick, there we were: if everyone has persecuted the Jews forever, then it&amp;#8217;s probably them, not us, don&amp;#8217;t you think? And who are your people? You should put them ahead of everyone else, shouldn&amp;#8217;t you? Your family of course, but after family then race: an obligation to your ancestry. And don&amp;#8217;t we deserve to have a homeland of our own? Everyone else has a homeland, and all we&amp;#8217;re asking for is the same thing. Where does civilization come from? Who is its&amp;nbsp;protector?&lt;/p&gt;
&lt;p&gt;Some of his ideas were strictly tribal. Many were based on a survival-of-the-fittest notion, which felt like an intellectual veneer on tribalism. Some ideas were apocalyptic&amp;#8230; he didn&amp;#8217;t want a race war, but he was pretty sure it was&amp;nbsp;coming.&lt;/p&gt;
&lt;p&gt;I guess I didn&amp;#8217;t take these things to seriously at the time. His beliefs were offensive, to be sure, but in a kind of sad and pathetic way. I debated him at the time – not on the details of his belief, but on the axioms that underlie those beliefs. What&amp;#8217;s the motivation for splitting people up this particular way? Is the world really so zero-sum? Aren&amp;#8217;t our lives larger than race? He had his answers&amp;#8230; and he had a lot of answers, he was clearly excited to talk about these&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;Before we left I sensed a kind of desperate regret in Soren. He wished he hadn&amp;#8217;t brought this up. First it made him talk faster and more wide-ranging, like we could somehow reach consensus on some other topic and put aside his explicit racism. And then&amp;#8230; well, you can&amp;#8217;t unsay things. We said goodbye, not see you&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;As we were leaving I told him about my nephew, who was black, and who I loved very dearly, and who was my family. I hadn&amp;#8217;t mentioned him before, it felt too personal, and perhaps safer or more comfortable to talk abstractly instead of personally; I would not be as reluctant now. Then we both just took a deep breath and walked our different directions. We did not speak&amp;nbsp;again.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Improving the web with small, composable tools</title><link href="https://www.ianbicking.org/blog/2018/02/web-small-composable-tools.html" rel="alternate"></link><published>2018-02-05T00:00:00-06:00</published><updated>2018-02-05T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2018-02-05:/blog/2018/02/web-small-composable-tools.html</id><summary type="html">&lt;p&gt;&lt;a href="https://screenshots.firefox.com/"&gt;Firefox Screenshots&lt;/a&gt; is the first &lt;a href="https://testpilot.firefox.com/"&gt;Test Pilot&lt;/a&gt; experiment to graduate into Firefox, and it’s been surprisingly successful. You won’t see many people talking about it: it does what you expect, and it doesn’t cover new ground. Mozilla should do more of&amp;nbsp;this.&lt;/p&gt;
&lt;h1&gt;Small, Composable&amp;nbsp;Tools&lt;/h1&gt;
&lt;p&gt;One of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://screenshots.firefox.com/"&gt;Firefox Screenshots&lt;/a&gt; is the first &lt;a href="https://testpilot.firefox.com/"&gt;Test Pilot&lt;/a&gt; experiment to graduate into Firefox, and it’s been surprisingly successful. You won’t see many people talking about it: it does what you expect, and it doesn’t cover new ground. Mozilla should do more of&amp;nbsp;this.&lt;/p&gt;
&lt;h1&gt;Small, Composable&amp;nbsp;Tools&lt;/h1&gt;
&lt;p&gt;One of the inspirations for Firefox Screenshots was &lt;a href="https://blog.mozilla.org/ux/2015/02/save-share-revisit/"&gt;user research done in 2015&lt;/a&gt;. This research involved interviews with a few dozen people about how they save, share, and recall information. I myself had a chance to be part of several house visits in Rochester, &lt;span class="caps"&gt;NY&lt;/span&gt;. We looked over people’s shoulders while they showed us how they&amp;nbsp;worked.&lt;/p&gt;
&lt;p&gt;My biggest takeaways from that&amp;nbsp;research:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is a wide variety of how people manage their information, with many combinations of different tools and complex&amp;nbsp;workflows&lt;/li&gt;
&lt;li&gt;Everyone is pretty happy with what they are&amp;nbsp;doing&lt;/li&gt;
&lt;li&gt;People only want small, incremental&amp;nbsp;changes&lt;/li&gt;
&lt;li&gt;Screenshots are pretty&amp;nbsp;popular&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was surprising to see how complicated and sometimes clearly suboptimal people’s workflows were, while also understanding that each person was happy with what they did. They were happy because they weren’t looking for something new. At any moment most people are settled (&lt;a href="https://www.nngroup.com/articles/satisficing/"&gt;satisficed&lt;/a&gt;) on a process, and they have better things to do than constantly reconsider those&amp;nbsp;choices.&lt;/p&gt;
&lt;p&gt;After learning how they worked, we’d sometimes offer up alternatives and get reactions. The alternatives received lots of crickets. If you could add a tool to existing workflows then there might be interest, but there wasn’t interest in replacing tools unless perhaps it was a one-to-one match. People specifically weren’t interested in integrated tools, ones that improved the entire&amp;nbsp;workflow.&lt;/p&gt;
&lt;p&gt;And who among us hasn’t been burned by overenthusiasm for a fully integrated tool? It seems great, then it gets tiring just to keep track, annoying to try to get people to sign up so you can collaborate, some number of things don’t fit into the process, you’ve lost track of your old things, it just feels like&amp;nbsp;work.&lt;/p&gt;
&lt;h1&gt;Old&amp;nbsp;Philosophies&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy#Origin"&gt;Unix philosophy&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write programs that do one thing and do it&amp;nbsp;well.&lt;/li&gt;
&lt;li&gt;Write programs to work&amp;nbsp;together.&lt;/li&gt;
&lt;li&gt;Write programs to handle text streams, because that is a universal&amp;nbsp;interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is still what works well, and still what people want! This is also what the web can provide and apps and silos cannot: open&amp;nbsp;composability.&lt;/p&gt;
&lt;p&gt;This isn’t the same as APIs and integrated tools: &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; are not integrated, you don’t have to setup OAuth integration between &lt;code&gt;tail&lt;/code&gt; and &lt;code&gt;tee&lt;/code&gt;. Things work together because you use them&amp;nbsp;together.&lt;/p&gt;
&lt;p&gt;What would the Unix toolset look like on the web? Please speculate! &lt;a href="https://docs.google.com/document/d/1NSO_Nl426o5Wuv896qk7vLudbf-z9FQSZf8fDBWPlwk/edit?usp=sharing"&gt;I&amp;#8217;ve started structuring some of my own ideas into a set of notes&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Stop Being So&amp;nbsp;Clever&lt;/h1&gt;
&lt;p&gt;At the time of the user research myself and &lt;a href="http://donovanpreston.com/"&gt;Donovan&lt;/a&gt; had been working on an experiment in page capture – you could think of it like a personal archive.org. We added screenshotting as an entree into what felt like a more advanced&amp;nbsp;tool.&lt;/p&gt;
&lt;p&gt;In the end nothing is left of that original concept, and we just have plain screenshots. It hurt to see that all go. Screenshots are not exciting, and they are not innovative, and there is nothing very new about them. And clearly I needed to get over&amp;nbsp;myself.&lt;/p&gt;
&lt;p&gt;And so this is a lesson in humility: things don’t have to be new or novel or exciting to be useful. Screenshots is so un-new, so un-novel, so un-exciting that we aren’t even following along with the competition. Mozilla should spend more time here: behind the curve where the big players stopped caring and the little players have a hard time getting any attention. Behind the curve is where the web was a lot more like how Mozilla wants it to&amp;nbsp;be.&lt;/p&gt;
&lt;p&gt;There are lots of useful things back here, things that technophiles have appreciated but the wider population doesn’t know how to use. A pastebin. Site archival. Deep linking. Inline linking at all! Scraping. Clipboard management. Etherpad is still the best lightweight collaborative editor. Little stuff, things that don’t try to take over, things that don’t try to leverage the user for corporate benefit. This stuff is not very hard to make, and is affordable to run. Combine that with a commitment to keep the services competently maintained and openly interoperable, and there’s a lot of value to provide. And that’s what Mozilla is in it for: to be of&amp;nbsp;service.&lt;/p&gt;
&lt;h1&gt;Being Part Of The&amp;nbsp;Web&lt;/h1&gt;
&lt;p&gt;Screenshots was not easy to make. It was not &lt;em&gt;technically&lt;/em&gt; difficult, but it was not&amp;nbsp;easy.&lt;/p&gt;
&lt;p&gt;Mozilla has long been reluctant to host user content. Firefox Sync is pointedly encrypted on the client. Before Screenshots the only unencrypted user content the corporation handled was the add-ons and themes on&amp;nbsp;addons.mozilla.org.&lt;/p&gt;
&lt;p&gt;Screenshots did not have to have a server component, and it did not have to allow people to upload or share shots within the tool. I take some pride in the fact that, despite all our cultural and legal attitudes at Mozilla, screenshots.firefox.com is a thing. It required a great deal of stubbornness on my part, and at times a pointed blindness to&amp;nbsp;feedback.&lt;/p&gt;
&lt;p&gt;In a small way Screenshots makes Mozilla part of the web, not just a window onto the web. This is a direction I think we should take: &lt;code&gt;*.firefox.com&lt;/code&gt; links of all kinds should become normal, and you should know that on the other side of the link will be respectful content, it won’t be an avenue for manipulation, and you won’t be a product. Be the change you want to see,&amp;nbsp;right?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks to Wil Clouser and Jared Hirsch for feedback on this&amp;nbsp;post.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="misc"></category></entry><entry><title>To All The Mothers</title><link href="https://www.ianbicking.org/blog/2016/05/to-all-the-mothers.html" rel="alternate"></link><published>2016-05-08T00:00:00-05:00</published><updated>2016-05-08T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2016-05-08:/blog/2016/05/to-all-the-mothers.html</id><summary type="html">&lt;p&gt;When we were expecting our first, when we couldn&amp;#8217;t actually &lt;em&gt;do&lt;/em&gt; anything but wait while Emily&amp;#8217;s body did all the parenting that could be done, when we spent a lot of time on idle research, I looked up mammary glands on&amp;nbsp;Wikipedia.  &lt;/p&gt;
&lt;p&gt;The theory is that they began …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When we were expecting our first, when we couldn&amp;#8217;t actually &lt;em&gt;do&lt;/em&gt; anything but wait while Emily&amp;#8217;s body did all the parenting that could be done, when we spent a lot of time on idle research, I looked up mammary glands on&amp;nbsp;Wikipedia.  &lt;/p&gt;
&lt;p&gt;The theory is that they began as glands to secrete lubricants onto an egg, maintaining a porous and healthy membrane.  I find a drawing of an early mammal.  I imagine her: small, flat, badger-like in shape.  A nest of eggs hidden as best she can.  I imagine it lined with soft pine needles.  She&amp;#8217;s anxious, nudges the clutch of eggs, tests them, hovers over them attending to their moisture and warmth.  She is neither happy nor sad, she does not ask herself these questions.  She cares dearly for these eggs.  This is the origin of caring; for if ever &amp;#8220;caring&amp;#8221; will mean something, it will mean something because it is like this&amp;nbsp;caring.&lt;/p&gt;
&lt;p&gt;This is not just a creature, an interesting factoid: she is my ancestor.  There is a chain of motherhood that leads from her to me.  That she is forgotten does not make her less&amp;nbsp;real.&lt;/p&gt;
&lt;p&gt;Does she love these eggs, little embryos swimming in a ball?  Does she love the little ones that hatch?  She keeps them warm, she licks them clean, she gives the affection that must trigger some unconscious reminder of the affection she herself received.  If she is not called upon to sacrifice her life for her children, there will be mothers among her own ancestors and descendants who&amp;nbsp;will.&lt;/p&gt;
&lt;p&gt;All of this is not inevitable.  Many creatures do not mother and are not mothered.  And yet she doesn&amp;#8217;t choose to mother.  She does not care for her children because they are beautiful or noble or worthy.  She cares for them because they are weak.  She cares for them by instinct.  Now we look down on instinct, but she mothers because it is inseparable from her existence, her instinct is not that which is unwillingly attached to her, it is not a burden, it just&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;Many generations later her offspring will find a way to express &amp;#8220;love&amp;#8221;.  What might that expression have looked like?  A calming murmur of contentment, purposeless except to tell the one you are with it is well that you are there together?  Later it will become a word, a sound that will echo in our minds, until the sounds become self-aware in our self-reflection; the mind.  But love is older than&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll ask ourselves what &amp;#8220;love&amp;#8221; is, but the question is not the answer.  Life is older than love, and yet love itself proceeds the word by eons.  We&amp;#8217;ll ask what love is because we&amp;#8217;ll compare our ideas against the thing we already know, that which is already in&amp;nbsp;us.&lt;/p&gt;
&lt;p&gt;The eggs hatch.  The mother lies in her nest, her tiny children piled up – among them one will be the next generation that leads to me, a lineage whose conclusion we still do not know.  They squirm to press themselves against her warmth.  She&amp;#8217;s still anxious: what might appear in the dark?  Does she hear the squeak of a little one that has fallen out of the nest and is still too small to get itself back in?  But she&amp;#8217;s happy, even if she can&amp;#8217;t tell herself that she is happy.  She does not ask&amp;nbsp;why.&lt;/p&gt;
&lt;p&gt;Her eyes drift close.  Something else takes over as she drifts into sleep, but that something else still watches, still feels the bundles of warmth.  And the little ones also sleep, and that something that takes us over in sleep – it is not purpose, it is not will – that thing remembers.  It saves that moment.  And that is also the chain that brings us to where we are.  More than genes, we are an ancient and unbroken chain of these experiences.  We know this because we can see the chain broken by neglect or abuse, and though it&amp;#8217;s repairable, without repair life will not&amp;nbsp;continue.&lt;/p&gt;
&lt;p&gt;So to all the mothers who have brought us here – who have brought me here – I can only offer recognition.  To my mother Gay, who raised me, first taught me love.  To my wife Emily, mother to my own children.  To her mother Diane, upon whom rests another mysterious tree.  To my grandmother Jeanetta, now departed, who acted with such will in her life.  To my grandmother Joyce, now departed, who struggled with so many demons, and yet I believe began the mending.  To my great grandmother, who lived a life of such extreme stoicism; so stoic I don&amp;#8217;t know if she realized her own nature.  And to so, so, so many mothers I do not know.  It was never once easy.  Thank you&amp;nbsp;all.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Don’t Invest More Emotion Than You Are Willing To Sacrifice</title><link href="https://www.ianbicking.org/blog/2015/09/dont-invest-more-emotion.html" rel="alternate"></link><published>2015-09-30T00:00:00-05:00</published><updated>2015-09-30T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2015-09-30:/blog/2015/09/dont-invest-more-emotion.html</id><summary type="html">&lt;p&gt;At some point in a &lt;a href="http://www.earwolf.com/show/startup-school/"&gt;podcast series&lt;/a&gt; by Seth Godin he advises that you never give your house for collateral on a loan for your business.  Of course you don&amp;#8217;t want to lose your house, but that wasn&amp;#8217;t his reason.  If you put your house on the line …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At some point in a &lt;a href="http://www.earwolf.com/show/startup-school/"&gt;podcast series&lt;/a&gt; by Seth Godin he advises that you never give your house for collateral on a loan for your business.  Of course you don&amp;#8217;t want to lose your house, but that wasn&amp;#8217;t his reason.  If you put your house on the line – and put your family on the line – then you are putting up something you aren&amp;#8217;t willing to lose.  And so you have an upper bound on your risk: you no longer will be willing to make the decisions that could bankrupt your&amp;nbsp;business.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been thinking about emotional labor lately.  In management it&amp;#8217;s one of the more challenging things for me: because there&amp;#8217;s a lot more emotional labor to be done in management, but also because I feel I can fuck it up much worse.  I also see all the missed opportunities to put in emotional labor, and I wonder about what I can or should ask of my reports in addition to what I ask of myself.  Emotional labor is checking in with how people &lt;em&gt;feel&lt;/em&gt; (explicitly or implicitly).  It&amp;#8217;s not letting conflict slide.  It&amp;#8217;s making sure to explicitly appreciate your coworkers.  It&amp;#8217;s giving bad news fast.  And negative feedback.  It&amp;#8217;s hard work, an uncomfortable&amp;nbsp;hard.&lt;/p&gt;
&lt;p&gt;Emotional investment is something different.  It&amp;#8217;s what you expect of yourself.  It&amp;#8217;s &lt;em&gt;caring&lt;/em&gt;.  I find the emotional labor hard; it is because of my emotional investment that I want to do it&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve started to question the value of emotional investments.  There&amp;#8217;s passion, yes.  And some degree of having skin in the game – not just wanting to perform sufficiently, or be well regarded, but a direct interest in the success of the project.  But you can make the wrong kinds of investments, invest something that&amp;#8217;s too hard to lose.  Your self-worth, your identity&amp;#8230; these are investments you shouldn&amp;#8217;t ask yourself to make, and I&amp;#8217;d say &lt;em&gt;no thank you&lt;/em&gt; when I see someone else offering that kind of investment if I could.  It&amp;#8217;s the kind of investment that will lead to bad decisions: sticking with safe choices, avoiding bad feedback, being afraid to ship, being afraid to do the work you think is important but you aren&amp;#8217;t sure you can achieve successfully.  Or it may embolden you to drive off an emotional cliff, to burn&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;Sadness, frustration, even anger are okay emotions to have about our work.  It&amp;#8217;s okay for work to make us feel, so long as we can bounce back from those feelings.  One kind of emotional labor is to own and respond to your&amp;nbsp;feelings.&lt;/p&gt;
&lt;p&gt;With a growing skepticism of emotional investment I find myself valuing professionalism a bit more: professionalism as &lt;em&gt;action and impact through discipline&lt;/em&gt;.  But I also think discipline can used as a substitute for engagement.  I&amp;#8217;m still wary of professionalism&amp;#8230; wary of finding a substitute for passion, skeptical those substitutes are genuine, unsure if &amp;#8220;performance&amp;#8221; is a good criteria.  But I&amp;#8217;m feeling more open.  (And of course I much rather Accounting be staffed professionally than with passion, so it must depend on desired&amp;nbsp;outcomes.)&lt;/p&gt;
&lt;p&gt;At this moment I am trying to disinvest.  For my own health, but I also hope to improve my effectiveness.  It&amp;#8217;s uncomfortable, feels cold, like I have to withdraw in order to set new terms of engagement.  But what do I have to lose?  Maybe a little&amp;nbsp;less.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Encouraging Positive Engagement</title><link href="https://www.ianbicking.org/blog/2015/01/encouraging-positive-engagement.html" rel="alternate"></link><published>2015-01-29T00:00:00-06:00</published><updated>2015-01-29T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2015-01-29:/blog/2015/01/encouraging-positive-engagement.html</id><summary type="html">&lt;p&gt;In my &lt;a href="http://www.ianbicking.org/blog/2015/01/being-a-manager-is-lonely.html"&gt;last post on management&lt;/a&gt; I talked about a &lt;a href="http://www.manager-tools.com/2014/09/welcome-they-professional-subordination-chapter-2"&gt;Manager Tools series&lt;/a&gt;, and summarized it&amp;nbsp;as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The message in these podcasts is: it is your responsibility as a manager to support the company’s decisions. Not just to execute on them, but to support them, to communicate that support …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;In my &lt;a href="http://www.ianbicking.org/blog/2015/01/being-a-manager-is-lonely.html"&gt;last post on management&lt;/a&gt; I talked about a &lt;a href="http://www.manager-tools.com/2014/09/welcome-they-professional-subordination-chapter-2"&gt;Manager Tools series&lt;/a&gt;, and summarized it&amp;nbsp;as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The message in these podcasts is: it is your responsibility as a manager to support the company’s decisions. Not just to execute on them, but to support them, to communicate that support, and if you disagree then you must hide that disagreement in the service of the company. You can disagree up — though even that is fraught with danger — but you can’t disagree down. You must hold yourself apart from your team, putting a wall between you and your team. To your team you are the company, not a&amp;nbsp;peer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;m not endorsing that approach, but I&amp;#8217;m also not sure they are wrong. In the comments on the post and &lt;a href="https://news.ycombinator.com/item?id=8881334"&gt;on Hacker News&lt;/a&gt; that idea got a lot of pushback, including from people who followed up and listened to the original podcasts.  Listening to those podcasts made me feel very uncomfortable, and I wrote that post immediately after listening to the&amp;nbsp;podcasts.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ianbicking.org/blog/2015/01/being-a-manager-is-lonely.html#comment-1793049907"&gt;I shared a particular instance where I felt I had to apply this principle&lt;/a&gt;. But thinking about this more, and talking about it with my reports, I have a better feeling for how I want to approach this&amp;nbsp;question.&lt;/p&gt;
&lt;p&gt;I think the &amp;#8220;always be honest&amp;#8221; approach that was widely advocated is terribly simplistic.  Honesty doesn&amp;#8217;t mean saying &amp;#8220;hi, how are you doing? That shirt is incredibly ugly.&amp;#8221;  You might have thoughts, but it isn&amp;#8217;t dishonest to hold your tongue.  Each of us already consider what we say and how we say it.  As a manager, and in a position of leadership, your words have greater impact.  It is wise to put in a bit more consideration, especially around certain&amp;nbsp;topics.&lt;/p&gt;
&lt;p&gt;That said, I don&amp;#8217;t think I need to agree with every choice that the company makes.  I don&amp;#8217;t have to offer up disagreement, but I do get asked, and should answer honestly.  It &lt;em&gt;is&lt;/em&gt; my responsibility to help my reports engage positively with the larger institution.  That&amp;#8217;s a constant: even if everything is totally fucked up, it&amp;#8217;s still the right thing to engage positively with circumstances.  Otherwise you should leave. But that&amp;#8217;s ultimatum-talk, most of the impact is in the margins: engaging &lt;em&gt;more&lt;/em&gt; positively in all your&amp;nbsp;actions.&lt;/p&gt;
&lt;p&gt;In my position I can sabotage this engagement.  What I might see as simple &amp;#8220;disagreement&amp;#8221; has the potential to undermine whatever good may come out of a decision, and so I have to be careful.  For instance, it&amp;#8217;s easy in disagreement to telegraph (even unintentionally) a belief that a policy should be ignored, or that feet-dragging is politically advantageous for the team, or that the team should &lt;a href="https://en.wikipedia.org/wiki/Sandbagging"&gt;sandbag&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So what if something happens that I &lt;em&gt;really&lt;/em&gt; disagree with?  Until I&amp;#8217;ve thought it through I should probably keep my mouth shut.  This requires a degree of humility (first, heal thyself).  I have to figure out how &lt;em&gt;I&lt;/em&gt; can engage positively with these new circumstances.  This might be a lonely exercise, sandwiched above by a decision I disagree with and below by reports I must withhold myself from.  But I have to work through this – people treat opinions as though they are immutable, as though it is dishonest or even duplicitous if you do not stick with your first reaction.  There is an arrogance in this (of course in management you &lt;em&gt;also&lt;/em&gt; have to cultivate sufficient arrogance to tell people what to do).  And so it is a real challenge to find the humility to &lt;em&gt;genuinely&lt;/em&gt; change your mind about something, or change your perspective.  But I don&amp;#8217;t think a manager has to completely align themselves with company decisions, they don&amp;#8217;t have to paste a smile on and say &amp;#8220;everything is great!&amp;#8221;  The manager has to do good work in a new situation, and that means helping your reports do good work. Pasted on smiles are&amp;nbsp;superfluous.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Being A Manager Is Lonely</title><link href="https://www.ianbicking.org/blog/2015/01/being-a-manager-is-lonely.html" rel="alternate"></link><published>2015-01-13T00:00:00-06:00</published><updated>2015-01-13T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2015-01-13:/blog/2015/01/being-a-manager-is-lonely.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.ianbicking.org/blog/2014/09/professional-transitions.html"&gt;Management is new for me&lt;/a&gt;. I have spent a lot of time focusing on the craft of programming, now I focus on the people who focus on the craft of&amp;nbsp;programming.&lt;/p&gt;
&lt;p&gt;During the fifteen years I&amp;#8217;ve been participating in something I&amp;#8217;ll call a developer community, I&amp;#8217;ve seen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.ianbicking.org/blog/2014/09/professional-transitions.html"&gt;Management is new for me&lt;/a&gt;. I have spent a lot of time focusing on the craft of programming, now I focus on the people who focus on the craft of&amp;nbsp;programming.&lt;/p&gt;
&lt;p&gt;During the fifteen years I&amp;#8217;ve been participating in something I&amp;#8217;ll call a developer community, I&amp;#8217;ve seen a lot of progress.  Sometimes we &lt;a href="http://vimeo.com/71278954"&gt;wax nostalgic&lt;/a&gt; with an assertion that no progress has been made&amp;#8230; but progress has been made.  We, as professionals, hobbyists, as passionate practitioners understand much more about how to test, design, package, distribute, collaborate around code.  And just about how to &lt;em&gt;talk&lt;/em&gt; about it&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;I am a firm believer that much of that progress is due to the internet.  There were technological advancements, sure.  And there have been books teaching practice.  But that&amp;#8217;s not enough. There were incredible ideas about programming in the 70s!  But there wasn&amp;#8217;t the infrastructure to help developers &lt;em&gt;assimilate&lt;/em&gt; those&amp;nbsp;ideas.&lt;/p&gt;
&lt;p&gt;I put more weight on people learning than on people being taught.  If the internet was just a good medium for information dispersal &amp;#8212; a better kind of book &amp;#8212; then that is nice, but not transformational. The internet is more than that: it&amp;#8217;s a place to discuss, and disagree, and watch others discussing.  You can be provocative, and then step back and take on a more conservative opinion – a transformation most people would be too shy to commit to print.  (As if substantial portion of people have ever had the option to consider what they want to commit to&amp;nbsp;print!)&lt;/p&gt;
&lt;p&gt;I think a debate is an opportunity; seldom an opportunity to convince anyone else of what you think, but a chance to understand why you think what you do, to come to a more mature understanding, and maybe create a framework for future changes of opinion.  This is why I bristle at the phrase &amp;#8220;just choose the right tool for the job&amp;#8221; – this phrase is an attempt to shut down the discussion about what the right tool for the job &lt;em&gt;is&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;This is a long digression, but I am nostalgic for how I grew into my profession.  Nostalgic because now &lt;strong&gt;I cannot have this&lt;/strong&gt;.  I cannot discuss my job.  I cannot debate the details.  I cannot tell anecdotes to elucidate a point.  I cannot discuss the policies I am asked to implement – the institutional instructions applied to me and through me.  I can only attempt to process my experiences in&amp;nbsp;isolation.&lt;/p&gt;
&lt;p&gt;And there are good reasons for this!  While this makes me sad, and though I still question if there is not another way, there are very good reasons why I cannot talk about my work.  I am in a leadership position, even if only a modest and subordinate leader.  There is a great deal of potential for collateral damage in what I say, &lt;em&gt;especially&lt;/em&gt; if I talk about the things I am thinking most about.  I think most about the tensions in my company, interpreting the motivations of the leadership in the company, I think about the fears I sense in my reports, the unspoken tensions about what is done, expected, aspired to.  I can discuss this with the individuals involved, but they are the furthest thing from a disinterested party, and often not in a place to develop collaborative&amp;nbsp;wisdom.&lt;/p&gt;
&lt;p&gt;This is perhaps unfair.  I work with very thoughtful people.  Our work is grounded in a shared mission, which is a powerful thing.  But it&amp;#8217;s not&amp;nbsp;enough.&lt;/p&gt;
&lt;p&gt;Are we, as a community of managers (is there such a thing?) becoming better?  Yes, some.  There are management consultants and books and other material about management, and there is value in that. But it is not a discussion, it is not easy to assimilate.  I don&amp;#8217;t get to interact with a community of&amp;nbsp;peers.&lt;/p&gt;
&lt;p&gt;On the topic of learning to manage, I have listened to many episodes of &lt;a href="http://www.manager-tools.com/"&gt;Manager Tools&lt;/a&gt; now.  I&amp;#8217;ve learned a lot, and it&amp;#8217;s helped me, even if they are more authoritarian than makes me comfortable.  I&amp;#8217;m writing this now after listening to a two part series: &lt;a href="http://www.manager-tools.com/2014/09/welcome-they-professional-subordination-chapter-2"&gt;Welcome To They: Professional Subordination&lt;/a&gt; and &lt;a href="http://www.manager-tools.com/2014/09/welcome-they-professional-subordination-chapter-2-part-2"&gt;Part 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The message in these podcasts is: it is your responsibility as a manager to support the company&amp;#8217;s decisions.  Not just to execute on them, but to support them, to communicate that support, and if you disagree then you must hide that disagreement in the service of the company.  You can disagree up &amp;#8212; though even that is fraught with danger &amp;#8212; but you can&amp;#8217;t disagree down.  You must hold yourself apart from your team, putting a wall between you and your team.  To your team you are the company, not a&amp;nbsp;peer.&lt;/p&gt;
&lt;p&gt;There is a logical consistency to the argument.  There is wisdom in it.  The impact of complaints filtering up is much different than the impact of complaints filtering down.  In some sense as a manager you must manufacture your own consensus for decisions that you cannot affect.  You are probably doing your reports a favor by positively communicating decisions, as they will be doing themselves a favor by positively engaging with those decisions.  But their advice is clear: if you are asked your opinion, you must agree with the decision, maybe stoically, but you must &lt;em&gt;agree&lt;/em&gt;, not just concede.  You must speak for the company, not for&amp;nbsp;yourself.&lt;/p&gt;
&lt;p&gt;Fuck.  Why would I want to sign up for this?  The dictate they are giving me is literally making me sad.  If it didn&amp;#8217;t make any sense then I might feel annoyed.  If I thought it represented values I did not share then I might feel angry.  But I &lt;em&gt;get it&lt;/em&gt;, and so it makes me&amp;nbsp;sad.&lt;/p&gt;
&lt;p&gt;Still, I believe in progress.  I believe we can do better than we have in the past.  I believe in unexplored paths, in options we aren&amp;#8217;t ready to compare to present convention, in new ways of thinking about problems that break out of current categories.  All this in management too – which is to say, new ways to form and coordinate organizations. I think those ideas are out there.  But damn, I don&amp;#8217;t know what they are, and I don&amp;#8217;t know how to find out, because I don&amp;#8217;t know how to talk about what we do and that&amp;#8217;s the only place where I know how to&amp;nbsp;start.&lt;/p&gt;
&lt;p&gt;[I wrote a followup in &lt;a href="http://www.ianbicking.org/blog/2015/01/encouraging-positive-engagement.html"&gt;&lt;em&gt;Encouraging Positive Engagement&lt;/em&gt;&lt;/a&gt;]&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Middleage</title><link href="https://www.ianbicking.org/blog/2014/12/middleage.html" rel="alternate"></link><published>2014-12-30T00:00:00-06:00</published><updated>2014-12-30T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2014-12-30:/blog/2014/12/middleage.html</id><summary type="html">&lt;p&gt;This year I&amp;#8217;m starting to understand what it is to be middle aged.  I think I became middle aged in 2011, but this year maybe I know what that&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;When I was young I viewed middle age through the lens of a young person.  I would think: &lt;em&gt;to …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This year I&amp;#8217;m starting to understand what it is to be middle aged.  I think I became middle aged in 2011, but this year maybe I know what that&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;When I was young I viewed middle age through the lens of a young person.  I would think: &lt;em&gt;to be middle aged is all the things I&amp;#8217;m not right now&lt;/em&gt;.  To never be young again.  To have many fewer Firsts ahead of me.  And yes, I envy the idle freedom of my youth.  To wander&amp;nbsp;aimlessly.&lt;/p&gt;
&lt;p&gt;But now, here, I am learning what middle age &lt;em&gt;is&lt;/em&gt;, not just what it is&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;Death.  I am losing friends, family.  I am losing people who to me were permanent.  Not rationally permanent, but still permanent. But this death is only the tip of the iceberg.  To grow old&amp;#8230; here, I can now catch glimpses of what it means.  Either this death is just the tip of the iceberg, or &lt;em&gt;I&lt;/em&gt; will be the tip of someone else&amp;#8217;s iceberg. Both are&amp;nbsp;possible.&lt;/p&gt;
&lt;p&gt;Death and responsibility.  I&amp;#8217;m now the father of two.  Many young people are the father of as many or more children than I.  They are all middle aged, but many are too young to know it.  I&amp;#8217;m am more than old enough to know it, these are responsibilities that can never be shed.  Having children has only revealed to me my real responsibilities&amp;#8230; to family, to friends, to my community, even my responsibility to the missing communities, the missing friendships, the missed&amp;nbsp;relations.&lt;/p&gt;
&lt;p&gt;Death and responsibility and humility.  I will never meet my responsibilities; I and everyone I know will die; after that nothing can be fixed.  This is the foundation of my humility.  It&amp;#8217;s not my fault.  To be humble is not to be ashamed or guilty.  It&amp;#8217;s to know I am only so tall, so strong, so brave: no matter how much I may accomplish all I do is finite and any quality I have is so much smaller than the&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;But I&amp;#8217;m alive.  If I&amp;#8217;m halfway through, I&amp;#8217;m still but half of what I&amp;#8217;ll be.  I am all of what I know. There is still a great mystery waiting&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;And children&amp;#8230; the responsibility is only as heavy as their import. In them I am part of a legacy that goes back before humanity, a legacy that defines meaning itself.  Of course it is heavy.  It isn&amp;#8217;t easy, this responsibility is not intended to make me happy, in it I learn that happiness is itself&amp;nbsp;small.&lt;/p&gt;
&lt;p&gt;And so I am humble.  I bow before a world that owes me nothing.  And of all that I ask of the world, little will be delivered.  That little will be my everything.  Here I stand before half of my everything and it is more than I&amp;#8217;ll ever know and ever could know.  I was never so young that I could know it, even my ignorance is too vast for me to know.  I don&amp;#8217;t even know where I stand, but maybe I know I am standing.  This is my middle&amp;nbsp;age.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;center&gt;
&lt;img src="/static/media/grammy-medium.jpg" title="Jeanetta Bicking"&gt;&lt;/p&gt;
&lt;p&gt;In loving memory of my grandmother, Jeanetta Bicking, 1925-2014
&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Professional Transitions (or: the shutting down of Mozilla Labs)</title><link href="https://www.ianbicking.org/blog/2014/09/professional-transitions.html" rel="alternate"></link><published>2014-09-15T00:00:00-05:00</published><updated>2014-09-15T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2014-09-15:/blog/2014/09/professional-transitions.html</id><summary type="html">&lt;p&gt;Since my &lt;a href="http://www.ianbicking.org/blog/2014/02/saying-goodbye-to-python.html"&gt;last post about leaving Python&lt;/a&gt;, my career has shifted&amp;nbsp;further.&lt;/p&gt;
&lt;p&gt;Earlier this year Mozilla shut down its Labs group.  It&amp;#8217;s a little &lt;a href="https://mozillalabs.com/"&gt;hard to tell&lt;/a&gt; – I guess we didn&amp;#8217;t actually shutter anything, and though it was announced internally it is entirely unclear externally. But Mozilla Labs …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since my &lt;a href="http://www.ianbicking.org/blog/2014/02/saying-goodbye-to-python.html"&gt;last post about leaving Python&lt;/a&gt;, my career has shifted&amp;nbsp;further.&lt;/p&gt;
&lt;p&gt;Earlier this year Mozilla shut down its Labs group.  It&amp;#8217;s a little &lt;a href="https://mozillalabs.com/"&gt;hard to tell&lt;/a&gt; – I guess we didn&amp;#8217;t actually shutter anything, and though it was announced internally it is entirely unclear externally. But Mozilla Labs is definitely shut down. Most of those who were still part of Labs at the end moved to the &lt;a href="https://www.mozilla.org/en-US/foundation/"&gt;Mozilla Foundation&lt;/a&gt; (the non-profit foundation that owns Mozilla Corporation – taxes are complicated).  &lt;a href="https://twitter.com/adruck"&gt;Aaron&lt;/a&gt;, my partner in building TogetherJS and Hotdish, was left in a reorganization limbo, and in the process we lost him to Google.  With the closing of Labs I was also left in a limbo, but with a baby on the way (Willa Blue Murphy Bicking, born April 23rd 2014) I wasn&amp;#8217;t looking forward to any big&amp;nbsp;changes.&lt;/p&gt;
&lt;h3&gt;On The Closing Of Mozilla&amp;nbsp;Labs&lt;/h3&gt;
&lt;p&gt;As inopportune as the timing of this was, I understand the reason for closing Mozilla Labs.  I don&amp;#8217;t believe Labs was effective.  And I was not effective in&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Note that Mozilla Labs is distinct from Mozilla Research – Research is the home of projects like &lt;a href="http://www.rust-lang.org/"&gt;Rust&lt;/a&gt; and &lt;a href="http://asmjs.org/"&gt;&lt;span class="caps"&gt;ASM&lt;/span&gt;.js&lt;/a&gt;.  Mozilla Research is still going strong. To make a broad distinction between the two groups: Research has worked on foundational technologies for the web, especially related to programming languages, while Labs was product-focused.  Also Research has been led by Brendan Eich and now David Herman, with what appears to be a fairly clear vision and succession.  Labs was led by a number of people with different interests and different visions – some people with an eye to external validation, some looking to spur disruptive (also uncomfortable) changes in Mozilla, some hoping to enable and include external&amp;nbsp;contribution.&lt;/p&gt;
&lt;p&gt;When I first started writing this I felt that a leadership misdirection was at the root of Labs&amp;#8217; missteps.  But leadership fetish feels a lot like a &lt;a href="http://en.wikipedia.org/wiki/Great_Man_theory"&gt;Great Man theory&lt;/a&gt;, an expectation that we are doomed or blessed only by the wisdom and fortitude of our leaders.  These shifting priorities from our leadership may have been disruptive to the degree our cultural priorities and understandings (that is, the understanding held collectively by the group) did not themselves provide an even enough&amp;nbsp;keel.&lt;/p&gt;
&lt;p&gt;That said, management is a group&amp;#8217;s conduit to the larger organization. Individuals can reach out, but it&amp;#8217;s harder, and the information they acquire doesn&amp;#8217;t necessarily percolate well through the group. Advocacy by individual contributors is also often misdirected, chasing after support where there is no real potential.  For any identified problem you can picture an imaginary perfect leader who will fix it, but imagining heroes isn&amp;#8217;t the same thing as planning for a strong&amp;nbsp;organization.&lt;/p&gt;
&lt;p&gt;Launching a project from Labs did not seem particularly successful. &lt;a href="https://www.mozilla.org/en-US/firefox/sync/"&gt;Firefox Sync&lt;/a&gt; came out early, as did Jetpack (now the &lt;a href="https://developer.mozilla.org/en-US/Add-ons/SDK"&gt;Addon-&lt;span class="caps"&gt;SDK&lt;/span&gt;&lt;/a&gt;). &lt;a href="https://developer.mozilla.org/en-US/Apps"&gt;Open Web Apps&lt;/a&gt; ultimately subsumed Labs. &lt;a href="https://support.mozilla.org/en-US/kb/tab-groups-organize-tabs"&gt;Tab Candy/Panorama/Tab Groups&lt;/a&gt; got into Firefox but that was the end of it. &lt;a href="https://login.persona.org/about"&gt;Persona&lt;/a&gt; became an independent group and team, but &lt;a href="http://identity.mozilla.com/post/78873831485/transitioning-persona-to-community-ownership"&gt;didn&amp;#8217;t really succeed&lt;/a&gt;. &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Social_API"&gt;Social &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; is not gone, but it also hasn&amp;#8217;t found a real home in Mozilla.  Many things people worked on in Labs now exist, but not because of Labs – often a project only took off when someone else in Mozilla committed to it.  Other projects still suffer from how they were birthed in&amp;nbsp;Labs.&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Labs&amp;#8221; groups are often criticized for being too separate from the companies they belong to.  In Mozilla this was a problem because we had a hard time getting things done – for instance, if the success of a project depended on changes to Firefox, then it was hard to get those prioritized.  By working separately we also would often use patterns that weren&amp;#8217;t liked by other people.  People in Labs would often come from the perspective of web developers, where much of Mozilla is focused on user agents, and this is a much bigger divide than I initially appreciated.  But the technical problems were perhaps a symptom: integration with the rest of Mozilla was viewed as a &lt;em&gt;problem&lt;/em&gt;, a late-stage effort, not part of the exploration and experiment&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;Another criticism of &amp;#8220;Labs&amp;#8221; is that innovation comes from everywhere, and having some kind of Innovation Group is exclusionary and misses the opportunity that the larger company and community represents.  At times Labs tried to be inclusionary – collecting ideas from the community, trying to guide some more inclusive design processes, played around with internal sabbaticals.  I fear these mostly led people on, it did not lead to creative engagement with the&amp;nbsp;community.&lt;/p&gt;
&lt;p&gt;Still I&amp;#8217;m not entirely pessimistic about the idea of a Labs-like group. Maybe I&amp;#8217;d want to call it a &lt;em&gt;new product incubation&lt;/em&gt; group (using a wide definition of &amp;#8220;product&amp;#8221;).  Having a separate group does present challenges.  But established groups tend not to be conservative about their scope, there&amp;#8217;s always more core priorities to be addressed.  Establishing a separate group creates an investment that won&amp;#8217;t be redirected.  But as I write this down this seems like an inferior way to keep investment balanced, it would be better to protect innovation within existing product groups.  I see some groups accomplish that protection and I see many groups that do not, but I don&amp;#8217;t yet know what creates that&amp;nbsp;difference.&lt;/p&gt;
&lt;h3&gt;TogetherJS and&amp;nbsp;Hotdish&lt;/h3&gt;
&lt;p&gt;While unexpectedly abrupt, it was not a surprise to us that Labs shut down.  We certainly had every expectation that &lt;a href="https://togetherjs.com/"&gt;TogetherJS&lt;/a&gt; as a project would be shut down. It may have only gotten by as long as it did because no one was clear who had responsibility for shutting it&amp;nbsp;down.&lt;/p&gt;
&lt;p&gt;And again, we didn&amp;#8217;t disagree with the motivations that would have it shut down.  TogetherJS didn&amp;#8217;t have a strategic tie-in to Mozilla.  It neither built on Mozilla&amp;#8217;s strengths nor did it strengthen&amp;nbsp;Mozilla.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s this &amp;#8220;failure is okay&amp;#8221; meme among the Innovation Crowd. Certainly we talked about it in Labs as well.  Fail fast; try another experiment; repeat.  I think this is bullshit.  Failure isn&amp;#8217;t okay, we don&amp;#8217;t achieve things through Brownian motion and a selection function. There are many kinds returns on an investment, and if you focus on only one kind of return, only one definition of success, then most experiments will appear to fail.  If you want to encourage innovation you have to create a more inclusive definition of &amp;#8220;success&amp;#8221;.  Success can mean that you learn something.  It can mean getting rid of a biased preconception about a solution.  It can mean learning about and understanding a domain or approach.  It can mean adapting processes for future improvement.  If something looks like an abject failure, I still believe if you look more closely and thoughtfully you can learn from it and come up with another approach, another experiment or if necessary a meta-experiment.  You should be ready to pivot at any time, but&amp;nbsp;thoughtfully.&lt;/p&gt;
&lt;p&gt;To innovate we need to learn from &lt;em&gt;every&lt;/em&gt; experiment.  We need to actively learn &lt;em&gt;during&lt;/em&gt; experiments.  We need to learn about the projects – but we also need to learn about the environment the innovation is embedded in.  Understanding the tensions, fears, needs, and excitement of the larger Mozilla needs to be part of that learning&amp;nbsp;process.&lt;/p&gt;
&lt;p&gt;I think the inability to pivot didn&amp;#8217;t just keep us from succeeding a projects, but also kept the successes from their full potential.  For instance &amp;#8220;Apps&amp;#8221; was a going concern in Labs when I started, and ultimately would become the group that would contain and then close Labs.  But to me it always felt like a project built on willfulness rather than inspiration.  It&amp;#8217;s only in the context of Firefox &lt;span class="caps"&gt;OS&lt;/span&gt; &amp;#8212; where the &lt;span class="caps"&gt;OS&lt;/span&gt; makes demands on apps &amp;#8212; that I think Apps are becoming something meaningful, and iterating towards something more than a trivial imitation of native apps.  But when you treat success as a binary then you are forced to push through your plan even if it could be improved by rethinking the approach, because rethinking feels like&amp;nbsp;failure.&lt;/p&gt;
&lt;p&gt;We knew TogetherJS wasn&amp;#8217;t a success for Mozilla (at least the Mozilla Corporation).  But we did learn things. &lt;a href="https://github.com/mozilla/hotdish"&gt;Hotdish&lt;/a&gt; was our pivot – our attempt to rethink the concepts in a form that was strategically meaningful to Mozilla. Specifically adding collaboration to the User Agent (i.e., Firefox), not to a web page.  But the pivot was hopeless at that point, events overtook us.  Or maybe not – I&amp;#8217;ve been caught up in success through execution for too long, and missing out on opportunities, so I don&amp;#8217;t trust those assessments of opportunities. But I think Hotdish as a concept was a bad match for Mozilla at that moment – Mozilla is currently under stress, it&amp;#8217;s looking for near-term wins, and Hotdish is a long-term&amp;nbsp;concept.&lt;/p&gt;
&lt;p&gt;Still I&amp;#8217;m frustrated.  I feel like the kind of approach to experimentation that we were developing, through both TogetherJS and Hotdish, was what Labs should have been doing all along, like I&amp;#8217;d finally started figuring it out. We were critically engaged with a product-oriented view, something I really learned with TogetherJS, from working with Aaron, and also from &lt;a href="https://twitter.com/simonwex"&gt;Simon&lt;/a&gt; and &lt;a href="https://twitter.com/gregglind"&gt;Gregg&lt;/a&gt;.  We were starting to engage (on our end) with Mozilla&amp;#8217;s strengths and specific opportunities (we had not yet started to engage outwardly in this respect).  We still needed to engage more aggressively on a technical level with the larger organization.  But it really felt like we were developing patterns by which a small team could effectively explore new areas, where with a conservative investment we could really push in new&amp;nbsp;directions.&lt;/p&gt;
&lt;p&gt;But now, with respect to these specific projects, I don&amp;#8217;t know &amp;#8212; I am still excited about their potential, but also feel like I need to establish emotional distance.  TogetherJS has been in a bit of a limbo as a result, but &lt;a href="https://www.mozilla.org/en-US/foundation/"&gt;Mozilla Foundation&lt;/a&gt; is planning to use TogetherJS more extensively in 2015, hopefully spurring another stage of development and use.  And a &lt;a href="https://github.com/woniesong92"&gt;helpful contributor&lt;/a&gt; has emerged lately, but I know it&amp;#8217;s a hard slog to take on a project in this&amp;nbsp;state.&lt;/p&gt;
&lt;h3&gt;Some of what I&amp;#8217;ve&amp;nbsp;learned&lt;/h3&gt;
&lt;p&gt;I learned a couple things about myself from my last experiences in&amp;nbsp;Labs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Being on a good team is great.  Good people alone don&amp;#8217;t make a good team.  I hadn&amp;#8217;t been on a good team at Mozilla before, or I hadn&amp;#8217;t been a good team member, I&amp;#8217;m not sure which.  Either way I want to take that on myself, not blame others, as my real goal is to find my own positive&amp;nbsp;path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Working with people with a variety of skills and perspectives is great, &lt;em&gt;if&lt;/em&gt; they are &lt;em&gt;critically and positively engaged&lt;/em&gt;.  They must be &lt;em&gt;critically&lt;/em&gt; engaged because happy shallow input doesn&amp;#8217;t have much value, and often covers up high-value input.  They must be &lt;em&gt;positively&lt;/em&gt; engaged because negative input is cheap and unhelpful.  A scattershot of perspectives and motivations isn&amp;#8217;t good, people talk across each other, discussions are drawn to problem collecting instead of solution finding.  Getting really smart people together doesn&amp;#8217;t inevitably lead to positive&amp;nbsp;searching.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I shouldn&amp;#8217;t expect success or impact through only my own abilities. I&amp;#8217;ve had a lone coder approach for a long long time now.  I&amp;#8217;m &lt;a href="http://www.ianbicking.org/projects.html"&gt;a pretty good lone coder&lt;/a&gt;. I&amp;#8217;ve had this notion in my mind of the Ultimate Product, some great thing I&amp;#8217;m going to come up with and then make in some series of late-night coding frenzies, and it&amp;#8217;ll be amazing. It&amp;#8217;s a self-acknowledged fantasy, I don&amp;#8217;t really believe I&amp;#8217;ll do this, but it&amp;#8217;s still a real motivation and thwarts my realistic ambitions. This perspective might seem conceited, but in practice it&amp;#8217;s an incredible drain on my self-esteem.  I would have to withdraw to create software of my own invention just to maintain some modicum of&amp;nbsp;self-respect.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I should stop making assumptions about other people&amp;#8217;s intentions, interests, or disinterests.  It&amp;#8217;s entirely unnecessary.  All I have to do is&amp;nbsp;ask.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Success (or effectiveness or impact) happens in a context, it&amp;#8217;s not an independent thing.  It happens within the team, the company, the community, and the larger world.  But I shouldn&amp;#8217;t just avoid being a loner: skipping all the most nearby contexts and paying attention only to the zeitgeist also isn&amp;#8217;t effective.  This was a chronic problem in Labs.  I also sometimes wonder if it&amp;#8217;s in the nature of The&amp;nbsp;Valley.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Then&amp;nbsp;what&amp;#8230;?&lt;/h3&gt;
&lt;p&gt;So now I&amp;#8217;m in a new position, Engineering Manager.  I&amp;#8217;m working in the &lt;a href="https://wiki.mozilla.org/CloudServices"&gt;Cloud Services&lt;/a&gt; group, and my team is focused on providing services for Firefox &lt;span class="caps"&gt;OS&lt;/span&gt;.  I have not touched code since I started.  In the parlance of management, I am a &amp;#8220;people&amp;nbsp;manager&amp;#8221;.&lt;/p&gt;
&lt;p&gt;This is not a move I expected to make.  Like many a developer (especially open source developers) I have always eschewed these formal lines of authority.  I might have imagined myself in a tech lead position, but not management.  More so the authority I now have was granted to me by Mozilla, not exactly earned &amp;#8212; this was a lateral move, not a promotion within a team.  And the role I play is not implementor but facilitator.  But here I&amp;nbsp;am.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve spent a lot of time exploring how to &lt;em&gt;do things&lt;/em&gt;, and now I&amp;#8217;m looking forward to spending some time exploring how to &lt;em&gt;get things done&lt;/em&gt;.  This is itself not an easy bridge to cross when holding on to open source attitudes &amp;#8212; we&amp;#8217;ve created this incredible set of tools, but very few products. (Even Firefox was in some sense really created by Netscape.)  And so I find myself looking more to traditional methods, to the processes and perspectives of the commercial&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m also just trying to learn to be a manager, a craft of its own, and a role I do not take lightly.  The pacing of my day is now much different.  Large chunks of free time are not my most productive, instead I find momentum through appointments and my to-do list. I&amp;#8217;m not even sure &amp;#8220;flow&amp;#8221; means something to a manager.  I&amp;#8217;m practicing a discipline that before I had always seen as overhead &amp;#8212; I saw the clerical work, the communication work, the reponsiveness as distractions that keep me away from my &amp;#8220;real work&amp;#8221;.  That attitude was hubris on my part, but there it&amp;nbsp;was.&lt;/p&gt;
&lt;p&gt;How long I&amp;#8217;m in this, I don&amp;#8217;t know.  I have a lot more to learn, I won&amp;#8217;t run out of important lessons anytime soon.  And I have commitments to follow through on, things I set in motion take time to resolve, it take time to even know how well I&amp;#8217;m doing.  And I don&amp;#8217;t dislike the work.  I&amp;#8217;m surprisingly relaxed, more so than I&amp;#8217;ve been for a long time in my professional life (though it&amp;#8217;s had its ups and downs).  And while I do think fondly to times when I was less &lt;em&gt;responsible&lt;/em&gt;, the reality is in my life I am now responsible for many things, the most important of them aren&amp;#8217;t part of work, and I can never be carefree in the way I was when I was&amp;nbsp;younger.&lt;/p&gt;
&lt;p&gt;I do worry my technical experience will atrophy.  I actually feel confident understanding things in theory, not always through direct experience.  I don&amp;#8217;t exactly need &lt;em&gt;skills&lt;/em&gt; to contribute to my team. I think what I really need is &lt;em&gt;intuition&lt;/em&gt;.  It is my role to infer things about a project, so that I can ask questions, suggest improvements, detect risks, suggest alternatives.  But even as I write this down it makes me worry less; if I was to waterfall all my insights upon the organization or team then my knowledge would atrophy, but each suggestion is also a chance to learn so long as I&amp;nbsp;listen.&lt;/p&gt;
&lt;p&gt;It may, or may not, be obvious at this point why I haven&amp;#8217;t coded since I started.  Programming is comfortable, it satisfies something in me &amp;#8212; and that thing is not what I need to grow in myself right now. What I&amp;#8217;m choosing to do is uncomfortable for me, and I feel a need to withhold a comfort I do not&amp;nbsp;trust.&lt;/p&gt;
&lt;p&gt;I am feeling a certain fatigue.  I spend more time now worrying about what I don&amp;#8217;t know I should worry about.  Mozilla is not huge, but it is not small, and I struggle trying to understand where in the organization there is flexibility, tension, what parts are locked down, what parts already want to change.  I see the appeal to greenfield organizational development (aka the&amp;nbsp;startup).&lt;/p&gt;
&lt;h3&gt;A growing set of&amp;nbsp;principles&lt;/h3&gt;
&lt;p&gt;In my time so far I&amp;#8217;ve thought about what kind of manager I try to be. Maybe sometimes I live up to these principles, but I&amp;#8217;m also comfortable thinking of these as&amp;nbsp;aspirational.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;My primary concern is to help the members of my team do their most impactful work.  This is not the same as their &lt;em&gt;best work&lt;/em&gt;. Over time I am seeing that these are greatly different, and I think the open source world is almost built on &amp;#8220;best&amp;#8221; over &amp;#8220;impactful&amp;#8221;, so this prioritization is important and somewhat&amp;nbsp;contrary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I always want there to be &lt;em&gt;space&lt;/em&gt;.  Space to discover, space to learn, space to make mistakes, and space to learn from those mistakes (the &lt;em&gt;space to learn&lt;/em&gt; is so often forgotten). Also space in conversations, and space in meetings.  I enjoy long pauses in conversations or meetings, I think they can be a good&amp;nbsp;sign.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s hard to think hard, especially on demand.  It&amp;#8217;s hard for me too.  Intuition or convention is much easier.  But at some points it is essential that we think hard.  I&amp;#8217;ve yet to figure out how to ensure that happens at those critical&amp;nbsp;times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I may be called on to judge the members of my team, but that is not my job.  Though the article is about teaching, I found myself quite affected by &lt;a href="http://mathyawp.blogspot.com/2013/01/the-lesson-of-grace-in-teaching.html"&gt;&lt;em&gt;The Lesson of Grace in Teaching&lt;/em&gt;&lt;/a&gt;. I fear when I have the opportunity to offer my team grace that I will forget this, miss the opportunity amid my own stress.  But that is why I must remind myself like&amp;nbsp;this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s always a good time to do the right thing.  But we should do the right thing for right now, not for the past or for an imagined present.  The &lt;a href="http://en.wikipedia.org/wiki/Sunk_costs"&gt;Sunk Cost Falacy&lt;/a&gt; has &lt;a href="https://plus.google.com/+IanBicking/posts/Cz95yhYK3aG"&gt;two sides&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I do not shield my team from the confusions or stresses of the larger organization.  When I have asked people what their favorite experience with a manager was, I have often heard that they liked a manager that shields them from the larger stresses of the organization, a manager who gave them a singular clear vision.  That management style creates a more comfortable environment, and one that &lt;em&gt;feels&lt;/em&gt; safer.  But as I said, I prioritize &lt;em&gt;impact&lt;/em&gt;, and impact exists in the organizational context.  I hope that my team can creatively respond and react to the organizational context.  I don&amp;#8217;t want to pass down my own stress, but insulating my team through a false confidence isn&amp;#8217;t fair to them, even if it seems nice at the&amp;nbsp;moment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Small decisions are important.  And each person is making many small, important decisions throughout their work.  That&amp;#8217;s why I don&amp;#8217;t want to insulate: I believe that those decisions, well made, have important impact.  And I can&amp;#8217;t predict, on behalf of my team, when those decisions will come&amp;nbsp;up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I always want my team to understand &lt;em&gt;why&lt;/em&gt;.  Why are we doing this? People can execute instructions without understanding why.  I can simply assign work.  They can close bugs (then the bug tracker assigns work).  But there&amp;#8217;s an opportunity lost if you don&amp;#8217;t understand&amp;nbsp;motivations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There&amp;#8217;s a lot missing from this list that I have yet to learn.  And probably some items that represent an incorrect perspective on my role.  But I will keep making provisional theories, these form my next set of&amp;nbsp;experiments.&lt;/p&gt;
&lt;p&gt;I hope I can muster the will to write more about what I learn along the&amp;nbsp;way.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>How We Use GitHub Issues To Organize a Project</title><link href="https://www.ianbicking.org/blog/2014/03/use-github-issues-to-organize-a-project.html" rel="alternate"></link><published>2014-03-18T04:26:00-05:00</published><updated>2014-03-18T04:26:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2014-03-18:/blog/2014/03/use-github-issues-to-organize-a-project.html</id><summary type="html">&lt;p&gt;On a &lt;a href="https://github.com/mozilla/togetherjs"&gt;couple&lt;/a&gt; &lt;a href="https://github.com/mozilla/hotdish"&gt;projects&lt;/a&gt; I&amp;#8217;ve used GitHub Issues as the primary technique to organize the project, and I&amp;#8217;ve generally enjoyed it, but it took some playing around to come up with a process. You, reader, may also like this process, so I will describe it for&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;GitHub …&lt;/p&gt;</summary><content type="html">&lt;p&gt;On a &lt;a href="https://github.com/mozilla/togetherjs"&gt;couple&lt;/a&gt; &lt;a href="https://github.com/mozilla/hotdish"&gt;projects&lt;/a&gt; I&amp;#8217;ve used GitHub Issues as the primary technique to organize the project, and I&amp;#8217;ve generally enjoyed it, but it took some playing around to come up with a process. You, reader, may also like this process, so I will describe it for&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;GitHub Issues has a slim set of&amp;nbsp;features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Issues, of&amp;nbsp;course&lt;/li&gt;
&lt;li&gt;Issues can be&amp;nbsp;assigned&lt;/li&gt;
&lt;li&gt;Issues belong to zero or one&amp;nbsp;milestone&lt;/li&gt;
&lt;li&gt;Issues can have any number of&amp;nbsp;tags&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This isn&amp;#8217;t a lot to work with, so we had to play around a bit to figure out a good&amp;nbsp;pattern.&lt;/p&gt;
&lt;h2&gt;Milestones&lt;/h2&gt;
&lt;p&gt;We decided there was only a couple things we actually wanted to&amp;nbsp;track:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What are we doing right&amp;nbsp;now?&lt;/li&gt;
&lt;li&gt;What aren&amp;#8217;t we doing right&amp;nbsp;now?&lt;/li&gt;
&lt;li&gt;What aren&amp;#8217;t we sure&amp;nbsp;about?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We have to regularly reevaluate where issues fit into these categories, so we break category 2&amp;nbsp;into:&lt;/p&gt;
&lt;p&gt;2a. Stuff we&amp;#8217;ll probably do&amp;nbsp;soon&lt;/p&gt;
&lt;p&gt;2b. Stuff we probably won&amp;#8217;t do&amp;nbsp;soon&lt;/p&gt;
&lt;p&gt;We tried using labels for this but it was no good.  There&amp;#8217;s only a small number of queries you can do with labels, foiling any clever ideas.  Instead we have&amp;nbsp;milestones:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stuff we are doing right now&lt;/strong&gt;: this is the &amp;#8220;main&amp;#8221; milestone.  We give it a name (like &lt;em&gt;Alpha 2&lt;/em&gt; or &lt;em&gt;Strawberry Rhubarb Pie&lt;/em&gt;) and we write down what we are trying to accomplish with the milestone.  We create a new milestone when we are ready for the next&amp;nbsp;iteration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stuff we&amp;#8217;ll probably do soon&lt;/strong&gt;: this is a standing &amp;#8220;Next Tasks&amp;#8221; milestone.  We never change or rename this&amp;nbsp;milestone.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stuff we probably won&amp;#8217;t do soon&lt;/strong&gt;: this is a standing &amp;#8220;Blue Sky&amp;#8221; milestone.  We refer to these tickets and sometimes look through them, but they are easy to ignore, somewhat intentionally&amp;nbsp;ignored.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What aren&amp;#8217;t we sure about?&lt;/strong&gt;: issues with no&amp;nbsp;milestone.&lt;/p&gt;
&lt;p&gt;We use a permanent &amp;#8220;Next Tasks&amp;#8221; milestone (as opposed to renaming it to &amp;#8220;Alpha 3&amp;#8221; or actual-next-iteration milestone) because we don&amp;#8217;t want to presume or default to including something in the &lt;em&gt;real&lt;/em&gt; next iteration.  When we&amp;#8217;re ready to start planning the next iteration we&amp;#8217;ll create a new milestone, and only deliberately move things into that&amp;nbsp;milestone.&lt;/p&gt;
&lt;h2&gt;The Triage&amp;nbsp;Meeting&lt;/h2&gt;
&lt;p&gt;We use the triage process to organize many of our meetings.  The issues give us our first run at an&amp;nbsp;agenda.&lt;/p&gt;
&lt;h3&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Needs&amp;nbsp;Discussion&amp;#8221;&lt;/h3&gt;
&lt;p&gt;We have a label: &lt;strong&gt;needs discussion&lt;/strong&gt;.  We start each meeting by querying everything (regardless of milestone) that has that label, and discussing each item.  Once we&amp;#8217;re done discussing we usually remove the label, but sometimes we couldn&amp;#8217;t decide whatever we wanted to decide and so we leave the label there, pushing the item to the next&amp;nbsp;meeting.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s helpful to use &amp;#8220;needs discussion&amp;#8221; liberally.  It might be for some big things, like we add a ticket &amp;#8220;Decide who our target market is&amp;#8221; &amp;#8212; that&amp;#8217;s kind of a big deal, and we might keep adding notes over the course of weeks.  But it might just be a small issue where there seems to be some confusion or an open&amp;nbsp;question.&lt;/p&gt;
&lt;p&gt;These are small team meetings, so we aren&amp;#8217;t trying to use this to close off discussion or restrict the agenda, and anyone can bring up a topic at any time.  But if you want to be sure to talk about something then opening and labeling a ticket is as good a way as anything. Also the issues become our meeting notes (they aren&amp;#8217;t date-organized meeting notes, but I seldom want date-organized meeting&amp;nbsp;notes).&lt;/p&gt;
&lt;h3&gt;Issues without a&amp;nbsp;milestone&lt;/h3&gt;
&lt;p&gt;GitHub lets you query all issues that have no milestone.  It doesn&amp;#8217;t let you query issues without a particular label, which made our label-based attempts at organization&amp;nbsp;unproductive.&lt;/p&gt;
&lt;p&gt;So next in the meeting we go through each item without a milestone, oldest first.  Sometimes we skim, and if someone says &amp;#8220;next tasks?&amp;#8221; then usually the answer is&amp;nbsp;&amp;#8220;yes&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Outside of a meeting if any of us sees something in Next Tasks or Blue Sky that we should do sooner, that person clears the milestone.  It&amp;#8217;s often better to clear the milestone than to just assign it to the current iteration, as it brings it in front of the entire&amp;nbsp;team.&lt;/p&gt;
&lt;p&gt;An exception is when someone breaks a big issue down into smaller tasks, or creates a dependent bug &amp;#8212; then whoever does that usually assigns the milestone at the same&amp;nbsp;time.&lt;/p&gt;
&lt;h3&gt;Starting a new&amp;nbsp;iteration&lt;/h3&gt;
&lt;p&gt;When we&amp;#8217;re ready to start a new iteration we first create a new milestone, and agree on our&amp;nbsp;goal.&lt;/p&gt;
&lt;p&gt;Sometimes if we&amp;#8217;re not sure what our goal for the next iteration is we&amp;#8217;ll create a ticket, &amp;#8220;decide on goal for the next iteration&amp;#8221; (and mark it needs-discussion of&amp;nbsp;course).&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll go through the meeting as normal, then look at any open issues in the previous iteration.  It&amp;#8217;s pretty common that we move these issues to &amp;#8220;Next Tasks&amp;#8221; instead of the next iteration.  Issues that didn&amp;#8217;t get fixed often turned out to not be as important as we&amp;nbsp;thought.&lt;/p&gt;
&lt;p&gt;We sometimes go through Next Tasks, but it can also take too long to do that together.  Part of me thinks we should slog through anyway, and use that as a chance to clean up Next Tasks &amp;#8212; move stuff to Blue Sky, or close issues we no longer plan to address at all, or check for things that have already been&amp;nbsp;fixed.&lt;/p&gt;
&lt;p&gt;But instead one of us will often do an initial triage on Next Tasks, clearing the milestone for anything that might be worth looking at again.  Also it&amp;#8217;s a chance to close issues and find duplicates.  It&amp;#8217;s good to err on the side of clearing the milestone.  It&amp;#8217;s best not to assign a task directly to the next iteration because even talking about a ticket for a moment is&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;Blue Sky unfortunately is a bit of a dumping ground.  The only way issues emerge is when we search and happen upon something that was put into Blue Sky. Arguably we shouldn&amp;#8217;t create a bucket for things we don&amp;#8217;t want to pay attention to.  But the issue list is also an idea collection area, and I like that.  I&amp;#8217;d like if we had a process to recover things from Blue&amp;nbsp;Sky.&lt;/p&gt;
&lt;h3&gt;Assignments&lt;/h3&gt;
&lt;p&gt;Sometimes we assign all the tickets in the current iteration.  The primary purpose of assigning all the tickets is to identify the issues that no one is planning to address (and fix&amp;nbsp;that).&lt;/p&gt;
&lt;p&gt;I haven&amp;#8217;t had a lot of luck using assignments for more than this. Something I &lt;em&gt;wish&lt;/em&gt; I could do with an assignment is hand a task off to someone &amp;#8212; like sometimes I can only finish half of an issue and I need someone else to finish the work (or vice versa).  But unless that person is carefully watching what is assigned to them this won&amp;#8217;t accomplish what I want.  So I have to change the assignment &lt;em&gt;and&lt;/em&gt; leave a comment.  This leads to a lot of out-of-date chatter in the&amp;nbsp;comments.&lt;/p&gt;
&lt;p&gt;Generally I am unhappy with the notifications that GitHub provides. Are there third party products that can help here?  Also it&amp;#8217;s hard to know how someone else&amp;#8217;s notifications are configured, so I don&amp;#8217;t know what will trigger a response.  Most people will occasionally catch some updates, leading to a false sense of security.  (It would be great if I saw a list of everyone who was notified when I created or changed an&amp;nbsp;issue.)&lt;/p&gt;
&lt;p&gt;We have at times tried to use assignments to &amp;#8220;claim&amp;#8221; a ticket.  I.e., use it as a declaration of intent to avoid two people working on the same thing.  I did not find this productive, and it was hard to&amp;nbsp;maintain.&lt;/p&gt;
&lt;p&gt;In my &lt;a href="https://github.com/mozilla/hotdish"&gt;Hotdish&lt;/a&gt; fantasy world I&amp;#8217;d know who else in my team had looked at the ticket and when, and I could get a sense of what people were thinking about from&amp;nbsp;that.&lt;/p&gt;
&lt;h3&gt;Maintaining the&amp;nbsp;tickets&lt;/h3&gt;
&lt;p&gt;It&amp;#8217;s important that tickets have proper titles.  Sometimes I have left bad titles in place and it would cause repeated confusion &amp;#8212; constantly asking myself and other people, what was this ticket about? GitHub has editable titles and you should use them.  Editing the main ticket description for clear mistakes (broken links, s/now/not/, etc) is also&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;Still issues have a limited lifetime.  When the main description of the issue is no longer what you intend to implement it&amp;#8217;s time to open a new issue, and close the original with a reference to the new issue. Long comment threads are not useful.  Comments should indicate additions and clarifications, but when a comment changes the goal of the issue it&amp;#8217;s too easy to skim over.  Also when a debate happens in the comments and is resolved, it&amp;#8217;s hard to separate the resolution from the debate, and a new ticket fixes&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;Sometimes there&amp;#8217;s a collection of work that goes together.  We tried two approaches, but neither&amp;nbsp;stuck:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Create a label for the group of issues:&lt;/strong&gt; in this model I might create a &lt;code&gt;webrtc&lt;/code&gt; label and label a bunch of issues.  This would help me figure out just how much work was left on that area and what bugs I should keep in mind as I look at a particular area of code, and maybe help find bugs or at least be sure I wasn&amp;#8217;t forgetting about&amp;nbsp;something.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s easy to think that you should start building a taxonomy of bugs. The default GitHub labels imply something like this (like &amp;#8220;bug&amp;#8221;, &amp;#8220;duplicate&amp;#8221;, &amp;#8220;enhancement&amp;#8221;).  I would sometimes find myself using these just because they are there, but always ask: why did I bother? Then I started deleting these labels to remove the temptation.  I want only actionable&amp;nbsp;labels.&lt;/p&gt;
&lt;p&gt;An aside: the labels &lt;code&gt;duplicate&lt;/code&gt;, &lt;code&gt;wontfix&lt;/code&gt;, and &lt;code&gt;invalid&lt;/code&gt; are (a) unnecessary, and (b) socially dangerous.  If something is a duplicate you can close it with the comment &amp;#8220;Dup of #123&amp;#8221;.  Often that&amp;#8217;s not exactly what happened though, you might say &amp;#8220;rendered moot by #123&amp;#8221; or &amp;#8220;once #123 is fixed this won&amp;#8217;t be an issue&amp;#8221; or something specific. And &lt;code&gt;wontfix&lt;/code&gt; is the worst, it&amp;#8217;s like a way of telling someone to fuck off, but that you don&amp;#8217;t even care enough to actually tell them why they should fuck off.  If it&amp;#8217;s a team member they won&amp;#8217;t take offense, but it&amp;#8217;s easy to fire it at some unwitting member of the public.  Take the time to close the bug with a comment about why you won&amp;#8217;t fix it. Invalid is like the vague passive aggressive combination of the other two.  Maybe it&amp;#8217;s because we like to imagine we&amp;#8217;ll do some kind of reporting on these statuses, but I find myself pretty bored by&amp;nbsp;history.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Create a master issue&lt;/strong&gt;: in this case you create an issue that links to all the sub-issues that need to be&amp;nbsp;tackled.&lt;/p&gt;
&lt;p&gt;To do this you can&amp;#8217;t just use backlinks (the link created whenever one issue references another): all backlinks look the same, and you can&amp;#8217;t tell if a bug that references the master is a dependency of the master, or depends on the master, or just mentions it in&amp;nbsp;passing.&lt;/p&gt;
&lt;p&gt;Instead we list all the bugs in the main description of the master issue, and edit as necessary.  You can use &lt;code&gt;[ ]&lt;/code&gt; to make the bug list a &lt;a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments"&gt;checkable list&lt;/a&gt;. Unfortunately issue links don&amp;#8217;t get crossed out when they are closed (but they should, that would be a very helpful&amp;nbsp;improvement).&lt;/p&gt;
&lt;p&gt;The master ticket works okay but feels like it requires a lot of manual record keeping, and it&amp;#8217;s easy for your master issue to get out of sync with the sub-issues.  Also as you add or remove items from the list of dependent bugs you have to edit the main ticket description (anything in the comments would be too easy to lose) and there aren&amp;#8217;t notifications for those&amp;nbsp;edits.&lt;/p&gt;
&lt;h2&gt;The&amp;nbsp;result?&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve only tried this approach with a small dedicated team.  It wouldn&amp;#8217;t match the less consistent rhythm of an open source project, and I have no idea how it would work with a larger team (maybe&amp;nbsp;okay?)&lt;/p&gt;
&lt;p&gt;One attribute is notably and deliberately missing: priorities, severities, and time estimates.  We played with these and I never knew what to &lt;em&gt;do&lt;/em&gt; with them.  There&amp;#8217;s no single equation that determines what you should work on, and trying to create such an equation seems pointless &amp;#8212; you probably won&amp;#8217;t include everything you need to include, and if you do then it&amp;#8217;s unlikely that all parameters are filled in accurately and so you can&amp;#8217;t trust the&amp;nbsp;results.&lt;/p&gt;
&lt;p&gt;The goals for me, and the team, is to keep things somewhat organized, to remember important things, and to come to a shared understanding of what we&amp;#8217;re trying to accomplish and how.  Because of that last point some parts of the process deliberately force conversation where a tighter process wouldn&amp;#8217;t need it.  Specifically I don&amp;#8217;t want important things expressed through labels because there&amp;#8217;s no opportunity to discuss labels, they just appear and disappear.  Issue trackers that encourage complex taxonomies of bugs make me worry that the taxonomy will be used to assert things about process that need to be communicated directly and explicitly and via a two-way&amp;nbsp;channel.&lt;/p&gt;
&lt;p&gt;GitHub&amp;#8217;s permissive approach to editing (titles, descriptions, and comments) is reflective of the kind of process I also want to support: everyone should be able to do everything in the service of the project. It&amp;#8217;s better to give people more power: it&amp;#8217;s actually &lt;em&gt;helpful&lt;/em&gt; if people can overreach because it is an opportunity to establish where the limits really are and what purpose those limits have.  Most tools have a strict append-only approach which I do not like (though it does make notifications easier, and notifications are my greatest frustration with GitHub&amp;nbsp;Issues).&lt;/p&gt;
&lt;p&gt;From your experience with GitHub issues do you have ideas to add to&amp;nbsp;this?&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Saying Goodbye To Python</title><link href="https://www.ianbicking.org/blog/2014/02/saying-goodbye-to-python.html" rel="alternate"></link><published>2014-02-12T12:10:00-06:00</published><updated>2014-02-12T12:10:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2014-02-12:/blog/2014/02/saying-goodbye-to-python.html</id><summary type="html">&lt;p&gt;This post is long overdue; this isn&amp;#8217;t a declaration of intent (any intent was long ago made real), just my reflection about my own path. I left the Python world a long time ago but I never took a chance to say&amp;nbsp;goodbye.&lt;/p&gt;
&lt;p&gt;While I had moved on from …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is long overdue; this isn&amp;#8217;t a declaration of intent (any intent was long ago made real), just my reflection about my own path. I left the Python world a long time ago but I never took a chance to say&amp;nbsp;goodbye.&lt;/p&gt;
&lt;p&gt;While I had moved on from Python years ago, I felt a certain attachment to it well past then, not quite admitting to myself that I wasn&amp;#8217;t coming back.  When my proposal for PyCon 2013 was rejected I was frustrated (it was going to be a fun talk!) but for some reason that made me fully realized that I wasn&amp;#8217;t part of the Python community&amp;nbsp;anymore.&lt;/p&gt;
&lt;p&gt;Python was the first &amp;#8212; and I sometimes wonder if the only &amp;#8212; programming community I was part of.  Coming to Python was a conscious choice.  In college I was interested in Scheme and Smalltalk. High-minded languages with interesting ideas, but hard to find practical uses.  Scheme was always too underserved by its libraries and sparse academic community.  In contrast Smalltalk was &lt;em&gt;productive&lt;/em&gt; &amp;#8212; it was built by and for people who loved to build things.  (More credit here should probably go to &lt;a href="http://en.wikipedia.org/wiki/Daniel_Henry_Holmes_Ingalls,_Jr."&gt;Dan Ingalls&lt;/a&gt; than &lt;a href="http://en.wikipedia.org/wiki/Alan_Kay"&gt;Alan Kay&lt;/a&gt; &amp;#8212; I can sense in Dan Ingalls&amp;#8217;s work a real passion for making things, and a pure but unproductive language would not have satisfied him.)  But Smalltalk was and is a world of its own.  It was culturally and technically pre-internet, pre-open-source, pre-online-community.  And despite all the great things about the Smalltalk environment and language it couldn&amp;#8217;t fulfill these then-new potentials, even as it tried to adapt. (I wrote a couple posts about this, intended as a sort of sympathetic explanation of why I couldn&amp;#8217;t stick with Smalltalk: &lt;a href="http://www.ianbicking.org/where-smalltalk-went-wrong.html"&gt;Where Smalltalk Went Wrong&lt;/a&gt; and &lt;a href="http://www.ianbicking.org/where-smalltalk-went-wrong-2.html"&gt;a followup&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;At the end of my college career (1999ish) I consciously looked for a new home. I flirted with Perl, C, but knew they weren&amp;#8217;t for me. Somewhere along the way I came upon Python, and it was good enough that I didn&amp;#8217;t look for anything better.  I can&amp;#8217;t say I fell in love with Python like I had with Scheme and Smalltalk &amp;#8212; Scheme was like an opening up of the world after going far beyond what anyone should ask of &lt;a href="http://en.wikipedia.org/wiki/GW-BASIC"&gt;&lt;span class="caps"&gt;GW&lt;/span&gt;-&lt;span class="caps"&gt;BASIC&lt;/span&gt;&lt;/a&gt;, and Squeak/Smalltalk was a deep mysterious world, like coming upon the ruins of an ancient and advanced civilization.  Python in comparison was practical &amp;#8212; but I wasn&amp;#8217;t in the mood at that time to &lt;em&gt;discover&lt;/em&gt;, I wanted to &lt;em&gt;build&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And I &lt;a href="http://www.ianbicking.org/projects.html"&gt;built a lot of things in Python&lt;/a&gt;. I was doing workaday web programming and my enthusiasm went more towards building tools to build stuff than in the building itself.  I &lt;em&gt;did&lt;/em&gt; build some cool products in those days, not just libraries, but for some reason it&amp;#8217;s only the smaller units that I was able to push out.  And I found a community in&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;And I built.  Back in the days I contributed to &lt;a href="http://www.webwareforpython.org/"&gt;Webware&lt;/a&gt;, what felt like a completely different generation of web development in Python than today.  I wrote &lt;a href="http://sqlobject.org/"&gt;SQLObject&lt;/a&gt;, my first foray into a oh-shit-people-are-using-this-I&amp;#8217;m-not-sure-how-I-feel-about-that library.  But SQLObject explored a lot of metaprogramming concepts that were quite novel in the Python world at that time.  At the same time maintaining it felt like a terrible burden.  It took me far too long to resolve that, and only once interest had died down (in no small part due to my lack of attention) did I hand it over to &lt;a href="http://phdru.name/"&gt;Oleg&lt;/a&gt; who has been a far more steady hand.  This would be a pattern I would unfortunately repeat.  But if SQLObject helped the &lt;a href="http://www.sqlalchemy.org/"&gt;next generation&lt;/a&gt; be better that&amp;#8217;s good enough for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Later came &lt;a href="http://wsgi.readthedocs.org/"&gt;&lt;span class="caps"&gt;WSGI&lt;/span&gt;&lt;/a&gt; which excited me with its subtly functional basis.  I built a whole web framework toolkit (or a framework for building web frameworks?) in &lt;a href="http://pythonpaste.org/"&gt;Paste&lt;/a&gt;. Few people really understood what I was trying to do with Paste &amp;#8212; at times including me.  Some people like &lt;a href="http://groovie.org/"&gt;Ben Bangert&lt;/a&gt; were able to see the principles underneath the code, and get them out into the world in the kind of usable state that I intended to enable. (And along the way I sometimes felt like I was doing the same for &lt;a href="http://dirtsimple.org/programming/"&gt;&lt;span class="caps"&gt;PJE&lt;/span&gt;&lt;/a&gt;.) Python web frameworks were a mess back then; ultimately &lt;a href="https://www.djangoproject.com/"&gt;reaching for the crown&lt;/a&gt; using a monolithic approach was a more successful technique than trying to build bridges as I attempted with Paste.  I&amp;#8217;m still not sure what lesson to take from that.  Not a &lt;em&gt;general&lt;/em&gt; lesson, but more understanding the landscape.  And understanding what you can bring to a problem, and who you can bring with.  I feel like I&amp;#8217;m only now really understanding the importance of vision combined with a diverse group of skills and perspectives, and I have even more to learn about how to actually assemble and coordinate the right group of people in the right environment to&amp;nbsp;succeed.&lt;/p&gt;
&lt;p&gt;Somewhere around here I feel like I reached my 10,000 hours of Python coding.  I wrote &lt;a href="http://webob.org/"&gt;WebOb&lt;/a&gt;, taking the lessons of Paste and a better intuition for library design.  I still think it&amp;#8217;s the best mapping of &lt;span class="caps"&gt;HTTP&lt;/span&gt; to Python.  Other libraries include more aspects of web development in their scope, or have better documentation, and more users, but when viewed with a particular lens I&amp;#8217;m still very proud of WebOb. And it&amp;#8217;s been an important building block in a lot of people&amp;#8217;s explorations into &lt;a href="http://docs.webob.org/en/latest/do-it-yourself.html"&gt;building a web framework&lt;/a&gt;. Other libraries from this period are &lt;a href="http://lxml.de/lxmlhtml.html"&gt;lxml.html&lt;/a&gt;, smaller things like &lt;a href="http://webtest.pythonpaste.org/"&gt;WebTest&lt;/a&gt;, &lt;a href="http://pythonpaste.org/scripttest/"&gt;ScriptTest&lt;/a&gt;, &lt;a href="https://pypi.python.org/pypi/MiniMock"&gt;MiniMock&lt;/a&gt;, &lt;a href="http://pythonpaste.org/tempita/"&gt;Tempita&lt;/a&gt;, perhaps the over-ambition (or just mis-ambition) of &lt;a href="http://www.coactivate.org/projects/deliverance/introduction"&gt;Deliverance&lt;/a&gt;. That period felt like a clearing out of my system, unloading a bunch of&amp;nbsp;ideas.&lt;/p&gt;
&lt;p&gt;But for whatever reason my most successful tools were &lt;a href="http://www.virtualenv.org/"&gt;virtualenv&lt;/a&gt; and &lt;a href="http://www.pip-installer.org/"&gt;pip&lt;/a&gt;.  These were never my greatest passions, or even close.  They were about: (a) fixing personal annoyances in deployment (virtualenv), and (b) getting people to stop fucking whining about Setuptools and easy_install (pip).  I&amp;#8217;m not sure whether I blame the uneasy success of these tools on broad appeal, or that they are in a sense user-visible tools and not libraries, or that I didn&amp;#8217;t like doing them because no one liked doing them and so there was a vacuum waiting to be&amp;nbsp;filled.&lt;/p&gt;
&lt;p&gt;And then my last project, &lt;a href="https://bitbucket.org/ianb/silverlining/src"&gt;Silver Lining&lt;/a&gt;.  It was early on in the devops revolution, an attempt to think about what a generic container for web applications might look like.  It was in a sense going deeper down the hole of virtualenv and pip, but with an aim to build a full product and not just a set of eclectic tools.  No one cared. And I only cared a little &amp;#8212; I cared because it was completing some ideas I&amp;#8217;d long had about deployment, because for a certain kind of web application development it felt nimble and reliable, because it removed or automated tasks I didn&amp;#8217;t like to do. But I didn&amp;#8217;t &lt;em&gt;care&lt;/em&gt;, no more than I cared about virtualenv or pip. I&amp;#8217;d gone down a path that was about code and technical design, but if I stepped back it was&amp;nbsp;unexciting.&lt;/p&gt;
&lt;p&gt;And when I did step back there wasn&amp;#8217;t anything in Python that excited me.  Python was doing great, my interest had nothing to jumping on or off bandwagons.  Python &lt;em&gt;is&lt;/em&gt; doing great &amp;#8212; better than ever (&lt;a href="https://plus.google.com/+IanBicking/posts/iEVXdcfXkz7"&gt;minor bumps with versions aside&lt;/a&gt;). But I think in my mind I&amp;#8217;d always imagined I could build up just the right toolset, and using that toolset create the product I actually wanted to create &amp;#8212; what exactly that product was, I don&amp;#8217;t know, but with the right tools I imagined I could move fast enough and confidently enough to find&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Sometimes when I&amp;#8217;m feeling particularly excited about an idea, like &lt;em&gt;really&lt;/em&gt; excited, I have to take a break.  I need to calm down.  Try to wrap my head around the ideas, because I know if I push forward directly that I&amp;#8217;ll just muddle things up and feel disappointed.  No, I don&amp;#8217;t &lt;em&gt;know&lt;/em&gt; that is true: maybe I don&amp;#8217;t want to have to confront, in that moment, that the idea is not as cool as I think it is, or as possible as I think it is.  But often I do step back into the problem, with ideas that are more mature for having thought more deeply about them. In a sense I think creating tools and libraries was a similar process: I felt too excited about creating something great, because I worried I&amp;#8217;d muddle everything up, or afraid I just couldn&amp;#8217;t pull it off, and so I stepped away and would work on&amp;nbsp;tools.&lt;/p&gt;
&lt;p&gt;I always directed my attention to the web, even if I got bogged down in the server.  Somehow I skipped native GUIs, even as a user.  But pure data processing without consideration for what you &lt;em&gt;do&lt;/em&gt; with the data felt unexciting.  And ops &amp;#8212; that&amp;#8217;s just the worst. I was, and am, a true believer in Free Software; and I was, and am, a true believer in the web.  That is, I don&amp;#8217;t see either as simply a means to an ends.  But not for the same reasons, and I can believe in a web that isn&amp;#8217;t open source, and open source that isn&amp;#8217;t for the web.  And yet writing it down I realize I don&amp;#8217;t &lt;em&gt;care&lt;/em&gt; about open source that isn&amp;#8217;t for the&amp;nbsp;web.&lt;/p&gt;
&lt;p&gt;When I stepped back Python no longer seemed relevant to the web, at least not the part of the web that interested me.  The tools I had built were no longer relevant either, they were not the tools with which I could realize my ambitions.  The database-backed website, or the dynamic-&lt;span class="caps"&gt;HTTP&lt;/span&gt;-based web application, templates and deployments, anything you&amp;#8217;d call &amp;#8220;&lt;span class="caps"&gt;REST&lt;/span&gt;&amp;#8221; &amp;#8212; none of it seemed like the future, and whatever this vague thing was that I&amp;#8217;d been looking for, I wasn&amp;#8217;t going to find it&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;This wasn&amp;#8217;t an actual revelation, I&amp;#8217;m constructing it in retrospect. If you&amp;#8217;d asked me I would have agreed with this notion even years earlier, and it&amp;#8217;s not like I came up with some unique idea, if anything I would call it self-evident, don&amp;#8217;t we all know this is where the world is going?  And so I started to look towards Javascript and the browser and the &lt;span class="caps"&gt;DOM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Somewhat before this I also joined Mozilla.  But it would be backwards to say that Mozilla induced this change in perspective, that it tempted me away from Python.  In fact I would have had a much easier time of it if I had just stuck with doing Python backend stuff at&amp;nbsp;Mozilla.&lt;/p&gt;
&lt;p&gt;The last few years of transition have been a struggle.  With Python and the server I knew what I was doing.  I was good at it, I felt competent.  I could construct an opinion with confidence about all kinds of design questions.  I was respected and my opinion would be listened to.  I&amp;#8217;d put in my 10,000 hours, I had achieved&amp;nbsp;mastery.&lt;/p&gt;
&lt;p&gt;Moving to Javascript none of this was true, and most of it &lt;em&gt;still&lt;/em&gt; isn&amp;#8217;t true.  It might be easier to pull off this change if I was doing web development, surrounded with people making similar transitions, a little fish in the little pond of whatever group I was working with. But Mozilla is not that kind of environment.  Which is okay &amp;#8212; if I had felt confident it would only be because there was no one to correct&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s oddly common to see people talk about how a programmer can pick up something new in the matter of a few days or months.  To find programmers that consider all that knowledge transferable (&lt;a href="https://news.ycombinator.com/item?id=7204515"&gt;for instance&lt;/a&gt;).  I don&amp;#8217;t know what to make of it &amp;#8212; my less forgiving self thinks these people have never known what real mastery is.  I don&amp;#8217;t think it takes another 10,000 hours to get mastery in a new language and environment&amp;#8230; but it definitely takes some thousands of hours, some years of hard work. I only now feel like I&amp;#8217;m getting&amp;nbsp;close.&lt;/p&gt;
&lt;p&gt;Maybe it&amp;#8217;s my perspective on what mastery is.  Deciding to do something and then doing it is good.  It is not mastery.  You have to pick the right problem to solve.  You have to pick the right way to solve it.  You need to know when to revise that plan, and understand the constraints that inform that revision.  You need both large scale and small scale intuitions.  And you need to be good enough at all the details of programming in that environment that you don&amp;#8217;t get overwhelmed with the &amp;#8220;easy&amp;#8221; stuff, so you have mental energy to spare on the big stuff.  The jump from Python to Javascript isn&amp;#8217;t &lt;em&gt;that&lt;/em&gt; big, the languages have a very similar shape.  And the browser was already the environment focused on.  And yet redeveloping my intuition for this new environment has taken&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Sadly I&amp;#8217;m not going to get back where I was, because Javascript is not Python.  If there&amp;#8217;s a Javascript community I haven&amp;#8217;t found it, or it&amp;#8217;s at least not a single entity.  There is no community that created Javascript like the Python community created Python.  Python comes from the internet in a way Javascript does not; Javascript was built &lt;em&gt;for&lt;/em&gt; the internet, but Python was built &lt;em&gt;on&lt;/em&gt; the internet.  And I do miss the Python community, you&amp;#8217;re good&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;But also whatever language partisanship I had is gone, and won&amp;#8217;t come back in the guise of a new favorite language.  This shouldn&amp;#8217;t be confused with a disinterest in language.  I still get as annoyed as ever by &amp;#8220;use the right tool for the job&amp;#8221; &amp;#8212; the bland truism meant to shut down critical discussion and engagement with the tasks and choices in software engineering, replacing it with a weak passionless technical&amp;nbsp;fatalism.&lt;/p&gt;
&lt;p&gt;I suppose it is the platform that I am drawn to now before language. And the browser seems like the most interesting platform, not because it&amp;#8217;s novel (though it is, it&amp;#8217;s a runtime like few others), but because of how concrete it is, and of course how relevant it is to&amp;#8230; anything.  And the browser is no longer just the servant of a server, I prefer now to think of the browser as an independent agent, connecting to &lt;em&gt;services&lt;/em&gt; instead of &lt;em&gt;servers&lt;/em&gt;.  Obviously that doesn&amp;#8217;t describe a great number of running web sites, but it&amp;#8217;s the model I see for the future, and a better perspective for understanding future&amp;nbsp;architectures.&lt;/p&gt;
&lt;p&gt;Still this only addresses which direction I&amp;#8217;m looking towards, I still have to walk the path.  I don&amp;#8217;t want to get caught up in the weeds again, building tools for something I never manage to make.  Right now I think I&amp;#8217;m on to something in the area of collaboration, first with &lt;a href="https://togetherjs.com/"&gt;TogetherJS&lt;/a&gt; and now I&amp;#8217;m thinking bigger with a &lt;a href="http://github.com/mozilla/hotdish"&gt;new experiment&lt;/a&gt;.  But while I feel like I&amp;#8217;ve reached some competence in executing on these projects, programming is only one piece of bringing forward a larger vision.  I still have a lot of learning to do, skills for which I haven&amp;#8217;t put in the necessary time.  How to recruit support, how to manage the project, how to negotiate between feasibility and user value, how to negotiate compromises in strategy and design.  And collaboration itself is a whole domain of expertise.  I&amp;#8217;ve learned a lot, I can &lt;em&gt;do&lt;/em&gt; things, but I am definitely not yet experienced enough to &lt;em&gt;choose to do the right thing&lt;/em&gt; in these areas.  And at this moment I&amp;#8217;m worried I won&amp;#8217;t have the room to learn these things, it feels like time is running out just when I&amp;#8217;m pulling stuff together.  [Update: &lt;a href="http://www.ianbicking.org/blog/2014/09/professional-transitions.html"&gt;time ran out&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Anyway, that&amp;#8217;s where I am now.  No longer a language partisan, unclear of what community I am even participating in, I am less sure how to identify and self-identify myself.  How do I describe myself now? Even as I find my technical footing I am still adrift.  And so it&amp;#8217;s hard to say goodbye.  So instead I&amp;#8217;ll say, Pythonistas: until we meet again. Maybe I&amp;#8217;ll meet some of you over&amp;nbsp;here.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>The Order of Payment And Consumption Drives Content</title><link href="https://www.ianbicking.org/blog/2013/11/order-of-payment-drives-content.html" rel="alternate"></link><published>2013-11-04T00:00:00-06:00</published><updated>2013-11-04T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2013-11-04:/blog/2013/11/order-of-payment-drives-content.html</id><summary type="html">&lt;p&gt;Economics: &lt;strong&gt;incentives incentives incentives&lt;/strong&gt;. I don’t know if I quite buy it, but it’s still a good lens for understanding why the market contains what it&amp;nbsp;does.&lt;/p&gt;
&lt;p&gt;I was reminded of those incentives when reading &lt;a href="http://betabeat.com/2013/05/the-jenna-marbles-paradox-why-are-youtube-videos-so-terrible/"&gt;&lt;em&gt;The Jenna Marbles Paradox: Why Are YouTube Videos So Terrible?&lt;/em&gt;&lt;/a&gt; The basic premise …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Economics: &lt;strong&gt;incentives incentives incentives&lt;/strong&gt;. I don’t know if I quite buy it, but it’s still a good lens for understanding why the market contains what it&amp;nbsp;does.&lt;/p&gt;
&lt;p&gt;I was reminded of those incentives when reading &lt;a href="http://betabeat.com/2013/05/the-jenna-marbles-paradox-why-are-youtube-videos-so-terrible/"&gt;&lt;em&gt;The Jenna Marbles Paradox: Why Are YouTube Videos So Terrible?&lt;/em&gt;&lt;/a&gt; The basic premise of the article is that the most popular YouTube channels are low production and generally low quality, that YouTube is not moving towards professionalized quality media, but that maybe with subscription services or other techniques we actually could get quality online&amp;nbsp;media.&lt;/p&gt;
&lt;p&gt;There’s other examples to put into the mix: commercial &lt;span class="caps"&gt;TV&lt;/span&gt; drama seems to be getting a lot better. Commercial &lt;span class="caps"&gt;TV&lt;/span&gt; news is terrible. Other commercial news is all over the place, and is in financial flux. There’s good movies, but there’s also a strange number of really bad but expensive movies (with budgets that would seem to have enough room to pay for decent writing). Public Radio frequently feigns disaster, but is actually doing pretty well financially and provides lots of quality news. There’s a few quality magazines, but there’s a large swathe of broad-interest magazines with incredibly terrible content, bordering on anti-informative. And blogs don’t get any respect, despite still being the kicking off point for a lot of online discussion. Online there seems to be a constant draw towards shorter and lower-investment&amp;nbsp;content.&lt;/p&gt;
&lt;p&gt;The order in which you pay for things changes the incentives in media creation quite a bit. Some&amp;nbsp;examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Movies&lt;/strong&gt;: you pay for movies up-front, so even a movie that people don’t enjoy can do well if people &lt;em&gt;think&lt;/em&gt; they will enjoy&amp;nbsp;it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Public Radio&lt;/strong&gt;: you pay for Public Radio entirely after you receive the media. Like any media Public Radio has to attract people, but it’s more important to leave the audience feeling satisfied when they are done listening — and better to forgo a listener than lead them to listen to something they won’t&amp;nbsp;enjoy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TV&lt;/span&gt; ads&lt;/strong&gt;: &lt;span class="caps"&gt;TV&lt;/span&gt; ad revenue comes from keeping you hanging on. They have to draw you up to and through the ads. It should be continually&amp;nbsp;enticing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Online ads&lt;/strong&gt;: online ad revenue is more accidental: they need your eyes on the screen, and ultimately to get a click-through you need to actually be done with the content&amp;nbsp;itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Online attention&lt;/strong&gt;: in &lt;span class="caps"&gt;TV&lt;/span&gt; they want to pull you through the commercial break, but online the effort is to pull you to the next piece of content. Unlike a &lt;span class="caps"&gt;TV&lt;/span&gt; channel, online there’s a sort of attention market where people will freely pass their audience on to other outlets. (From the perspective of &lt;strong&gt;4&lt;/strong&gt; there’s actually a benefit to encouraging people to move on from your&amp;nbsp;content.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TV&lt;/span&gt; subscription&lt;/strong&gt;: &lt;span class="caps"&gt;TV&lt;/span&gt; subscription revenue (cable, premium channels) accumulates during the experience: over the course of weeks and months by people who choose to stay subscribed. But &lt;span class="caps"&gt;TV&lt;/span&gt; subscriptions are generally bundled, creating an incentive to simply &lt;a href="http://stratechery.com/2013/the-cord-cutting-fantasy/"&gt;stay in the bundle&lt;/a&gt; rather than to give the consumer direct value (though premium channels like &lt;span class="caps"&gt;HBO&lt;/span&gt; are unbundled, to noticeable&amp;nbsp;effect).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Music&lt;/strong&gt;: music used to be paid for up-front when you bought the album, except the hits which were paid for on the radio with ads. Now I don’t even know how it’s paid&amp;nbsp;for.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These different models help me make sense of why these different mediums produce different results — and of course media producers adapt to the incentives, but consumers also&amp;nbsp;adapt.&lt;/p&gt;
&lt;p&gt;For instance, the trend towards ever-shorter content online. We see this in the rise of &lt;a href="http://www.quickmeme.com/"&gt;meme photos&lt;/a&gt;, the &lt;span class="caps"&gt;GIF&lt;/span&gt; animation (YouTube is too high of a commitment!), or apps like &lt;a href="https://vine.co/"&gt;Vine&lt;/a&gt;, or further back in Twitter itself and many other social networks. (My personal preference for &lt;a href="https://google.com/+IanBicking"&gt;Google+&lt;/a&gt; is mostly my own reaction to this trend.) In some ways this can be seen as an appeal to our more base desires: quick fulfillment, the primitive and reflexively positive emotional response to things like cute cat photos, the ability to fully consume a piece of media with the least investment. But I also think it’s a response to the media that the online ad model has incentivized: online ads reward content creators for eyes, and don’t care much if the eyes were earned or manipulated onto the site. Perhaps the manipulated viewer is even more valued. And so as consumers we protect ourselves from investing time in bad media by investing the least time and attention possible. Rational responses become habits, so I don’t know how easy it would be to steer ourselves in a different direction, but I also don’t think the short attention span of the internet consumer has revealed a Truth About&amp;nbsp;Humanity.&lt;/p&gt;
&lt;p&gt;I struggle to be my best self. We all do, which is why I don’t want to blame the Stupid Masses for any of this. I see in the economy of media the product of individual &lt;em&gt;attempts&lt;/em&gt; to be our best selves multiplied out a billion times. And in most of the complaints about the state of the media I see an underlying critique that it’s not helping us be who we should be. But I am wary of moralizing too much, that we should target the media we think should exist, or should be more popular. Art informs and improves us just as exposition does, but you can’t know where art will emerge, or even what it is. For instance, this face has become part of my own visual language, my own internal&amp;nbsp;monologues:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="/static/media/okay.jpg"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;it’s a bit of unexpected art that has emerged from the&amp;nbsp;internet.&lt;/p&gt;
&lt;p&gt;So I want a market. I don’t want to presuppose what good media is, but I still want a well-functioning market, and in many mediums the market seems sadly&amp;nbsp;dysfunctional.&lt;/p&gt;
&lt;h2&gt;A More Ideal&amp;nbsp;Market?&lt;/h2&gt;
&lt;p&gt;The best market to me would be one where you pay after or during the media experience. That disincentives titillation, encourages material that is good on reflection. It leaves open the possibility of surprising the audience, but doesn’t let you cheat the&amp;nbsp;audience.&lt;/p&gt;
&lt;p&gt;Public Radio is maybe the best example, but not the best example you could hope for. Public &lt;span class="caps"&gt;TV&lt;/span&gt; doesn’t seem to be able to use that voluntary payment model to the same effect, maybe because voluntary payments only work for cheap mediums; or probably for other reasons too, like kids don’t have the income to donate in response to enjoying Sesame&amp;nbsp;Street.&lt;/p&gt;
&lt;p&gt;Online I’d rather see a kind of micropayment framework. But it’s complicated. In-app payments as we currently see them in mobile apps are everything I don’t want from micropayments, they are manipulative and often degrade the thing you are paying for.  They feel more like the Home Shopping Network: viable only because there is a small group of people who cannot put rational limits on their spending. These details matter a great deal — each detail affects the incentives and directs the very kind of media we will&amp;nbsp;see.&lt;/p&gt;
&lt;p&gt;Here’s my initial sense of what a good system might look&amp;nbsp;like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;All payments should be “voluntary” &lt;/strong&gt; — which could mean all payments have an opt-out option, i.e., easy&amp;nbsp;refunds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;We shouldn&amp;#8217;t require explicit opt-in for each form of media&lt;/strong&gt;; the default should be to pay something when you consume some piece of media. Otherwise it’s just public media, and public media doesn’t work for lots of kinds of content, and relies on consumers associating their identity with the media outlet, in a way that doesn’t scale up to the diversity of outlets on the internet. There are many sites that I visit infrequently (sometimes only once) that have quality content but which I don’t identify with and wouldn’t subscribe to nor feel inclined to pledge&amp;nbsp;towards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It&amp;#8217;s okay to require the &lt;em&gt;possibility&lt;/em&gt; of payment&lt;/strong&gt;, rejecting users who don’t show any willingness to pay, or to adjust content like adding more ads if you don’t demonstrate a willingness to&amp;nbsp;pay.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Payments shouldn&amp;#8217;t be in exchange for removing ads&lt;/strong&gt;. Asking for ad removal is a weird kind of ultimatum, because the media outlet has to alienate advertisers for an unknown payment. Paying for no ads is a way of telling your advertisers that you’ve actively selected a group of freeloaders to view their ads. And most people are okay with &lt;a href="https://adblockplus.org/en/acceptable-ads"&gt;reasonable ads&lt;/a&gt;. That said, users should feel free to deny payment if the ads are too&amp;nbsp;obtrusive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pricing is challenging, but worth figuring out&lt;/strong&gt;. Does the content provider indicate the suggested price? How does a consumer make (and indicate) the decision that content was valuable, but not that valuable? Building in &lt;a href="http://en.wikipedia.org/wiki/Price_discrimination"&gt;price discrimination&lt;/a&gt; is a positive feature, I’d claim it’s even essential. I have no idea how to do&amp;nbsp;it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The last item is the reason why some form of federation seems necessary, simply to allow for different approaches to pricing. For instance I could imagine a micropayment provider targeted towards teens, and it’s never going to give content providers a lot of per-view income, because teens are poor and because kids just don’t pay their own way because they are kids. But an honest attempt to charge each person according to the value they receive is the essence of price discrimination (sometimes it is explained in terms of &lt;em&gt;what the consumer is willing to pay&lt;/em&gt;, but I like to think about it in terms of value, as $1 has a different value to me than to someone&amp;nbsp;else).&lt;/p&gt;
&lt;p&gt;For music I could imagine individuals having their own &lt;span class="caps"&gt;ASCAP&lt;/span&gt; licenses, with services reporting in on actual listening behavior. Well, not literally &lt;span class="caps"&gt;ASCAP&lt;/span&gt; because they don’t seem &lt;a href="http://www.woodpecker.com/writing/essays/royalty-politics.html"&gt;trustworthy&lt;/a&gt;, but they embody the basic concept of money distribution according to actual consumption, even if they may not implement it&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;Right now &lt;a href="http://flattr.com/"&gt;Flattr&lt;/a&gt; is the most mature microdonation platform. Or maybe it’s the last one standing—I’m not sure how to talk about a category that has been all aspiration and little success for so many years. But Flattr is not really a way of paying for content, only for giving tips. The very existence of a &lt;a href="http://flattr.com/catalog/"&gt;Flattr catalog&lt;/a&gt; feels like&amp;nbsp;defeat.&lt;/p&gt;
&lt;p&gt;The potential for a good payment system is bigger than just keeping people on the web, or keeping people from going bankrupt; the payments shape the product, for good and bad, and maybe we can yet shape them for&amp;nbsp;good.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Why Isn’t Programming Futuristic</title><link href="https://www.ianbicking.org/blog/2013/10/why-isnt-programming-futuristic.html" rel="alternate"></link><published>2013-10-23T00:00:00-05:00</published><updated>2013-10-23T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2013-10-23:/blog/2013/10/why-isnt-programming-futuristic.html</id><summary type="html">&lt;p&gt;If you think someone is asking a rhetorical question, it is usually most interesting to treat it as though it is a legitimate question. Especially if we&amp;#8217;re talking about something &lt;em&gt;hard&lt;/em&gt; &amp;#8212; driving down to underlying assumptions through this questioning process is&amp;nbsp;interesting.&lt;/p&gt;
&lt;p&gt;Applying this to Bret Victor&amp;#8217;s talk …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you think someone is asking a rhetorical question, it is usually most interesting to treat it as though it is a legitimate question. Especially if we&amp;#8217;re talking about something &lt;em&gt;hard&lt;/em&gt; &amp;#8212; driving down to underlying assumptions through this questioning process is&amp;nbsp;interesting.&lt;/p&gt;
&lt;p&gt;Applying this to Bret Victor&amp;#8217;s talk &lt;a href="http://worrydream.com/dbx/"&gt;&amp;#8220;The Future Of Programming&amp;#8221;&lt;/a&gt; is useful. Why are we living with the programming technology of the 70s, when in the 70s there was so much excitement and expectation that we would create something better?  Bret&amp;#8217;s talk has an implied challenge: what happened to the&amp;nbsp;future?&lt;/p&gt;
&lt;p&gt;I have an affection for the thinking of the 60s and 70s that I also see in Bret&amp;#8217;s talk.  There was a distinct tone in that decade across thinking in computer science, politics, culture&amp;#8230; and even though I usually disagree with the specific ideas, I love the way in which those ideas were discussed and presented.  Optimistic, adventurous, often intimate.  To the degree Bret&amp;#8217;s talk was a call for that flavor of thought, I heartily agree.  But I wonder that the optimism of this age was in part built on its ambition &amp;#8212; when you imagine things you know you cannot make (at least not &lt;em&gt;yet&lt;/em&gt;) you avoid confronting the tedium and problems of an actual implementation.  Looking back on the futurism of that time it seems defined more by its overambition than its&amp;nbsp;success.&lt;/p&gt;
&lt;p&gt;But it would be unfair to engage so shallowly with just a comparison of the tones of yesteryear and today.  Bret identifies four things that it is implied we should at least &lt;em&gt;remember&lt;/em&gt;, and perhaps that we should &lt;em&gt;pursue&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;procedures -&amp;gt; goals and&amp;nbsp;constraints&lt;/h2&gt;
&lt;p&gt;When you first read about Prolog, did it excite you?  It certainly excited me.  A whole programming language built on &lt;em&gt;magic&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But what then?  It&amp;#8217;s magical, but you can&amp;#8217;t make anything from it! Problems are never provided to us in clean forms.  Phrasing problems in solvable terms is more effort than solving them, so instead we use shortcuts that achieve our functional and concrete goals without any high minded&amp;nbsp;&amp;#8220;solutions&amp;#8221;.&lt;/p&gt;
&lt;p&gt;I do think it could be argued we need more forms of expression in programming languages.  Regular expressions are pretty great, for all we complain about them.  Why don&amp;#8217;t languages typically include other kinds of powerful search&amp;nbsp;methods?&lt;/p&gt;
&lt;p&gt;When I say &amp;#8220;programming language&amp;#8221; I&amp;#8217;m not referring to special built-in syntax.  Python&amp;#8217;s regular expressions are better than Javascript&amp;#8217;s despite the fact Python has no special syntax and Javascript does.  But neither is able to search anything but&amp;nbsp;strings.&lt;/p&gt;
&lt;p&gt;We can implement new search techniques through libraries (and such libraries exist), but we can do more.  A programming language is &lt;em&gt;syntax&lt;/em&gt;, but it is also an &lt;em&gt;object model&lt;/em&gt;.  If a programming language includes general ways to traverse and interpret object models then we could see much more powerful general goal-oriented libraries.  &lt;span class="caps"&gt;LINQ&lt;/span&gt; is perhaps the best modern example of&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;To get there I think we need a couple&amp;nbsp;things:&lt;/p&gt;
&lt;h4&gt;Safe object&amp;nbsp;traversal&lt;/h4&gt;
&lt;p&gt;You need to be able to inspect and traverse objects, all objects.  In python for instance you can do &lt;code&gt;dir(obj)&lt;/code&gt; or &lt;code&gt;getattr(obj, attr)&lt;/code&gt;, but those are incomplete and unsafe.  Pointing code at an arbitrary object graph and inviting it to inspect things based on this is somewhat dangerous.  Using &lt;code&gt;obj.__dict__&lt;/code&gt; is actually safer, but incomplete in its own&amp;nbsp;ways.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; is compelling in this case because it is highly constrained.  It can&amp;#8217;t contain methods, all its attributes are concrete and enumerable. It makes something like &lt;a href="http://jsonselect.org/"&gt;JSONSelect&lt;/a&gt; reasonable.  But who wants to constrain themselves to large concrete &lt;span class="caps"&gt;JSON&lt;/span&gt; objects?  You don&amp;#8217;t have derivative properties of objects, polymorphic tests, lazy loading of data,&amp;nbsp;etc.&lt;/p&gt;
&lt;p&gt;To traverse objects &lt;em&gt;safely&lt;/em&gt; and &lt;em&gt;completely&lt;/em&gt; you need to be able enumerate aspects of the object.  Enumerate its properties, while also being certain there are no side effects to getting data, and identifying methods that can be safely&amp;nbsp;called.&lt;/p&gt;
&lt;h4&gt;Ubiquitous object extensions to support&amp;nbsp;querying&lt;/h4&gt;
&lt;p&gt;You can accomplish some stuff with traversal, giving you a baseline so that domain-specific portions of the code can be traversed, but there are always cases when you need to customize that traversal.  For instance, any object that supports a &amp;#8220;method missing&amp;#8221; style override (e.g., &lt;code&gt;__getattr__&lt;/code&gt; in Python) needs a way to enumerate the actual properties.  And if they are innumerable then &lt;em&gt;still&lt;/em&gt; you must enumerate&amp;nbsp;something.&lt;/p&gt;
&lt;p&gt;There also must be a culture where proper extensions are regularly provided on objects.  Powerful tools are built on powerful paradigms, and &lt;em&gt;enabling&lt;/em&gt; a paradigm isn&amp;#8217;t the same thing as actually implementing it across a fully developed programming&amp;nbsp;environment.&lt;/p&gt;
&lt;h4&gt;Code&amp;nbsp;transport&lt;/h4&gt;
&lt;p&gt;Most things aren&amp;#8217;t genuinely innumerable.  It&amp;#8217;s more likely you can&amp;#8217;t enumerate an object because the source of truth is outside the program.  If you want to access a database of users in your system, you can&amp;#8217;t load it all into memory and query it from&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;In the past, to the degree I&amp;#8217;ve done anything like this, the transportation of code is extremely ad hoc.  It involves doing things like translating Python to &lt;span class="caps"&gt;SQL&lt;/span&gt;.  To what degree I understand &lt;span class="caps"&gt;LINQ&lt;/span&gt;, I think it also does this, though maybe with the ability to separate in-process from out-of-process portions of a single&amp;nbsp;query.&lt;/p&gt;
&lt;p&gt;These limitations came to mind when I was reading a recent &lt;a href="http://www.rackspace.com/blog/zerovm-smaller-lighter-faster/"&gt;announcement about ZeroVM&lt;/a&gt; where they talk about &amp;#8220;moving the app to the data&amp;#8221; instead of the traditional task of moving the data to the app.  And the degree we are dealing with &amp;#8220;objects&amp;#8221; &amp;#8212; data and methods combined &amp;#8212; we really &lt;em&gt;can&amp;#8217;t&lt;/em&gt; move the data to the app, because it&amp;#8217;s all apps.  The solution alluded to with ZeroVM is that running code can be transported to other environments, that this is reliable and deterministic, that code runs with limited defined interfaces to its environment, and that this is all done efficiently.  Maybe there is a solution&amp;nbsp;there?&lt;/p&gt;
&lt;h4&gt;Combining it&amp;nbsp;all&lt;/h4&gt;
&lt;p&gt;I struggle somewhat to imagine what all these things could be used for together.  Would my code become much more declarative?  I find declarative frameworks initially exciting but usually ultimately annoying.  Maybe with all the pieces in place it would stop being annoying?  I am skeptical.  I suspect the very idea of a &amp;#8220;program&amp;#8221; would change in the face of this.  And I&amp;#8217;m not sure we want it to&amp;nbsp;change.&lt;/p&gt;
&lt;h2&gt;text dump -&amp;gt; spatial&amp;nbsp;representations&lt;/h2&gt;
&lt;p&gt;Why, after all this time, are we still stuck with &lt;span class="caps"&gt;ASCII&lt;/span&gt;&amp;nbsp;programs?&lt;/p&gt;
&lt;p&gt;For one answer: recall Microsoft Word.  Have you ever found yourself &amp;#8220;debugging&amp;#8221; a Word document?  &amp;#8220;Why won&amp;#8217;t this paragraph align with all the other paragraphs?!?&amp;#8221;  There is hidden structure to a Word document.  When composing with Word you do not have access to that hidden structure.  You are only aware of parts of it, and some aspects may only reveal themselves in certain circumstances.  This sort of thing would not do for a program &amp;#8212; it is enough that we must debug what the program &lt;em&gt;does&lt;/em&gt;, a richer representation of the program means we would have to debug &lt;em&gt;the expression of the program itself&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You might counter: we must simply make an unambiguous and transparent spacial representation of a program.  And yes, without that constraint we are doomed.  But then what might we create?  On the large scale we might organize large modules of code using something besides files. And we do see some work like this, IDEs present code in ways that aren&amp;#8217;t tied to text dumps.  But it&amp;#8217;s not very interesting, because very little time is spent manipulating large modules of code.  When we rename and move files around it&amp;#8217;s a relatively small task, and one that requires little debugging &amp;#8212; the paths either work or they don&amp;#8217;t. There&amp;#8217;s room for improvement, but nothing&amp;nbsp;revolutionary.&lt;/p&gt;
&lt;p&gt;What would be interesting is new representations of code at the more detailed level.  For that level we want clear, compact, composable representations.  But you know what?  We have spent millenia developing a clear, compact, composable representation of human thought.  And it fits in &lt;span class="caps"&gt;ASCII&lt;/span&gt;, and flows from left to right and down the page line by&amp;nbsp;line.&lt;/p&gt;
&lt;p&gt;As an aside: why at least do we not allow meaningless stylistic annotations of source code?  Why can&amp;#8217;t I make code italic or bold? Here we might blame a lowest-common-denominator of tools (which is a topic of its own), but also programmers avoid meaningless annotations. Because there&amp;#8217;s no actual semantic meaning to bold text, or colored text, it would &lt;em&gt;imply&lt;/em&gt; some intent without actually enforcing that intent.  We do allow implied intents &amp;#8212; non-significant indentation and whitespace, unneeded parenthesis, and most of all comments &amp;#8212; but it can lead to great hand-wringing, they are each an opportunity to mislead&amp;nbsp;readers.&lt;/p&gt;
&lt;p&gt;Still, this is too pessimistic.  What could we do?  I don&amp;#8217;t think we need to make a strong shift away from &lt;span class="caps"&gt;ASCII&lt;/span&gt; files on disk.  Ultimately anything we do needs to be serialized, and that serialization needs to be debuggable, and &lt;span class="caps"&gt;ASCII&lt;/span&gt; files work fine on both counts.  For serialization we could use &lt;span class="caps"&gt;XML&lt;/span&gt; or something with clear exposed structure, but we don&amp;#8217;t need to: every programming language can be unambiguously parsed into something, usually an &lt;a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;&lt;span class="caps"&gt;AST&lt;/span&gt;&lt;/a&gt;, which is typically exactly what we&amp;#8217;d expect from an &lt;span class="caps"&gt;XML&lt;/span&gt;&amp;nbsp;serialization.&lt;/p&gt;
&lt;p&gt;But the interaction between tools and source is crude.  The best we&amp;#8217;ve managed at any scale is color&amp;nbsp;highlighting.&lt;/p&gt;
&lt;h4&gt;Provenance&lt;/h4&gt;
&lt;p&gt;This is perhaps a personal pet concern of mine, maybe a stretch to connect to this topic, but I see it everywhere.  We need general ways to track artifacts back to their&amp;nbsp;source.&lt;/p&gt;
&lt;p&gt;An recent improvement in provenance is the &lt;a href="http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/"&gt;source map&lt;/a&gt;, where you can compile something to Javascript and the browser debugging tools can trace errors back to their original (pre-compilation) source.  But that&amp;#8217;s just one example &amp;#8212; for example it doesn&amp;#8217;t apply to &lt;span class="caps"&gt;HTML&lt;/span&gt; &amp;#8212; and it&amp;#8217;s only supported by a couple&amp;nbsp;clients.&lt;/p&gt;
&lt;p&gt;With more extensive support for provenance you&amp;#8217;d have more potential for alternative tools to manipulate source.  With support for provenance of data you could go further&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;I think the typical vision of a &amp;#8220;spatial representation&amp;#8221; of source code is very modernist.  It imagines a new, complete, better way of manipulating source.  Then we get annoyed no one has come up with the new, complete, better way&amp;#8230; but it doesn&amp;#8217;t exist, not as a single&amp;nbsp;thing.&lt;/p&gt;
&lt;h4&gt;Better, more accessible&amp;nbsp;ASTs&lt;/h4&gt;
&lt;p&gt;We&amp;#8217;re just now starting to see complete ASTs being generated for languages.  Too often comments or other semantically insignificant items were left out, and even producing an &lt;span class="caps"&gt;AST&lt;/span&gt; is something many languages didn&amp;#8217;t do for much of their&amp;nbsp;history.&lt;/p&gt;
&lt;p&gt;So real progress is being made.  We need to be fully ready for the &lt;span class="caps"&gt;AST&lt;/span&gt; to be the true representation of the program.  That is, parsing, changing the &lt;span class="caps"&gt;AST&lt;/span&gt;, and serializing that &lt;span class="caps"&gt;AST&lt;/span&gt; should always be an acceptable step in development.  Sometimes this means better ASTs (like ones that include comments), sometimes this means developers have to suppress their individual preferences.  The good reception I&amp;#8217;ve seen from developers of &lt;a href="http://golang.org/cmd/gofmt/"&gt;gofmt&lt;/a&gt; (which normalizes Go syntax, is opinionated, and is widely used) makes me think this is more acceptable than people&amp;nbsp;think.&lt;/p&gt;
&lt;p&gt;Of course each langauge usually keeps the &lt;span class="caps"&gt;AST&lt;/span&gt; in memory, and tooling has to be very language-specific.  Maybe hoping for language agnosticism is too much.  But some standard protocol would certainly be nice &amp;#8212; probably tools communicating via sockets with some language-specific parser.  But then to what end?  Each language&amp;#8217;s &lt;span class="caps"&gt;AST&lt;/span&gt; is distinctive, and should be because that&amp;#8217;s why we have different languages.  But a generic tool needs a generic &lt;span class="caps"&gt;AST&lt;/span&gt;.&lt;/p&gt;
&lt;h2&gt;coding -&amp;gt; direct manipulation of&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;On its face this is kind of an odd complaint.  We have lots of direct manipulation of data.  Photoshop is a pretty incredible tool. And there are lots similar tools that allow for the direct manipulation of&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;We need to &amp;#8220;code&amp;#8221; when we need to handle data in an abstracted way. You can draw &lt;em&gt;one&lt;/em&gt; picture with direct manipulation, but defining something that can be rendered into a picture in a variety of contexts is more difficult.  (Though even that has been achieved through various modeling&amp;nbsp;tools.)&lt;/p&gt;
&lt;p&gt;How can you represent a loop or a variable in non-textual tools?  How do you draw a picture where one line is of length &lt;code&gt;x&lt;/code&gt;, while another line is of length &lt;code&gt;x*2&lt;/code&gt;, and another line is of length &lt;code&gt;5&lt;/code&gt;?  What are the determining constraints that resolve the picture into something concrete for a given value of &lt;code&gt;x&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;This question is what Bret seems to be struggling with through &lt;a href="http://worrydream.com/#!/StopDrawingDeadFish"&gt;Stop Drawing Dead Fish&lt;/a&gt; or &lt;a href="http://worrydream.com/LearnableProgramming/"&gt;Learnable Programming&lt;/a&gt;. We haven&amp;#8217;t figured it out, and they didn&amp;#8217;t have any more of a clue about it in the 70s either.  I wish Bret&amp;nbsp;luck!&lt;/p&gt;
&lt;p&gt;It does bring graphical programming languages to mind.  Oddly these languages seem as focused on symbolic manipulation as textual programming languages are.  It seems to me that a graphical programming languages need to more fully embrace the graphics, and embrace a &lt;em&gt;result&lt;/em&gt; that current programming languages are not well suited to provide.  It shouldn&amp;#8217;t just be &amp;#8220;easier&amp;nbsp;programming&amp;#8221;.&lt;/p&gt;
&lt;h2&gt;sequential -&amp;gt;&amp;nbsp;parallel&lt;/h2&gt;
&lt;p&gt;Parallel code can be really hard to write, debug, and understand. Sequential code is pretty&amp;nbsp;nice.&lt;/p&gt;
&lt;p&gt;If this is an admonition that we should all just do more work to achieve parallelism, then it&amp;#8217;s not very compelling.  It&amp;#8217;s a reasonably compromise that we let a computer waste cycles so that developers can write faster and better and more&amp;nbsp;reliably.&lt;/p&gt;
&lt;p&gt;As time goes on the benefit of parallelism increases.  But as time goes on the relative value of developer time to processor time also increases, because processing gets cheaper.  The real benefit of parallelism is doing things we couldn&amp;#8217;t do before. It can feed into greater ubuquity of computing.  The admonitions imply some austere future where we &lt;em&gt;must&lt;/em&gt; do things in parallel, and that won&amp;#8217;t&amp;nbsp;come.&lt;/p&gt;
&lt;p&gt;But I&amp;#8217;m just pontificating.  My only real thought is that while there is an emphasis on declarative programming to enable parallelism, I think we should have an equal emphasis on deterministic programming. These two things are in some ways very similar, but I think &amp;#8220;deterministic&amp;#8221; is a more expansive idea that can encompass more programming techniques.  You could also say that &amp;#8220;deterministic&amp;#8221; is the same thing as &amp;#8220;functional programming&amp;#8221;, but that term also has a lot of unnecessary baggage.  We want side effects, because we want code that affects things!  &lt;em&gt;Deterministic&lt;/em&gt; means we identify all inputs and effects.  Like the data flow analog of strict static&amp;nbsp;typing.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It is productive to get computers to do the things that computers are good at.  The implication of the talk is that in the past we saw some potential in computers that we&amp;#8217;ve lost.  But equally I think the mismatch between what we envisioned we&amp;#8217;d do with computers, and what we are doing with computers, is that back then we &lt;em&gt;didn&amp;#8217;t see&lt;/em&gt; all the things computers are good&amp;nbsp;at.&lt;/p&gt;
&lt;p&gt;The impact of computers has met or exceeded expectations.  It turns out computers are great for facilitating communication, and they are great at storing information, they can track history, facilitate transactions, and it&amp;#8217;s hardly necessary for me to enumerate the things we do with them.  And we shouldn&amp;#8217;t condemn developers for doing what is most impactful with the least effort.  But of course we must all, collectively and individually, determine what the most impactful &lt;em&gt;next&lt;/em&gt; thing is to&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;We can mine the past for some of that, there&amp;#8217;s good stuff there.  But we shouldn&amp;#8217;t get bummed out just because there&amp;#8217;s more things to think about.  Rather it&amp;#8217;s exciting to find new things, even in the&amp;nbsp;past.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=6601748"&gt;Comments on Hacker&amp;nbsp;News&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>The overuse of functions</title><link href="https://www.ianbicking.org/blog/2013/06/overuse-of-functions.html" rel="alternate"></link><published>2013-06-11T00:00:00-05:00</published><updated>2013-06-11T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2013-06-11:/blog/2013/06/overuse-of-functions.html</id><summary type="html">&lt;p&gt;A programming quandry (related to &lt;a href="https://plus.google.com/u/0/+IanBicking/posts/ipAD1j3QNT1"&gt;some thoughts I&amp;#8217;ve had on locality&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;The prevailing wisdom says that you should keep your functions small and concise, refactoring and extracting functions as necessary.  But this hurts the locality of expectations that I have been thinking about.&amp;nbsp;Consider:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUserStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A programming quandry (related to &lt;a href="https://plus.google.com/u/0/+IanBicking/posts/ipAD1j3QNT1"&gt;some thoughts I&amp;#8217;ve had on locality&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;The prevailing wisdom says that you should keep your functions small and concise, refactoring and extracting functions as necessary.  But this hurts the locality of expectations that I have been thinking about.&amp;nbsp;Consider:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUserStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;active&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;li /&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#userlist&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;user-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#user-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Code like this is generally considered to be terrible – there&amp;#8217;s logic for users and their status, mixed in with a bunch of very specific &lt;span class="caps"&gt;UI&lt;/span&gt;-related code.  (Which is all tied to a &lt;span class="caps"&gt;DOM&lt;/span&gt; state that is defined somewhere else entirely &amp;#8212; but I&amp;nbsp;digress.)&lt;/p&gt;
&lt;p&gt;So a typical refactoring would&amp;nbsp;be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUserStatus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;active&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;displayUserInList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;removeUserFromList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the obvious definition of &lt;code&gt;displayUserInList()&lt;/code&gt; and &lt;code&gt;removeUserFromList()&lt;/code&gt;.  But the first approach had certain invariants that the second does not.  Assuming you don&amp;#8217;t mess with the &lt;span class="caps"&gt;UI&lt;/span&gt;/&lt;span class="caps"&gt;DOM&lt;/span&gt; directly, and assuming that &lt;code&gt;updateUserStatus()&lt;/code&gt; is called when it needs to be called, the user will be in the list or not based strictly on the value of &lt;code&gt;user.status&lt;/code&gt;. After refactoring there are functions that could be called in other contexts (e.g., &lt;code&gt;displayUserInList()&lt;/code&gt;). You can look at the code and see that particular things happen when &lt;code&gt;updateUserStatus()&lt;/code&gt; is called, but it&amp;#8217;s not as easy to determine what is going to happen when inspect the code from the bottom up.  For instance, you want to understand why things end up in &lt;code&gt;&amp;lt;ul id="userlist"&amp;gt;&amp;lt;/ul&amp;gt;&lt;/code&gt; &amp;#8212; you search for &lt;code&gt;#userlist&lt;/code&gt; but you now get two functions instead of one, and to understand the logic you have to trace that back to the calling function, and you have to wonder if now or in the future anyone else will call those&amp;nbsp;functions.&lt;/p&gt;
&lt;p&gt;The advantage of the first function is that blocks of code are strict. You execute from the top to the bottom, with clear control structures. When &lt;span class="caps"&gt;GOTO&lt;/span&gt; existed you couldn&amp;#8217;t reason so well, but we&amp;#8217;ve gotten rid of that!  (Of course there are still other exceptions.)  It&amp;#8217;s not entirely clear what intention drives the refactoring (besides adherence to conventional standards of code beauty), but it&amp;#8217;s probably more about code organization than about making the control flow more flexible. Extracting those functions means that you now have the power to make the &lt;span class="caps"&gt;UI&lt;/span&gt; inconsistent with the model, and that hardly seems like a&amp;nbsp;feature.&lt;/p&gt;
&lt;p&gt;And I have to wonder: are some of these basic patterns of &amp;#8220;good&amp;#8221; code there because we have poor tools for code organization? We express too many things with functions and methods and classes (and perhaps modules) because that&amp;#8217;s all we have.  But those are full of unintended semantic&amp;nbsp;meaning.&lt;/p&gt;
&lt;p&gt;Anyone have examples of languages that have found novel ways of keeping code&amp;nbsp;organized?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://plus.google.com/u/0/+IanBicking/posts/ajbi8QFDWD1"&gt;(Also there are comments on&amp;nbsp;G+)&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>New Blog Software</title><link href="https://www.ianbicking.org/blog/2013/03/new-blog-software.html" rel="alternate"></link><published>2013-03-04T00:00:00-06:00</published><updated>2013-03-04T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:www.ianbicking.org,2013-03-04:/blog/2013/03/new-blog-software.html</id><summary type="html">&lt;p&gt;Since I want to start blogging again, of &lt;em&gt;course&lt;/em&gt; I have to also change my software.  That&amp;#8217;s just out these things&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;And to start a new blog I need at least one post, otherwise things are breaky.  So of course the first post must be the announcement I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since I want to start blogging again, of &lt;em&gt;course&lt;/em&gt; I have to also change my software.  That&amp;#8217;s just out these things&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;And to start a new blog I need at least one post, otherwise things are breaky.  So of course the first post must be the announcement I am changing my&amp;nbsp;software.&lt;/p&gt;
&lt;p&gt;I hope that explains this post; it is not intended to actually be of interest to you, the&amp;nbsp;reader.&lt;/p&gt;</content><category term="misc"></category></entry></feed>