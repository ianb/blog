<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ian Bicking: a blog - mozilla</title><link href="https://ianbicking.org/" rel="alternate"></link><link href="https://ianbicking.org/feeds/mozilla.atom.xml" rel="self"></link><id>https://ianbicking.org/</id><updated>2015-12-29T00:00:00-06:00</updated><entry><title>TogetherJS as a Postmodern Programming Tool</title><link href="https://ianbicking.org/blog/2013/10/togetherjs-a-postmodern-tool.html" rel="alternate"></link><published>2013-10-31T00:00:00-05:00</published><updated>2013-10-31T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2013-10-31:/blog/2013/10/togetherjs-a-postmodern-tool.html</id><summary type="html">&lt;p&gt;One of the papers that I continue to refer to in my own thinking about technology is &lt;a href="http://www.mcs.vuw.ac.nz/comp/Publications/CS-TR-02-9.abs.html"&gt;Notes on Postmodern Programming&lt;/a&gt;. Martin Fowler has a &lt;a href="http://martinfowler.com/bliki/PostModernProgramming.html"&gt;short summary&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The essence of it (at least for me) is that software development has long had a modernist viewpoint that admirable software systems are …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;One of the papers that I continue to refer to in my own thinking about technology is &lt;a href="http://www.mcs.vuw.ac.nz/comp/Publications/CS-TR-02-9.abs.html"&gt;Notes on Postmodern Programming&lt;/a&gt;. Martin Fowler has a &lt;a href="http://martinfowler.com/bliki/PostModernProgramming.html"&gt;short summary&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The essence of it (at least for me) is that software development has long had a modernist viewpoint that admirable software systems are composed of uniform components, composed in a uniform and simple way. (Smalltalk and Lisp are good examples of this kind of thinking.) A post-modern view is that software is all sorts of different very different stuff glued together in all sorts of different ways (think Perl and Unix), and this style of software (big bucket of glue) isn&amp;#8217;t a bad&amp;nbsp;thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the built world I think of roads and rail as an interesting analog, roads as postmodern and rail as modern.  Rail has a lot of cool properties.  It&amp;#8217;s &lt;a href="http://www.csx.com/index.cfm/about-csx/projects-and-partnerships/fuel-efficiency/"&gt;really efficient&lt;/a&gt;, one driver can handle a hundred cars, you can feel confident about where the train will and won&amp;#8217;t go, and it can be a pretty smooth ride. But roads have some great properties too.  You can ride all kinds of vehicles down them.  It&amp;#8217;s easy to build a driveway to access a road. If someone stops on the road you can go around&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;Or another perspective: postmodern developments accept the world as it is, while modern developments imagine a new better world.  A cohesive modern technology can be great, completist, robust; and without those kinds of systems we couldn&amp;#8217;t build what we have, it would all fall down as the geometrically cumulative nature of failure and multiple components would doom our systems to constant collapse.  But modern systems are also more apt to fail during their development, to solve the wrong problem, to demand tolerances that are too low, or to be too&amp;nbsp;ambitious.&lt;/p&gt;
&lt;p&gt;During the design of &lt;a href="https://togetherjs.com"&gt;TogetherJS&lt;/a&gt; &amp;#8212; a realtime collaboration and co-browsing library &amp;#8212; I&amp;#8217;ve approached it as a postmodern&amp;nbsp;component.&lt;/p&gt;
&lt;p&gt;The basic integration for TogetherJS isn&amp;#8217;t an &lt;span class="caps"&gt;API&lt;/span&gt;, or a data model: it&amp;#8217;s the &lt;span class="caps"&gt;DOM&lt;/span&gt;.  It involves scanning the page, looking for changes and events that are the exposed artifacts an application can&amp;#8217;t hide even if it wanted&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a lot we can do with the standard &lt;span class="caps"&gt;DOM&lt;/span&gt;, but we aren&amp;#8217;t above integrating with other components.  We scan for &lt;a href="http://codemirror.net/"&gt;CodeMirror&lt;/a&gt; and &lt;a href="http://codemirror.net/"&gt;&lt;span class="caps"&gt;ACE&lt;/span&gt;&lt;/a&gt; editors by looking for the attributes they attach to elements. If you opt-in to YouTube support, we load their libraries to interact with Flash elements.  We can&amp;#8217;t support &lt;em&gt;everything&lt;/em&gt;, but we&amp;#8217;re not taking any principled stance on how much we&amp;#8217;re willing to poke directly into other project&amp;#8217;s&amp;nbsp;artifacts.&lt;/p&gt;
&lt;p&gt;From the perspective of code isolation, we try to insulate TogetherJS from the page.  There&amp;#8217;s only one exposed object (&lt;code&gt;TogetherJS&lt;/code&gt;), there is a specific set of methods on that (our public interface).  We bundle jQuery but do not use any version of jQuery already on the page, nor do we encourage anyone to use our version of jQuery.  We try to avoid getting caught up in any messiness of the host application, but we do not judge you for your&amp;nbsp;messiness.&lt;/p&gt;
&lt;p&gt;But we also expose TogetherJS.  You can import the modules, and we are not shy about exposing &amp;#8220;private&amp;#8221; parts of TogetherJS.  You can see all the messages that go back and forth between clients, regardless of what part of TogetherJS produces or consumes those&amp;nbsp;messages.&lt;/p&gt;
&lt;p&gt;This creates potential fragility, but we try to mitigate that by making it very easy make your own static, stable, frozen copy of the client code.  Once you get that working, it&amp;#8217;s working.  And this is why we work hard to keep the server as simple as possible.  Any smarts go in the client unless it is &lt;em&gt;absolutely&lt;/em&gt; necessary that it go in the server.  (Arguably our server is modernist in&amp;nbsp;design.)&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m not always sure whether to say &amp;#8220;I&amp;#8221; or &amp;#8220;we&amp;#8221; &amp;#8212; the architectural choices I&amp;#8217;m describing are things that we came to consensus on as a team.  But exactly &lt;em&gt;why&lt;/em&gt; we consensed on them I am not sure, I mostly know my own motivations for the&amp;nbsp;architecture.&lt;/p&gt;
&lt;p&gt;We have built TogetherJS with an eye towards the breadth of the web. We considered creating a collaborative editor (with some other special features), but we didn&amp;#8217;t really want to create a cool site, we wanted to create something that could magnify &lt;em&gt;other people&amp;#8217;s&lt;/em&gt; cool sites. What cool sites?  We didn&amp;#8217;t know!  There has and continues to be a tension among all of us in the team as to how generic this tool can or should be: do we want to create an awesome tool for education, or support, or collaboration, or presentation,&amp;nbsp;or&amp;#8230;?&lt;/p&gt;
&lt;p&gt;But we are not domain experts, and we have not created a domain-specific tool.  This itself is a tension I see on the web in general: developers create the best tools for the domain they understand, development.  Developing something like TogetherJS requires some considerable expertise in lots of technical areas (the &lt;span class="caps"&gt;DOM&lt;/span&gt;, browser security models, Javascript code organization, server integration, and so on).  The domain experts are experts in other things.  We want to empower those experts, and empower them to make tools, and not just use the tools that computer experts have made.  We hope TogetherJS can meet them&amp;nbsp;halfway.&lt;/p&gt;
&lt;p&gt;So we&amp;#8217;ve created a tool that does a bunch of stuff by default, and doesn&amp;#8217;t care too much about how you went about building your site or app.  With just a little integration you get lots of functionality.  I think it is relatively&amp;nbsp;hackable.&lt;/p&gt;
&lt;p&gt;But we also want to enable really good collaboration, not just okay default collaboration.  This is why we build ways to customize the tool, and we&amp;#8217;re always open to new ways to do that customization.  We also require integration for the client-side dynamic parts of your application, as you can&amp;#8217;t seamlessly make everything work.  You &lt;em&gt;kind of&lt;/em&gt; can make everything work (which I&amp;#8217;ll talk about below), but we want collaboration experience that is high-fidelity and&amp;nbsp;context-aware.&lt;/p&gt;
&lt;p&gt;Some examples where the context depends on the tools: you might want to let two people edit one document, but only one person can save it. You may want to allow two people to draw together, but simultaneously using different tools.  You might want to run a game where you score people separately&amp;#8230; or maybe you want to score them together.  You might want a save to fork a document to some personal space, or you might want to keep the two people in sync.  I could go on about the choices an application might encounter for a long&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;We also want something like progressive enhancement: you start out right away with something that works, and then improve upon that.  The tool itself serves as an introduction to the&amp;nbsp;tool.&lt;/p&gt;
&lt;h2&gt;Roads Not&amp;nbsp;Taken&lt;/h2&gt;
&lt;p&gt;Our basic task/intention with TogetherJS has been to enable real-time collaboration, co-browsing, co-presence.  Given that goal there are some two other viable approaches that I see, and that we didn&amp;#8217;t choose to pursue.  I&amp;#8217;d classify each as more modernist than what we&amp;#8217;ve&amp;nbsp;done.&lt;/p&gt;
&lt;h3&gt;The Realtime&amp;nbsp;Database&lt;/h3&gt;
&lt;p&gt;One path is to create a modernist realtime collaborative foundation for your application&amp;#8217;s data.  In this category is &lt;a href="http://firebase.com/"&gt;Firebase&lt;/a&gt;, &lt;a href="http://www.meteor.com/"&gt;Meteor&lt;/a&gt;, the &lt;a href="https://developers.google.com/drive/realtime/"&gt;Google Realtime &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;, or &lt;a href="http://sharejs.org/"&gt;ShareJS&lt;/a&gt; With these tools you synchronize your Javascript models across all clients, and the rest of the collaboration flows from&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;Obviously this approach this has a strong appeal, as the area is quite active.  The technique is robust, the tools can make a lot of guarantees about the models and consistency. To the degree you create reasonable deterministic predictable views on your models you can be assured of some consistency in the experience for all participants. Because the tools are low-level you can create a variety of collaboration experiences based on their core&amp;nbsp;functionality.&lt;/p&gt;
&lt;p&gt;There are three reasons we didn&amp;#8217;t want to take this&amp;nbsp;approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;These tools work best with greenfield development.  You have to make all your models aware of these external data and event sources. Some of the greatest benefits come when you rely on these tools for much of your&amp;nbsp;persistence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The tools don&amp;#8217;t apply very well to traditional websites. Sites that use &lt;span class="caps"&gt;HTTP&lt;/span&gt; requests and responses and dynamically generate &lt;span class="caps"&gt;HTML&lt;/span&gt; don&amp;#8217;t have browser-accessible models to be synchronized (they have server-side models, but those don&amp;#8217;t need to be synchronized and synchronizing them doesn&amp;#8217;t itself provide a realtime&amp;nbsp;experience).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Database tools are not &lt;span class="caps"&gt;UI&lt;/span&gt;-aware.  A good collaboration experience doesn&amp;#8217;t just involve synchronized state, it requires that people &lt;em&gt;understand&lt;/em&gt; what is happening, and understand when other people are invoking&amp;nbsp;actions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TogetherJS isn&amp;#8217;t incompatible with realtime databases.  In fact I think they should be very complementary: if your models are synchronized through a backend database you don&amp;#8217;t have to synchronize through TogetherJS, removing a lot of the more challenging integration work with Javascript-heavy&amp;nbsp;applications.&lt;/p&gt;
&lt;h3&gt;The&amp;nbsp;Screenshare&lt;/h3&gt;
&lt;p&gt;Traditional screensharing happens at the pixel level, but I&amp;#8217;m going to refer to something I&amp;#8217;ll call &lt;span class="caps"&gt;DOM&lt;/span&gt; Screensharing.  In this model the current/live state of the &lt;span class="caps"&gt;DOM&lt;/span&gt; is transferred from one browser to another.  I&amp;#8217;ll call the browser that starts the screensharing is the &amp;#8220;source&amp;#8221; and the browser that receives the &lt;span class="caps"&gt;DOM&lt;/span&gt; is the&amp;nbsp;&amp;#8220;viewer&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Examples of this are &lt;a href="http://usefirefly.com/"&gt;Firefly&lt;/a&gt; or a now-dormant project of mine, &lt;a href="https://github.com/mozilla/browsermirror"&gt;Browser Mirror&lt;/a&gt;.  I believe some other customer support tools also use this technique, but in general the technique seems fairly&amp;nbsp;obscure.&lt;/p&gt;
&lt;p&gt;In this approach you look at all the elements on the source browser, scrub out any scripts or event handlers, maybe scrub hidden elements (or don&amp;#8217;t).  Then you serialize this and send it to the viewer.  The page is then recreated at a new &lt;span class="caps"&gt;URL&lt;/span&gt;, visually hard to distinguish from the original page, but it&amp;#8217;s &amp;#8220;dead&amp;#8221;.  Like with video you send diffs to save effort.  You&amp;#8217;ll want special handling for form elements.  There are some other corner cases, but it&amp;#8217;s all relatively doable.  When I first got Browser Mirror working it surprised me how feasible it is, though it&amp;#8217;s certainly a 90/10 kind of&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;The benefit of this approach is that It Just Works in a lot of cases. It works behind authentication, works when pages are personalized, and interacts pretty well with dynamic pages (which ultimately display dynamic elements in the browser through the &lt;span class="caps"&gt;DOM&lt;/span&gt;).  It is robust and broadly applicable.  It is modernist while being almost the polar opposite of the realtime database&amp;nbsp;approach.&lt;/p&gt;
&lt;p&gt;Because the viewer has a dead version of the application, it&amp;#8217;s not exactly easy to interact with.  Form fields are easy.  Rich controls though are &lt;em&gt;really hard&lt;/em&gt;.  You &lt;em&gt;can&lt;/em&gt; pass events back to the source browser.  In Browser Mirror you could click on anything on the viewer, and that click would be transmitted back to the source browser.  This actually worked in lots of cases, though with a lot of latency.  In some cases it couldn&amp;#8217;t realistically work &amp;#8212; can you sync mousedown, mousemove, or hover events?  Unfortunately it&amp;#8217;s also not possible to detect the presence of listeners on the &lt;span class="caps"&gt;DOM&lt;/span&gt; to detect what events are interesting, but even if you could those events are still too&amp;nbsp;low-level.&lt;/p&gt;
&lt;p&gt;Also the screensharing technique &lt;em&gt;because&lt;/em&gt; of its broad applicability is not contextually aware.  Do you want to give the viewer access to the application as though they are the same user as the person using the source browser?  You can allow things like both people being scrolled to a different part of the page, but beyond that parallel work processes across a site or using overlapping tools is not really&amp;nbsp;feasible.&lt;/p&gt;
&lt;p&gt;Given these restrictions I was excited to learn from Browser Mirror but in TogetherJS to pursue something with the potential to be of a higher quality of&amp;nbsp;experience.&lt;/p&gt;
&lt;p&gt;Still I&amp;#8217;ve considered resurrecting some portion of Browser Mirror within TogetherJS.  Embracing a diversity of techniques only makes the tool more postmodern&amp;nbsp;;)&lt;/p&gt;
&lt;h2&gt;An Additive&amp;nbsp;Approach&lt;/h2&gt;
&lt;p&gt;This acceptance of postmodern approaches means TogetherJS is being developed using an additive approach.  More stuff.  More configuration. More flags.  More use&amp;nbsp;cases.&lt;/p&gt;
&lt;p&gt;The additive approach nearly always produces better results with each addition.  But we all know where else it leads: unwieldy complexity, lack of focus, unreliable combinations.  The approach is perilous. Still we must learn from the past without overlearning from the past. As a project we have and continue to invest time in code organization, and remind ourselves of the dangers.  We&amp;#8217;re trying our best to engage with the inherent complexity rather than denying or avoiding&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll see where it&amp;nbsp;goes&amp;#8230;&lt;/p&gt;</content><category term="mozilla"></category></entry><entry><title>Nouning the Verb of Browsing</title><link href="https://ianbicking.org/blog/2013/11/nouning-the-verb-of-browsing-and-activity.html" rel="alternate"></link><published>2013-11-05T11:34:00-06:00</published><updated>2013-11-05T11:34:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2013-11-05:/blog/2013/11/nouning-the-verb-of-browsing-and-activity.html</id><summary type="html">&lt;p&gt;I was talking for a while with &lt;a href="https://twitter.com/gregglind"&gt;Gregg Lind&lt;/a&gt; about &lt;a href="https://togetherjs.com"&gt;TogetherJS&lt;/a&gt; and about all the ways it &lt;em&gt;could&lt;/em&gt; and &lt;em&gt;should&lt;/em&gt; be cool, if we keep building out this idea.  Both to build out TogetherJS, but also the general area of &lt;a href="http://en.wikipedia.org/wiki/Cobrowsing"&gt;cobrowsing&lt;/a&gt; (cobrowsing is where two or more people can browse …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was talking for a while with &lt;a href="https://twitter.com/gregglind"&gt;Gregg Lind&lt;/a&gt; about &lt;a href="https://togetherjs.com"&gt;TogetherJS&lt;/a&gt; and about all the ways it &lt;em&gt;could&lt;/em&gt; and &lt;em&gt;should&lt;/em&gt; be cool, if we keep building out this idea.  Both to build out TogetherJS, but also the general area of &lt;a href="http://en.wikipedia.org/wiki/Cobrowsing"&gt;cobrowsing&lt;/a&gt; (cobrowsing is where two or more people can browse the web together, each from their own&amp;nbsp;device).&lt;/p&gt;
&lt;p&gt;In the course of the discussion Gregg had an idea that I&amp;#8217;m becoming increasingly excited about.  Can we use this to give users something new to own?  Specifically: their&amp;nbsp;actions.&lt;/p&gt;
&lt;p&gt;A side-effect of any cobrowsing tool is that you send information about what you are doing to the other person.  That&amp;#8217;s how people see what each other are doing.  Those messages are the &amp;#8220;noun&amp;#8221; I am referring to the title: all the actions you make become a set of messages that form a record of your actions.  There&amp;#8217;s a half-baked feature in TogetherJS where you can type &lt;code&gt;/record&lt;/code&gt; in the chat window and it will pop up a window where you see a record of what you do, as a sequence of &lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;messages.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img style="width: 100%" src="/static/media/togetherjs-record-screenshot.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a lot of chatter in that log, but still it&amp;#8217;s a relatively high-level log of actions, one that you could compress (e.g., by combining adjacent edits), filter, search,&amp;nbsp;replay.&lt;/p&gt;
&lt;p&gt;What we&amp;#8217;re really talking about is a series of events.  Not quite what TogetherJS produces, but the kind of document I&amp;#8217;m talking about looks kind of like&amp;nbsp;this:&lt;/p&gt;
&lt;style&gt;
  .user-log td {border: 1px #666 solid; padding: 0.4em;}
  .user-log {margin-bottom: 1em;}
&lt;/style&gt;

&lt;table class="user-log"&gt;
 &lt;tr&gt;
  &lt;th&gt;Date&lt;/th&gt;
  &lt;th&gt;Type&lt;/th&gt;
  &lt;th&gt;Data&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;T+0&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;load&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;url: http://example.com&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;T+0.5&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;mousemove&lt;code&gt;&lt;/td&gt;
  &lt;td&gt;element: #content:nth-child(2):nth-child(1); offset: 50%, 18%&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;td&gt;T+1.6&lt;/td&gt;
  &lt;td&gt;&lt;code&gt;click&lt;/code&gt;&lt;/td&gt;
  &lt;td&gt;element: #content:nth-child(2):nth-child(1)&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;I.e, a list of actions.  We try to anchor actions to elements instead of absolute coordinates.  We give elements names; here I am using &lt;span class="caps"&gt;CSS&lt;/span&gt; notation, using &lt;code&gt;nth-child()&lt;/code&gt; to handle elements that don&amp;#8217;t have ids. It&amp;#8217;s fairly&amp;nbsp;simple.&lt;/p&gt;
&lt;h2&gt;But Anyone Can Do&amp;nbsp;This!&lt;/h2&gt;
&lt;p&gt;Actually collecting that information and creating a bunch of &lt;span class="caps"&gt;JSON&lt;/span&gt; messages isn&amp;#8217;t actually that hard.  More importantly it&amp;#8217;s not &lt;em&gt;new&lt;/em&gt;. And yet a whole new category of development using this description of a person&amp;#8217;s actions has not emerged.  Why would this be any different in the context of&amp;nbsp;cobrowsing?&lt;/p&gt;
&lt;h3&gt;Information needs to be&amp;nbsp;used&lt;/h3&gt;
&lt;p&gt;One of the principles of &lt;a href="http://microformats.org/about"&gt;Microformats&lt;/a&gt; that I&amp;#8217;ve most appreciated is the principle that data needs to be visible in order to be accurate.  That is, if you have an address in the body of a page, and then a hidden &lt;a href="http://en.wikipedia.org/wiki/Resource_Description_Framework"&gt;&lt;span class="caps"&gt;RDF&lt;/span&gt;&lt;/a&gt; address alongside it, everyone will be proofreading only the visible&amp;nbsp;address.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Visibility&lt;/em&gt; is not exactly what you need: you need someone to be using data in order to ensure that the data is accurate.  Someone has to &lt;em&gt;care&lt;/em&gt;.  You don&amp;#8217;t view the &lt;code&gt;src&lt;/code&gt; attribute on images, but you can tell when it&amp;#8217;s broken (though there&amp;#8217;s lots of things you can&amp;#8217;t tell, like when you are accidentally pointing to an offsite image – those problems are much more likely to slip through).  Real visibility is nice, though, because in addition to detecting problems it also tends to make it much easier to fix problems.  But I&amp;nbsp;digress&amp;#8230;&lt;/p&gt;
&lt;p&gt;Cobrowsing means that something is built to actually &lt;em&gt;consume&lt;/em&gt; that data.  That means we&amp;#8217;re checking the data and it means we&amp;#8217;re selecting the data that actually means something to someone&amp;nbsp;else.&lt;/p&gt;
&lt;h3&gt;Free the data from the browser and&amp;nbsp;page&lt;/h3&gt;
&lt;p&gt;Browsers actually have all kinds of great information, normal developers just can&amp;#8217;t &lt;em&gt;get&lt;/em&gt; any of that&amp;nbsp;information.&lt;/p&gt;
&lt;p&gt;As I mentioned, I like the concept of Microformats.  But the reality of Microformats has been disappointing.  You can&amp;#8217;t &lt;em&gt;do&lt;/em&gt; anything with them.  They are just stuck in a page on the browser.  The creative remixing of that data is possible with effort, but apparently never enough&amp;nbsp;reward.&lt;/p&gt;
&lt;p&gt;Cobrowsing means always exporting that data, at least to your collaborator.  That means a really big barrier is automatically&amp;nbsp;overcome.&lt;/p&gt;
&lt;p&gt;The recorder I mention above is actually just a mock collaborator, that instead of interacting just remembers everything that&amp;nbsp;happens.&lt;/p&gt;
&lt;h2&gt;But It Makes Me&amp;nbsp;Afraid!&lt;/h2&gt;
&lt;p&gt;When I talk about &lt;a href="https://togetherjs.com"&gt;TogetherJS&lt;/a&gt; people frequently comment (with a sly wink): &lt;em&gt;this would be a great tool to spy on people with, wouldn&amp;#8217;t&amp;nbsp;it?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And in a sense, yes.  But TogetherJS doesn&amp;#8217;t do anything that a website can&amp;#8217;t do already, and which many sites actually do right now. Because TogetherJS runs in content, at the behest of the site owner, it doesn&amp;#8217;t really change what&amp;#8217;s &lt;em&gt;possible&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;With more expansive cobrowsing this starts to change.  Give people a new thing to own, and you also create a new thing that can be stolen. This might also be a justification: the harm will be in proportion to the&amp;nbsp;good.&lt;/p&gt;
&lt;p&gt;One benefit to the concrete nature of cobrowsing is that it builds awareness in people about what exactly is being exported.  When you watch your collaborator while cobrowsing, you see their mouse, inputs and edits and backspaces, new URLs they go to, etc.  It becomes clear that these are the things you are&amp;nbsp;sharing.&lt;/p&gt;
&lt;p&gt;This does not keep the tool from transmitting hidden information, which is why by principle we must implement these tools exposing only what information we need to: not because of simple conservatism, but because the information we &lt;em&gt;need&lt;/em&gt; to export is also the information we present to the collaborator, and so it is the information that a user understands is being exposed.  The more thoroughly we utilize information the better the user&amp;#8217;s understanding of the scope of that&amp;nbsp;information.&lt;/p&gt;
&lt;h2&gt;And Why Is This&amp;nbsp;Cool?&lt;/h2&gt;
&lt;p&gt;What, do I have to spell everything out for you?  &lt;strong&gt;I&amp;#8217;m writing this so other people come up with cool&amp;nbsp;ideas.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But anyway, a few&amp;nbsp;thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cobrowsing is really cool.  And it&amp;#8217;s a whole category of interactions, not just a single&amp;nbsp;tool.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provides a kind of high-level recording of an interaction.  Like a screencast, but you can parse it as something other than pixels. Replaying later you can add contextual navigation, like automatic detection of &amp;#8220;interesting&amp;#8221;&amp;nbsp;events.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test&amp;nbsp;recording.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sequencing user actions alongside application state, for understanding bugs or usability&amp;nbsp;issues.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automation: turn a series of actions into a bookmarklet to repeat those&amp;nbsp;actions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Depending on what is exported, it could be a form of data&amp;nbsp;extraction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As we become better at understanding these logs of activity, we can start remixing or editing them before sending them to these other&amp;nbsp;tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tools that &lt;em&gt;consume&lt;/em&gt; these activity logs become powerable by external sources.  For instance, the automation could take the form of an external robot producing events, but what it does would use all the same permission and auditing abilities you&amp;#8217;d have for working with other collaborators (who, like a robot, you may only half-trust to do things&amp;nbsp;correctly).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course a bunch of these things are being done right now.  But they aren&amp;#8217;t very accessible, they don&amp;#8217;t scale to the uninitiated, they typically lack transparency, they tend to be fragile.  And the idea of a &lt;em&gt;log of actions&lt;/em&gt; isn&amp;#8217;t central to existing techniques – they typically go from capturing events directly to producing whatever the final creation&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;In the short term, given a cobrowsing tool, creating an interesting robot to collaborate with is incredibly easy.  This leaves room for people to spend their intellectual effort on doing cool&amp;nbsp;stuff.&lt;/p&gt;
&lt;p&gt;This is the kind of data I&amp;#8217;d be excited to hack on, and I hope this article gets you thinking the same way.  Now we just have to get this cobrowsing thing&amp;nbsp;going&amp;#8230;&lt;/p&gt;</content><category term="mozilla"></category></entry><entry><title>Live Programming, Walkabout.js</title><link href="https://ianbicking.org/blog/2013/11/live-programming-walkabout.html" rel="alternate"></link><published>2013-11-27T11:30:00-06:00</published><updated>2013-11-27T11:30:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2013-11-27:/blog/2013/11/live-programming-walkabout.html</id><summary type="html">&lt;p&gt;There&amp;#8217;s a number of &amp;#8220;live programming&amp;#8221; environments used for education.  &lt;a href="https://www.khanacademy.org/cs"&gt;Khan Academy&lt;/a&gt; is one example.  In it, you write code on the left hand side, and you immediately see the result on the right hand side.  You don&amp;#8217;t hit &amp;#8220;save&amp;#8221; or &amp;#8220;run&amp;#8221; &amp;#8212; it&amp;#8217;s just always&amp;nbsp;running.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img style="width: 100%" src="/static/media/khan-screenshot.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;There …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There&amp;#8217;s a number of &amp;#8220;live programming&amp;#8221; environments used for education.  &lt;a href="https://www.khanacademy.org/cs"&gt;Khan Academy&lt;/a&gt; is one example.  In it, you write code on the left hand side, and you immediately see the result on the right hand side.  You don&amp;#8217;t hit &amp;#8220;save&amp;#8221; or &amp;#8220;run&amp;#8221; &amp;#8212; it&amp;#8217;s just always&amp;nbsp;running.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img style="width: 100%" src="/static/media/khan-screenshot.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;There are a lot of nice features to this.  There&amp;#8217;s the feedback cycle: everything always &lt;em&gt;happens&lt;/em&gt;.  Or, if you get something wrong, it distinctly &lt;em&gt;doesn&amp;#8217;t happen&lt;/em&gt;.  It&amp;#8217;s similar to the static analysis we so often use &amp;#8212; from the simplest case of syntax highlighting (which often finds syntax errors) to code lint tools, type checking or &lt;a href="http://en.wikipedia.org/wiki/Intelli-sense"&gt;Intelli-sense&lt;/a&gt;.  Live coding takes this further and makes execution itself somewhat&amp;nbsp;static.&lt;/p&gt;
&lt;p&gt;One of the nice parts about actually &lt;em&gt;running&lt;/em&gt; the code is that you aren&amp;#8217;t relying on static analysis, which is always limited.  The only thorough analysis is to model the program&amp;#8217;s execution by executing the program.  Not to mention it allows the programmer to detect bugs that just cause the program to do the wrong thing, or to be incomplete, but not clearly incorrect, not in error.  For instance, in the Khan example I make the shapes&amp;nbsp;transparent:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img style="width: 100%" src="/static/media/khan-screenshot-transparent.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;No static analysis could tell me that this produces an unattractive picture of a person.  Proponents of static analysis tend to have a limited concept of &amp;#8220;bug&amp;#8221; that doesn&amp;#8217;t include this sort of&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;To imagine what live execution might look like when applied more dramatically, you might want to check out &lt;a href="http://worrydream.com/LearnableProgramming/"&gt;Learnable Programming&lt;/a&gt; by Bret Victor.  Underlying all his mockups is the expectation that the code is being run and analyzed at all&amp;nbsp;times.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img style="width: 100%" src="/static/media/learnable-screenshot.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s all cool&amp;#8230; except you can&amp;#8217;t just &lt;em&gt;run&lt;/em&gt; code all the time.  It works for code that produces basically the same output every time it is run, that requires no input, that isn&amp;#8217;t reactive or interactive. This is all true for &lt;a href="http://processingjs.org/"&gt;Processing.js&lt;/a&gt; programs which Khan Academy and the other live programming environments I&amp;#8217;ve seen use (and Khan Academy even disables random numbers to ensure consistency). Processing.js is focused on drawing pictures, and drawing via code is okay, but&amp;#8230; it doesn&amp;#8217;t excite me. What excites me about code is its emergent properties, how the execution of the program evolves. When you write interesting code you can enable things you didn&amp;#8217;t realize, things that you won&amp;#8217;t realize until you explore that same code.  What happens when you interact with it in a new order?  What happens when you give it new input?  When a program always produces the same output it makes me feel like the program could be substituted by its output. Who needs to program a drawing when you can just use a drawing&amp;nbsp;program?&lt;/p&gt;
&lt;p&gt;I was thinking about these things when I was looking at &lt;a href="http://waterbearlang.com/"&gt;Waterbear&lt;/a&gt;, which is a graphical/pluggable-tile programming language (very similar to &lt;a href="http://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img style="width: 100%" src="/static/media/waterbear-screenshot.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;A nice aspect of that sort of language is that you are forced to think in terms of the &lt;a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;&lt;span class="caps"&gt;AST&lt;/span&gt;&lt;/a&gt; instead of text, because all those tiles &lt;em&gt;are&lt;/em&gt; the &lt;span class="caps"&gt;AST&lt;/span&gt;.  You also get a menu of everything the language can do, including its primitive&amp;nbsp;functions.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="/static/media/waterbear-screenshot-list.png"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;With the language laid out like that, I saw that most of it was nice and static and deterministic.  Control structures are deterministic: &lt;code&gt;if COND then IFTRUE else IFFALSE&lt;/code&gt; always executes the same code given the same input.  Most everything is: appending to a list always produces the same result, adding numbers always produces the same result.  The list of the non-deterministic building blocks of a program is &lt;em&gt;really small&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And this is exciting!  If you can find all the non-deterministic parts of a program and come up with a range of viable results to plug in (i.e., mock) then you can run more-or-less the entire program.  And the more I think about it, the more I realize that the list of non-deterministic parts can be quite small for many&amp;nbsp;programs.&lt;/p&gt;
&lt;p&gt;For instance, consider this&amp;nbsp;program:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;guesser&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;I&amp;#39;m thinking of a number between 1 and 10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Please enter a number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;You win!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Too small!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Too large!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a simple program, but it can execute in lots of ways.  There&amp;#8217;s two non-deterministic parts: &lt;code&gt;random.randint()&lt;/code&gt; and &lt;code&gt;input()&lt;/code&gt;. The first can be made deterministic by seeding the random number generator with a known value (and the program can be exercised with multiple runs with multiple seeds).  The second is trickier.  We know &lt;code&gt;input()&lt;/code&gt; returns a string that the user inputs, one line long. But if you throw random strings at the program you won&amp;#8217;t get something very interesting.  So we need just a little more help, a suggestion of what the person might return.  E.g., &lt;code&gt;input.suggest_returns = lambda: str(random.randint(-1, 11))&lt;/code&gt; &amp;#8212; it&amp;#8217;s still valid that it can return anything, but we&amp;#8217;ll be able to best exercise the program with those inputs.  We still don&amp;#8217;t have a smart player for our game, but it&amp;#8217;s&amp;nbsp;something.&lt;/p&gt;
&lt;p&gt;This approach to exercising code is exciting because it&amp;#8217;s basically automatic: you write your program, and if you are using primitives that have been setup for mocking, then it&amp;#8217;s testable.  You can build tools around it, the tools can find cases where things go wrong and replay those specific cases for the programmer until they are&amp;nbsp;fixed.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s still a challenge to actually get deep into the program: the primitives often don&amp;#8217;t express the expectation.  For instance in this guessing program it&amp;#8217;s valid to enter &amp;#8220;one&amp;#8221;, but it&amp;#8217;s not not very &lt;em&gt;interesting&lt;/em&gt;.  If you are testing something interactive you might have a Cancel button that undoes a bunch of inputs; while it&amp;#8217;s worth hitting Cancel every so often, generally it&amp;#8217;s not interesting, even&amp;nbsp;anti-interesting.&lt;/p&gt;
&lt;p&gt;But with these thoughts in mind I was naturally drawn to the browser. A browser Javascript program is handy because it has very specific and a fairly limited set of primitives.  Nearly everything that&amp;#8217;s not deterministic would be considered part of the &lt;a href="http://en.wikipedia.org/wiki/Document_Object_Model"&gt;&lt;span class="caps"&gt;DOM&lt;/span&gt;&lt;/a&gt;, which includes not just the &lt;span class="caps"&gt;HTML&lt;/span&gt; page but also (at least in the terminology used by browser insiders) includes all the browser-specific functions exposed to&amp;nbsp;content.&lt;/p&gt;
&lt;p&gt;In the case of a browser program, the program tends to be fairly reactive: much of what happens is the program listening for events. This means much of the logic of the program is invoked from the outside.  This is helpful because (with some effort) we can detect those listeners, and figure out what events the program is actually interested in (since something like a click can happen &lt;em&gt;anywhere&lt;/em&gt;, but usually to no effect).  Then you must also filter out handlers that apply to something that is not at the moment possible, for instance a click handler on an element that is not&amp;nbsp;visible.&lt;/p&gt;
&lt;p&gt;Trying to exercise a program is not the same as actually confirming the program did the right thing.  This testing practice will reward the program that is littered with asserts.  Asserts can&amp;#8217;t be statically examined, and in that way they are worse than static types, but they can address things that can&amp;#8217;t be statically&amp;nbsp;described.&lt;/p&gt;
&lt;p&gt;I believe there is a term for this concept: &lt;em&gt;generative testing&lt;/em&gt; (for example, &lt;a href="https://github.com/strangeloop/strangeloop2012/blob/master/slides/sessions/SpiewakBedra-PontificatingQuantification.pdf"&gt;some slides from a presentation&lt;/a&gt;. Most of what I&amp;#8217;ve seen under that name involves relatively small examples, with explicitly defined domains of input and output. I&amp;#8217;m proposing to do this at the scale of an application, not a routine; to define inputs as any non-deterministic query or listener; and to define failure as some inline assertion error or&amp;nbsp;warning.&lt;/p&gt;
&lt;h2&gt;Let&amp;#8217;s Do&amp;nbsp;It&amp;#8230;?&lt;/h2&gt;
&lt;p&gt;With this in mind I created a library: &lt;a href="https://github.com/ianb/walkabout.js"&gt;Walkabout.js&lt;/a&gt;.  This either uses the evidence jQuery leaves about bound event handlers, or it can use source code rewriting to track event handlers (tracking event handlers is harder than I would like).  From this list it can create a list of plausible actions that can take place, seeing what elements might be clicked, hovered over, selected, etc., filtering out elements that aren&amp;#8217;t visible, and so on.  Then it uses a pseudo-random number generator to select an action, while checking for uncaught exceptions or warnings written to the&amp;nbsp;console.&lt;/p&gt;
&lt;p&gt;The library isn&amp;#8217;t complete in what it mocks out, but that&amp;#8217;s just a matter of doing more work.  It&amp;#8217;s a little harder to mock out server interaction, because there&amp;#8217;s easy no way to know what exactly to expect back from the server &amp;#8212; though if the server is deterministic (and the server&amp;#8217;s state can be reset each run) then it&amp;#8217;s okay to use it without mocking.  &lt;strong&gt;Nothing deterministic need be mocked&lt;/strong&gt; including external&amp;nbsp;components.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a lot I&amp;#8217;d like to change about Walkabout.js&amp;#8217;s code itself (my opinions on Javascript have changed since I first wrote it), but I worry I get ahead of myself by doing another round of development on it right now.  There&amp;#8217;s non-trivial tooling required to use this tool, and I need to find a larger environment where it can make sense.  Or at least I &lt;em&gt;want&lt;/em&gt; to find that environment, because I think the result will be more&amp;nbsp;compelling.&lt;/p&gt;
&lt;p&gt;Another big task to consider is how to actually explore the program in depth.  It&amp;#8217;s easy to come up with really boring, long, useless sequences of actions.  Open dialog, close dialog x 100.  Enter text, clear text x 10.  Hitting some control that terminates the application is only interesting once.  And though computers are &lt;em&gt;fast&lt;/em&gt; they aren&amp;#8217;t so fast they can spend most of their time doing completely useless things.  I want my failures&amp;nbsp;now!&lt;/p&gt;
&lt;p&gt;To explore an application in depth we need to effectively &lt;em&gt;search&lt;/em&gt; the application, using the range of possible inputs.  The first idea for scoring a result that I thought of is code coverage: if you are reaching new code, then you are doing something interesting.  Then the tooling becomes even more heavy-weight, you have to do code coverage and constantly track it to find productive avenues.  Then a second, simpler idea: look for new sets of available inputs.  If there&amp;#8217;s a new button to click or new fields to interact with, then we&amp;#8217;ve probably accomplished something.  Continue to explore from that point forward. This option requires only the tooling we already&amp;nbsp;have!&lt;/p&gt;
&lt;h2&gt;Why Are We Doing This&amp;nbsp;Again?&lt;/h2&gt;
&lt;p&gt;In addition to just thinking about &amp;#8220;live programming&amp;#8221; I think this can be a great testing tool in general.  And generally I&amp;#8217;m suspicious of programming tools that are only applicable to toy/educational programming&amp;nbsp;environments.&lt;/p&gt;
&lt;p&gt;A common alternative approach to what I describe is to &lt;em&gt;record&lt;/em&gt; user input, and then replay it as a test.  It&amp;#8217;s like random testing, only instead of a random number generator you have a person.  This is basically a refinement of the standard practice of creating a script for a functional test that exercises your full&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;ve used this approach you&amp;#8217;ve probably found it annoying. Because it is.  When you replay a recording and it doesn&amp;#8217;t work, what is more likely: the application is broken, or you deliberately changed the application in a way that affects how the recording replays?  In my experience 9 times out of 10 it&amp;#8217;s the latter.  &lt;strong&gt;We spend too much time fixing test failures that are not&amp;nbsp;bugs.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The beauty of the generative approach is that it responds to your changes.  It takes your program as it is, not as you might wish it to be.  It runs the actions that are valid with &lt;em&gt;this&lt;/em&gt; code, not some past version of your code.  And the &amp;#8220;tests&amp;#8221; aren&amp;#8217;t expected input and output, they are assertions, and those assertions live right with the code and stay updated with that code.  If we care about testing, why don&amp;#8217;t we include testing in the code itself?  If you want to entertain various possible inputs why not suggest what you are expecting directly in the&amp;nbsp;code?&lt;/p&gt;
&lt;p&gt;Once you are exercising the code, you can also learn a lot more about the code at runtime.  What kinds of object are assigned to a particular variable?  How are pieces of code linked?  What is the &lt;em&gt;temporally&lt;/em&gt; related code?  Given code coverage, you could isolate patterns that exercise a particular line of code.  Having found a bug, you also have a script to reach that bug.  Having made a change, you could identify past scripts that reach that changed area, giving you a chance to dive into the effect of that change.  Many of these kinds of tools would be valid in a general sense, but require a well-exercised program to be useful &amp;#8212; because most software tooling doesn&amp;#8217;t include a &amp;#8220;do lots of stuff&amp;#8221; option we&amp;#8217;re holding ourself back when it comes to runtime&amp;nbsp;analysis.&lt;/p&gt;
&lt;p&gt;So what do you&amp;nbsp;think?&lt;/p&gt;
&lt;p&gt;If you want to give it a really quick/rough try, go &lt;a href="http://ianb.github.io/walkabout.js/"&gt;here&lt;/a&gt;, grab the bookmarklet, and go to a single-page app and try it out.  It might do silly things, or nothing, but maybe it&amp;#8217;ll do something&amp;nbsp;interesting?&lt;/p&gt;</content><category term="mozilla"></category></entry><entry><title>Hubot, Chat, The Web, and Working in the Open</title><link href="https://ianbicking.org/blog/2014/02/hubot-chat-web-working-in-the-open.html" rel="alternate"></link><published>2014-02-14T12:26:00-06:00</published><updated>2014-02-14T12:26:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2014-02-14:/blog/2014/02/hubot-chat-web-working-in-the-open.html</id><summary type="html">&lt;p&gt;I was listening to a &lt;a href="http://hanselminutes.com/375/on-culture-and-remoteness-at-github-with-paul-betts-and-justin-spahr-summers"&gt;podcast with some people from GitHub&lt;/a&gt; and I was struck by &lt;a href="http://hubot.github.com/"&gt;Hubot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My understanding of what they are doing: Hubot is a chat bot &amp;#8212; in this case it hangs out in &lt;a href="https://campfirenow.com/"&gt;Campfire&lt;/a&gt; chat rooms, but it could equally be an &lt;a href="http://en.wikipedia.org/wiki/Internet_Relay_Chat_bot"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; bot&lt;/a&gt;.  It started out …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was listening to a &lt;a href="http://hanselminutes.com/375/on-culture-and-remoteness-at-github-with-paul-betts-and-justin-spahr-summers"&gt;podcast with some people from GitHub&lt;/a&gt; and I was struck by &lt;a href="http://hubot.github.com/"&gt;Hubot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My understanding of what they are doing: Hubot is a chat bot &amp;#8212; in this case it hangs out in &lt;a href="https://campfirenow.com/"&gt;Campfire&lt;/a&gt; chat rooms, but it could equally be an &lt;a href="http://en.wikipedia.org/wiki/Internet_Relay_Chat_bot"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; bot&lt;/a&gt;.  It started out doing silly things, as bots often do, then started offering up status messages.  Eventually it got a command language where you could actually &lt;em&gt;do&lt;/em&gt; things, like deploy&amp;nbsp;servers.&lt;/p&gt;
&lt;p&gt;As described, as Hubot grew new powers it has given people at GitHub new ways to work together with some interesting&amp;nbsp;features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Everyone else (in your room/group) can see you interacting with Hubot.  This gives people awareness of what each other are&amp;nbsp;doing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There&amp;#8217;s organic knowledge sharing.  When you watch someone doing stuff, you learn how to do it yourself.  If you ask a question and someone answers the question by doing stuff &lt;em&gt;in that same channel&lt;/em&gt; then the learning is very concrete and&amp;nbsp;natural.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You get a history of stuff that was done.  In GitHub&amp;#8217;s case they have custom logging and search interfaces for their Campfire channels, so there&amp;#8217;s a searchable database of everything that happens in chat&amp;nbsp;rooms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What makes search, learnability, and those interactions so useful is that &lt;em&gt;actions&lt;/em&gt; are intermixed with &lt;em&gt;discussion&lt;/em&gt;.  It&amp;#8217;s only modestly interesting that you could search back in history to find commands to Hubot.  It&amp;#8217;s far more interesting if you can see the context of those commands, the intentions or mistakes that lead to that&amp;nbsp;command.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This setup has come back to mind repeatedly while I&amp;#8217;ve been thinking about the concepts that &lt;a href="http://www.whatthedruck.com/"&gt;Aaron&lt;/a&gt; and I have been working through with &lt;a href="https://togetherjs.com/"&gt;TogetherJS&lt;/a&gt;, my older &lt;a href="https://github.com/mozilla/browsermirror"&gt;Browser Mirror project&lt;/a&gt; and now with &lt;a href="https://github.com/mozilla/hotdish/"&gt;Hotdish, our new experiment in browser collaboration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With each of these I&amp;#8217;ve found myself expanding the scope of what we capture and share with the group &amp;#8212; a single person&amp;#8217;s session (in Browser Mirror), multiple people working in parallel across a site (in TogetherJS), and then multiple people working across a browser session (Hotdish).  One motivation for this expansion is to place these individual web interactions in a social, and purposeful, context.  In the same way your Hubot interactions are surrounded by a conversation, I want to surround web interactions in a person&amp;#8217;s or group&amp;#8217;s thought process: to expose some of the &lt;em&gt;why&lt;/em&gt; behind those&amp;nbsp;actions.&lt;/p&gt;
&lt;p&gt;What would it look like if we could get these features of Hubot, but with a workflow that encompasses any web-based tool?  I don&amp;#8217;t know, but a few thoughts taken from the previous&amp;nbsp;list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Expose your team-related browsing to your team.  Give other people some sense of what you are doing.  &lt;strong&gt;Questions&lt;/strong&gt;: should you lead in with an explicit &amp;#8220;I am trying to do X&amp;#8221;?  Or can a well-connected team infer purpose or query you about your purpose given just a set of actions?  If you use a task management tool &amp;#8212; issue tracker, project management tool, &lt;span class="caps"&gt;CRM&lt;/span&gt;, etc &amp;#8212; is that launching point itself sufficient declaration of&amp;nbsp;intent?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let other people jump in, watching or participating in a session. You might start with an overview of their browsing activity, as it&amp;#8217;s just too much information to watch it all flow by, as you might be able to do with Hubot.  But then you want to support closer interaction.  It might be a little like being the passenger in a &lt;a href="https://bitbucket.org/spooning/"&gt;pair programming&lt;/a&gt; situation, except instead of watching the other person by literally looking over their shoulder, we can let you opt in to watching remotely, and maybe allow for catching up or summarizing segments of the work, instead of requiring the two people to be linked in real time through the entire process.  &lt;strong&gt;Questions&lt;/strong&gt;: how do you determine that something is going to be of interest to you?  Do the participants stay in well-defined leading/following roles, or do they&amp;nbsp;switch?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Record actions.  Maybe this means &amp;#8220;going on the record&amp;#8221; sometimes. Ideally you&amp;#8217;d be able to go on the record retroactively, like holding a recording locally and allowing you to put that recording in a global record if you decide it is needed.  One can imagine different levels of granularity possible for the recording.  A simple list of URLs you visited.  A recording of &lt;span class="caps"&gt;DOM&lt;/span&gt; states.  Some applications might be able to expose their own internal states that can be reconstructed, like in an automatically versioned resource like Google Docs the internal version numbers would be sufficient to see the context at that moment. &lt;strong&gt;Questions&lt;/strong&gt;: how do you figure out what information is actually useful?  Is it possible to save everything and analyze later, or is that too much data (and traffic)?  Can we automatically&amp;nbsp;curate?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push enough communication through the browsing context and collaboration tool that there is a context for the actions.  This helps identify false starts (both to trim them, but also as an opportunity to help with future similar false starts), underlying purposes, bugs in the communication process itself (&amp;#8220;I was trying to ask you to do X, but you thought I meant Y&amp;#8221;), and give a resource to match future goals and purposes against past work.  &lt;strong&gt;Questions&lt;/strong&gt;: does this make voice communication sub-optimal (compared to searchable text chat)?  Do we want to identify subtasks?  Or is it better to flatten everything to the group&amp;#8217;s purpose &amp;#8212; in some sense all tasks relate to the&amp;nbsp;purpose?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you might ask: why web/browser focused instead of application-focused, or a tool that coordinates all these tasks (Google Docs/Apps? Wave?), or communication-tool-focused (like Hubot and Campfire are)?  Mostly because I think that web-based tools encompass &lt;em&gt;enough&lt;/em&gt; and will consistently encompass more of our work, and because the web makes these things feasible &amp;#8212; it might be a half-assed semantic system, but it&amp;#8217;s more semantic than anything else. And of course the web is cloudy, which in this case is important because it means a third party (someone watching, or a recording) has a similar perspective to the person doing the action.  Personal computing is challenging because of a huge local state that is hard to identify and communicate to&amp;nbsp;observers.&lt;/p&gt;
&lt;p&gt;I think there&amp;#8217;s an idea here, and one that doesn&amp;#8217;t require recreating every tool individually to embody these ideas, but instead can happen at the platform level (the platform here being the&amp;nbsp;browser).&lt;/p&gt;</content><category term="mozilla"></category><category term="hotdish"></category></entry><entry><title>Defaulting To Together</title><link href="https://ianbicking.org/blog/2014/02/defaulting-to-together.html" rel="alternate"></link><published>2014-02-17T12:31:00-06:00</published><updated>2014-02-17T12:31:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2014-02-17:/blog/2014/02/defaulting-to-together.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been working on an experiment, &lt;a href="https://github.com/mozilla/hotdish/"&gt;Hotdish&lt;/a&gt;, for several weeks now with &lt;a href="http://www.whatthedruck.com/"&gt;Aaron Druck&lt;/a&gt; and &lt;a href="https://twitter.com/gregglind"&gt;Gregg Lind&lt;/a&gt;.  I&amp;#8217;m really excited about what we&amp;#8217;re doing, and in particular I&amp;#8217;m excited about some of the principles we are bringing to the design.  Hotdish is an experiment in sharing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been working on an experiment, &lt;a href="https://github.com/mozilla/hotdish/"&gt;Hotdish&lt;/a&gt;, for several weeks now with &lt;a href="http://www.whatthedruck.com/"&gt;Aaron Druck&lt;/a&gt; and &lt;a href="https://twitter.com/gregglind"&gt;Gregg Lind&lt;/a&gt;.  I&amp;#8217;m really excited about what we&amp;#8217;re doing, and in particular I&amp;#8217;m excited about some of the principles we are bringing to the design.  Hotdish is an experiment in sharing a browser session among a group of peers &amp;#8212; you activate Hotdish on one browser window and everyone in your group sees what you do in that window, and we have tools to interact in the context of that&amp;nbsp;session.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve started the design with the expectation that Hotdish will be used with a group of people you want to be working with, and we expect that you trust this group of people.  We&amp;#8217;re not building this as an internet-wide tool, one where people will be trolling each other, or one where some people will be an order of magnitude more noisy than everyone else. So when we take a regular internet collaboration/cooperation idea and rephrase it in the context of Hotdish we think about how we can change default behaviors to make use of that&amp;nbsp;trust.&lt;/p&gt;
&lt;p&gt;Instead of using the tool to restrict people from bothering each other, we want to create a tool that &lt;strong&gt;enables powerful new ways for one person to bother another&lt;/strong&gt; in the group.  If that&amp;#8217;s a problem, we expect you to deal with that socially rather than building something into the tool. (&lt;a href="http://www.youtube.com/watch?v=GtrSn8WwCa4"&gt;Use your words!&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;Pushing tabs instead of posting&amp;nbsp;links&lt;/h3&gt;
&lt;p&gt;In Hotdish instead of &lt;em&gt;asking&lt;/em&gt; someone to go to a link, you &lt;em&gt;push&lt;/em&gt; a link to everyone.  The normal flow is you copy the &lt;span class="caps"&gt;URL&lt;/span&gt;, you go to your communication medium (instant message, chat room, shared document), you paste the &lt;span class="caps"&gt;URL&lt;/span&gt;, and then you beg everyone to please click it.  Then you ask if everyone is really there yet? Then you make sure everyone knows it wasn&amp;#8217;t the second-to-last link, but the very last link you pasted.  Just this minute.  Wait, no, not the link that other person pasted in, though I suppose you should all go there too. &lt;span class="caps"&gt;OK&lt;/span&gt;, are we all on the same page now?  Oh wait, I just made a change, can everyone&amp;nbsp;reload?&lt;/p&gt;
&lt;p&gt;No: with Hotdish you just push the link, &lt;em&gt;make&lt;/em&gt; it open for everyone, and once you&amp;#8217;ve done it you&amp;#8217;ll even get a second confirmation because we show who on a page.  The only problem is right now we open a background tab (because forcing a tab switch is too jarring), but I want to figure out how to push even harder, to let people be more assertive if they choose. Like maybe if you push twice in succession everyone gets a big &amp;#8220;Alice really wants you to see: [page]&amp;#8221; notification that you can&amp;#8217;t really ignore, or if you explicitly ignore it then Alice knows you decided to ignore&amp;nbsp;it.&lt;/p&gt;
&lt;h3&gt;Presenting and peeking&amp;nbsp;in&lt;/h3&gt;
&lt;p&gt;Another example where we&amp;#8217;re being aggressive: in Hotdish you can &lt;em&gt;present&lt;/em&gt; a page to someone, showing them exactly what you see (including details that might not be the same for them if they went to the same &lt;span class="caps"&gt;URL&lt;/span&gt;).  But you can also &lt;em&gt;view&lt;/em&gt; someone else&amp;#8217;s page. When you &amp;#8220;view&amp;#8221; a page you are viewing the page exactly as the other person sees it (as opposed to simply visiting the same &lt;span class="caps"&gt;URL&lt;/span&gt; as the other person).  It&amp;#8217;s like the ability to peek over anyone&amp;#8217;s&amp;nbsp;shoulder.&lt;/p&gt;
&lt;h3&gt;Audio/video &lt;span class="caps"&gt;CB&lt;/span&gt;/walkie-talkie&amp;nbsp;mode&lt;/h3&gt;
&lt;p&gt;We haven&amp;#8217;t added any voice tools to Hotdish yet.  It didn&amp;#8217;t seem like the heart of what we were trying to explore &amp;#8212; of course we knew we&amp;#8217;d want to enable communication among the group, but we didn&amp;#8217;t think we&amp;#8217;d bring anything new, and so the effort didn&amp;#8217;t feel like it would bring much.  But then we also hadn&amp;#8217;t thought about how we might rethinking the ideas in this concept, instead we were just borrowing what seemed like the obvious&amp;nbsp;interface.&lt;/p&gt;
&lt;p&gt;After some thought a feature I&amp;#8217;d like to try is a talk-at-anyone mode. This is a little like &lt;a href="https://www.sqwiggle.com/"&gt;Sqwiggle&lt;/a&gt;, where you can talk with anyone without confirmation.  Still I find the Sqwiggle model a little much, where anyone can watch me on their own volition. Maybe it&amp;#8217;s fine, I might be wrong.  But I&amp;#8217;m more open to anyone talking &lt;em&gt;to&lt;/em&gt; me, and then requiring confirmation before they can listen or watch me. Having someone yell at me spontaneously would probably be annoying, but that&amp;#8217;s a social&amp;nbsp;problem.&lt;/p&gt;
&lt;h3&gt;Sharing a record of your&amp;nbsp;activity&lt;/h3&gt;
&lt;p&gt;The core feature of Hotdish is that everyone can see any of the pages you open, and see some of your navigational behavior &amp;#8212; like when you go to a new page or change active tabs.  Realistically you would not do everything in your Hotdish window (Hotdish exposes only one browser window to the group &amp;#8212; everything you do in other windows remains personal), but I hope that Hotdish could allow people to do more things in front of their peers.  For instance, from an article &lt;a href="https://source.opennews.org/en-US/learning/making-remote-work-work/"&gt;&lt;em&gt;Making Remote Work Work&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;#8217;s my earnest belief that some people will have higher expectations for you because you work remotely. It&amp;#8217;s very easy for them to believe you&amp;#8217;re in your underwear playing Final Fantasy instead of slogging through the documentation for Django. Not all work has obvious output and when they can&amp;#8217;t see you at your desk, it&amp;#8217;s tempting to log those blank hours as time&amp;nbsp;wasted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the hidden parts of work (paid work, school work, or volunteer work) that I want to expose with Hotdish is &lt;strong&gt;research&lt;/strong&gt;. Research is slogging through the docs, finding out if some idea you&amp;#8217;ve had &lt;em&gt;maybe&lt;/em&gt; exists (and perhaps finding out doesn&amp;#8217;t), it&amp;#8217;s finding the right term, looking up a date or meeting&amp;#8230; it&amp;#8217;s all these little things we constantly do.  But those things are never the focus of &amp;#8220;collaboration&amp;#8221;.  Research is the stuff you do &lt;em&gt;before&lt;/em&gt; you can tell anyone what you&amp;#8217;ve learned. It gets seen as a prerequisite to accomplishing real work, instead of a part of what it means to &lt;em&gt;do&lt;/em&gt; real work.  And yet when asked everyone will defend the value of research: we know we should value this thing, but because we have a hard time seeing it too often we do&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;By putting your work in front of anyone &amp;#8212; even if you aren&amp;#8217;t trying to share anything with anyone, or have not come to any determination &amp;#8212; I hope we can make research as collaborative as conclusions&amp;nbsp;are.&lt;/p&gt;
&lt;h3&gt;Recording&amp;nbsp;history&lt;/h3&gt;
&lt;p&gt;A feature we are exploring is called the &lt;em&gt;Activity Log&lt;/em&gt;: a persistent record what happens in the group. Our first foray into this is somewhat comically primitive, we are just pasting the activities into an &lt;a href="http://etherpad.org/"&gt;Etherpad&lt;/a&gt; document.  It&amp;#8217;s primitive but I&amp;#8217;m going to have a hard time getting myself to replace it because there&amp;#8217;s something that just feels really &lt;em&gt;right&lt;/em&gt; about using an&amp;nbsp;editor.&lt;/p&gt;
&lt;p&gt;After my &lt;a href="http://www.ianbicking.org/blog/2014/02/hubot-chat-web-working-in-the-open.html"&gt;last post&lt;/a&gt; I got &lt;a href="https://plus.google.com/+IanBicking/posts/NvnBBQ6eCFe"&gt;a comment&lt;/a&gt; challenging me to consider the &amp;#8220;social implications of showing others one&amp;#8217;s mistakes&amp;#8221;.  A fair challenge, and honestly I have &lt;em&gt;tried&lt;/em&gt; to ignore that for all the reasons I&amp;#8217;m talking about here.  But I think in this silly model of recording activities to a text editor there is also a response to this: we keep a record, along with everything else we do, because we want to build a model for a constructive and supportive group to enhance their work together.  But a constructive and supportive group is also based on trust.  One of the ways we demonstrate trust is with things like using an editable document instead of a strict log: we should trust each other to edit history, and edit out history.  We should trust that people use that power&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;In a live environment like Hotdish it&amp;#8217;s hard to actually make sure no one saw something.  You open a link, it shows up to everyone that moment.  You close it, and maybe we can figure out a way to keep it out of history, or allow you to remove it from history, but we can&amp;#8217;t remove it from the memories of everyone who saw it.  But this is another kind of politeness: we ask that people respect even our retroactive attempts at privacy.  This is something that Facebook, for instance, works pretty hard at &amp;#8212; they do their best to make deleted content really disappear.  Programmer-designed tools tend to be horrible at this.  I think because the programmer knows you can&amp;#8217;t &lt;em&gt;really&lt;/em&gt; delete history, you can&amp;#8217;t know what has been recorded on other clients, you can&amp;#8217;t erase people&amp;#8217;s memory.  They don&amp;#8217;t put value on politely agreeing to forget.  And so programmer-designed tools almost never let you edit history.  We will not make this&amp;nbsp;mistake.&lt;/p&gt;
&lt;p&gt;So that&amp;#8217;s some of what we&amp;#8217;re thinking.  Some of these ideas aren&amp;#8217;t going to work out.  Dogfooding will be essential.  But we can&amp;#8217;t see how far we can go with putting people together unless we go too far and then pull&amp;nbsp;back.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m interested in other ideas for somewhat uncomfortably intimate browser-mediated sharing experiences.  Have&amp;nbsp;any?&lt;/p&gt;</content><category term="mozilla"></category><category term="hotdish"></category></entry><entry><title>Collaboration as a Skeuomorphism for Agents</title><link href="https://ianbicking.org/blog/2014/02/collaboration-as-a-skeuomorphism-for-agents.html" rel="alternate"></link><published>2014-02-21T15:06:00-06:00</published><updated>2014-02-21T15:06:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2014-02-21:/blog/2014/02/collaboration-as-a-skeuomorphism-for-agents.html</id><summary type="html">&lt;p&gt;In concept videos and imaginings about the Future Of Computing we often see &lt;a href="https://en.wikipedia.org/wiki/Software_agent#User_agents_.28personal_agents.29"&gt;Intelligent Agents&lt;/a&gt;: smart computer programs that work on your&amp;nbsp;behalf.&lt;/p&gt;
&lt;p&gt;But to be more specific, I&amp;#8217;m interested in agents that don&amp;#8217;t work through formal rules.  An &lt;a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#Outgoing_mail_SMTP_server"&gt;&lt;span class="caps"&gt;SMTP&lt;/span&gt; daemon&lt;/a&gt; acts on your behalf routing messages to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In concept videos and imaginings about the Future Of Computing we often see &lt;a href="https://en.wikipedia.org/wiki/Software_agent#User_agents_.28personal_agents.29"&gt;Intelligent Agents&lt;/a&gt;: smart computer programs that work on your&amp;nbsp;behalf.&lt;/p&gt;
&lt;p&gt;But to be more specific, I&amp;#8217;m interested in agents that don&amp;#8217;t work through formal rules.  An &lt;a href="https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol#Outgoing_mail_SMTP_server"&gt;&lt;span class="caps"&gt;SMTP&lt;/span&gt; daemon&lt;/a&gt; acts on your behalf routing messages to your intended destination, but they do so in an entirely formal way, one that is &amp;#8220;correct&amp;#8221; or &amp;#8220;incorrect&amp;#8221;.  And if such agents act with initiative, it is initiative based on formal rules, and those formal rules ultimately lead back to the specific intentions of whoever wrote the rules, the rules defined in terms of unambiguous&amp;nbsp;inputs.&lt;/p&gt;
&lt;p&gt;Progress on intelligent agents seems to be thin.  Gmail sorts some stuff for us in a &amp;#8220;smart&amp;#8221; way.  There are some smart command-based interfaces like Siri, but they are mostly smart frontends for formalized backends, and they lack initiative.  Maybe we get an intelligent alert or two, but it&amp;#8217;s a tiny minority given all the dumb alerts we&amp;nbsp;get.&lt;/p&gt;
&lt;p&gt;One explanation is that we don&amp;#8217;t have intelligent agents because we haven&amp;#8217;t figured out intelligence.  But whatever, intelligent is as intelligent does, if this was the only reason then I would expect to see more dumb &lt;em&gt;attempts&lt;/em&gt; at intelligent&amp;nbsp;agents.&lt;/p&gt;
&lt;p&gt;It seems worth approaching this topic with more &lt;a href="http://johncarlosbaez.wordpress.com/2013/09/29/levels-of-excellence/"&gt;mundane attempts&lt;/a&gt;. But there are reasons we (&amp;#8220;we&amp;#8221; being &amp;#8220;us technologists&amp;#8221;)&amp;nbsp;don&amp;#8217;t.&lt;/p&gt;
&lt;h3&gt;Intelligent agents will be chronically&amp;nbsp;buggy&lt;/h3&gt;
&lt;p&gt;If we want agents to do things where it&amp;#8217;s not clear what to do, then sometimes they are going to do the wrong thing.  It might be a big-scale wrong thing, like they buy airplane tickets and we wanted them to buy concert tickets.  Or a small thing, like we want them to buy airplane tickets and something changed about the interface to buy those tickets and now the agent is just&amp;nbsp;confused.&lt;/p&gt;
&lt;p&gt;Intelligent agents will be accepting rules from the people they are working for, from normal people.  Then normal users become programmers in a sense. Maybe it&amp;#8217;s a hand-holding cute and fuzzy programming language based on natural language, but it is the nature of programming that you will create your own bugs.  Only a minority of bugs are created because you expressed yourself incorrectly, most bugs are because you thought it through incorrectly, and no friendly interface can fix&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;How then do we deal with buggy intelligent agents, while also allowing them to do useful&amp;nbsp;things?&lt;/p&gt;
&lt;p&gt;There are two things that come to mind: logging and having the agent check before doing something.  Both are hard in&amp;nbsp;practice.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logging&lt;/strong&gt;: this lets you figure out who was responsible for a bad action, or the reasoning behind an&amp;nbsp;action.&lt;/p&gt;
&lt;p&gt;Programmers do this all the time to understand their programs, but for an intelligent agent the user is also a developer.  When you ask your agent to watch for something, or you ask it to act under certain circumstances, then you&amp;#8217;ve programmed it, and you may have programmed it wrong.  Fixing that doesn&amp;#8217;t mean looking at stack traces, but there has to be some&amp;nbsp;techniques.&lt;/p&gt;
&lt;p&gt;You don&amp;#8217;t want to have to take users into the mind of the person who programmed the agent.  So how can you log actions so they are&amp;nbsp;understandable?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Checking&lt;/strong&gt;: you&amp;#8217;ll want your agent to check in with you before doing some things.  Like before actually buying something. Sometimes you&amp;#8217;ll want the agent to check in even more often, not because you expect the agent to do something impactful, but because it might do something impactful due to a bug.  Or you are just getting to know each&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;Among people this kind of check-in is common, and we have a rich language to describe intentions and to implicitly get support for those intentions.  With computer interactions it&amp;#8217;s a little less clear: how does an agent talk about what it thinks it &lt;em&gt;should&lt;/em&gt; do? How do we know what it says it thinks it should do is what it actually plans to&amp;nbsp;do?&lt;/p&gt;
&lt;h3&gt;Collaboration&lt;/h3&gt;
&lt;p&gt;We deal with lots of intelligent agents all the time: each other.  We can give each other instructions, and in this way anyone can program another human.  We report back to each other about what we did.  We can tell each other when we are confused, or unable to complete some operation. We can confirm actions.  Confirmation is almost like functional testing, except often it&amp;#8217;s the person who receives the instructions who initiates the testing.  And all of this is rooted in &lt;em&gt;empathy&lt;/em&gt;: understanding what someone else is doing because it&amp;#8217;s more-or-less how you would do&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s in these human-to-human interactions we can find the metaphors that can support computer-based intelligent&amp;nbsp;agents.&lt;/p&gt;
&lt;p&gt;But there&amp;#8217;s a problem: computer-based intelligent agents perform best at computer-mediated tasks.  But we usually work alone when we personally perform computer-mediated tasks.  When we coordinate these tasks with each other we often resort to low-fidelity check-ins, an email or &lt;span class="caps"&gt;IM&lt;/span&gt;.  We don&amp;#8217;t even have ways to delegate except via the wide categories of permission systems.  If we want to build intelligent agents on the intellectual framework of person-to-person collaboration, we need much better person-to-person collaboration for our computer-based&amp;nbsp;interactions.&lt;/p&gt;
&lt;p&gt;(I will admit that I may be projecting this need onto the topic because I&amp;#8217;m very interested in person-to-person collaboration.  But then I&amp;#8217;m writing this post in the hope I can project the same perspective onto you, the&amp;nbsp;reader.)&lt;/p&gt;
&lt;p&gt;My starting point is the kind of collaboration embodied in &lt;a href="https://togetherjs.com"&gt;TogetherJS&lt;/a&gt; and some follow-on ideas I&amp;#8217;m &lt;a href="https://togetherjs.com/hotdish/"&gt;experimenting with&lt;/a&gt;. In this model we let people see what each other are &amp;#8220;doing&amp;#8221; &amp;#8212; how they interact with a website.  This represents a kind of log of activity, and the log is presented as human-like interactions, like a&amp;nbsp;recording.&lt;/p&gt;
&lt;p&gt;But I imagine many ways to enter into collaboration: consider a mode for teaching, where one person is trying to tell the other person how to do something.  In this model the helper is giving directed instructions (&amp;#8220;click here&amp;#8221;, &amp;#8220;enter this text&amp;#8221;).  For teaching it&amp;#8217;s often better to tell than to do.  But this is also an opportunity to check in: if my intelligent agent is instructing me to do some action (perhaps one I don&amp;#8217;t entirely trust it to do on my behalf) then I&amp;#8217;m still confirming every specific action.  At the same time the agent can benefit me by suggesting actions I might not have figured out on my&amp;nbsp;own.&lt;/p&gt;
&lt;p&gt;Or imagine a collaboration system where you let someone pull you in part way through their process.  A kind of &amp;#8220;hey, come look at this.&amp;#8221; This is where the diligent intelligent agent can spend its time checking for things, and then bring your attention when it&amp;#8217;s appropriate.  Many of the same controls we might want for interacting with other people (like a &amp;#8220;busy&amp;#8221; status) apply well to the agent who also wants to get our attention, but should maybe&amp;nbsp;wait.&lt;/p&gt;
&lt;p&gt;Or imagine a &amp;#8220;hey, what are you doing, let me see&amp;#8221; collaboration mode, where I invite myself to see what you are doing.  Maybe I&amp;#8217;ve set up an intelligent agent to check for some situation.  Anytime you set up &lt;em&gt;any&lt;/em&gt; kind of detector like this, you&amp;#8217;ll wonder: is it really still looking?  Is it looking for the right thing?  I think it should have found something, why didn&amp;#8217;t it?  This is where it would be nice to be able to peek into the agent&amp;#8217;s actions, to watch it doing its&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;If applications become more collaboration-aware there are further possibilities.  For instance, it would be great if I could participate in a collaboration session in GitHub and edit a file with someone else.  Right now the other person can only &amp;#8220;edit&amp;#8221; if they also have permission to &amp;#8220;save&amp;#8221;.  As GitHub is now this makes sense, but if collaboration tools were available we&amp;#8217;d have a valid use case where only one of the people in the collaboration session could save, while the other person can usefully participate.  There&amp;#8217;s a kind of cooperative interaction in that model that would be perfect for&amp;nbsp;agents.&lt;/p&gt;
&lt;p&gt;We can imagine agents participating already in the collaborative environments we have.  For instance, when a continuous integration system detects a regression on a branch destined for production, it could create its own GitHub pull request to revert the changes that led to a regression.  On Reddit there&amp;#8217;s a &lt;a href="https://github.com/Deimos/AutoModerator"&gt;bot&lt;/a&gt; that I&amp;#8217;ve encountered that allows Subreddits to create fairly subtle rules, like allow image posts only on a certain day, ban short comments, check for certain terms, etc.  But it&amp;#8217;s not something that blocks submission (it&amp;#8217;s not part of Reddit itself), instead it uses the same moderator interface that a person does, and it can use this same process to explain to people why their posts were removed, or allow other moderators to intervene when something valid doesn&amp;#8217;t happen to fit the&amp;nbsp;rules.&lt;/p&gt;
&lt;h3&gt;What about&amp;nbsp;APIs?&lt;/h3&gt;
&lt;p&gt;In everything I&amp;#8217;ve described agents are interacting with interfaces in the same way a human interacts with the interface.  It&amp;#8217;s like everything is a screen scraper.  The more common technique right now is to use an &lt;span class="caps"&gt;API&lt;/span&gt;: a formal and stabilized interface to some kind of&amp;nbsp;functionality.&lt;/p&gt;
&lt;p&gt;I suggest using the interfaces intended for humans, because those are the interfaces humans understand.  When an agent wants to say &amp;#8220;I want to submit this post&amp;#8221; if you can show the human the filled-in form and show that you want to hit the submit button, you are using what the person is familiar with.  If the agent wants to say &amp;#8220;this is what I looked for&amp;#8221; you can show the data in the context the person would themselves look&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;APIs usually don&amp;#8217;t have a staging process like you find in interfaces for humans.  We don&amp;#8217;t expect humans to act correctly.  So we have a shopping cart and a checkout process, you don&amp;#8217;t just submit a list of items to a store.  You have a composition screen with preview, or interstitial preview.  Dangerous or destructive operations get a confirmation step &amp;#8212; a confirmation step that could be just as applicable of a warning for an agent as it is for a&amp;nbsp;human.&lt;/p&gt;
&lt;p&gt;None of this invalidates the reasons to use an &lt;span class="caps"&gt;API&lt;/span&gt;.  And you can imagine APIs with these intermediate steps built in.  You can imagine an &lt;span class="caps"&gt;API&lt;/span&gt; where each action can also be marked as &amp;#8220;stage-only&amp;#8221; and then returns a link where a human can confirm the action.  You can imagine an &lt;span class="caps"&gt;API&lt;/span&gt; where each data set returned is also returned with the &lt;span class="caps"&gt;URL&lt;/span&gt; of the equivalent human-readable data set.  You can imagine delegation APIs, where instead of giving a category of access to an agent via OAuth, you can ask for some more selective access. All of that would be great, but I don&amp;#8217;t think there&amp;#8217;s any movement towards this kind of &lt;span class="caps"&gt;API&lt;/span&gt; design.  And why would there be? There&amp;#8217;s no one eager to make use of&amp;nbsp;it.&lt;/p&gt;
&lt;h3&gt;That fancy Skeuomorphism term from the&amp;nbsp;title&lt;/h3&gt;
&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Skeuomorph#Digital_skeuomorphs"&gt;Skeuomorphism&lt;/a&gt; is something built to be reminiscent of an existing tool, not out of any necessity, but because it provides some sense of familiarity.  Our calendar software looks like a physical calendar.  We talk of &amp;#8220;folders&amp;#8221;.  We make our buttons look depressable even though it is all a simulation of a physical&amp;nbsp;control.&lt;/p&gt;
&lt;p&gt;This has come to mind when I talk of using the same metaphors for interacting with a computer program that we do for interacting with a&amp;nbsp;human.&lt;/p&gt;
&lt;p&gt;When we need a new way for people to work with computers a lot of success has come from finding bridges between our existing practices and a computer-based practice.  The desktop instead of the command line, the use of cards on mobile, the many visual metaphors that we use, the way we phrase emails as letters, etc.  Sometimes these are just scaffolding while people get used to the new systems (maybe &lt;a href="http://gizmodo.com/what-is-flat-design-508963228"&gt;flat design&lt;/a&gt; is an example).  And of course you can pick the wrong metaphors (or &lt;a href="http://www.youtube.com/watch?v=ZegWedG-jk4"&gt;go too far&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In this case the metaphor isn&amp;#8217;t using the representation of a physical object in the computer, but using the representation of a fellow human as a stand-in for a&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;The goal is enabling a whole list of &lt;em&gt;maybe&lt;/em&gt; actions.  Maybe &amp;#8220;intelligent&amp;#8221; doesn&amp;#8217;t really mean &amp;#8220;knowledgable and smart&amp;#8221; but &amp;#8220;is not formally verifiable as correct&amp;#8221; and &amp;#8220;successfully addresses a domain that cannot be fully understood&amp;#8221;.  You don&amp;#8217;t need formal &lt;span class="caps"&gt;AI&lt;/span&gt; for these kinds of tasks.  Heuristics don&amp;#8217;t need to be sophisticated.  But we need interfaces where a computer can make &lt;em&gt;attempts&lt;/em&gt; without demanding correctness.  And human interaction seems like the perfect model for&amp;nbsp;that.&lt;/p&gt;</content><category term="mozilla"></category><category term="hotdish"></category></entry><entry><title>Towards a Next Level of Collaboration</title><link href="https://ianbicking.org/blog/2014/03/towards-next-level-of-collaboration.html" rel="alternate"></link><published>2014-03-03T12:40:00-06:00</published><updated>2014-03-03T12:40:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2014-03-03:/blog/2014/03/towards-next-level-of-collaboration.html</id><summary type="html">&lt;p&gt;With &lt;a href="https://togetherjs.com"&gt;TogetherJS&lt;/a&gt; we&amp;#8217;ve been trying to make a usable tool for the web we have, and the browsers we have, and the web apps we have.  But we&amp;#8217;re also accepting a lot of&amp;nbsp;limitations.&lt;/p&gt;
&lt;p&gt;For a particular scope the limitations in TogetherJS are reasonable, but my own goals …&lt;/p&gt;</summary><content type="html">&lt;p&gt;With &lt;a href="https://togetherjs.com"&gt;TogetherJS&lt;/a&gt; we&amp;#8217;ve been trying to make a usable tool for the web we have, and the browsers we have, and the web apps we have.  But we&amp;#8217;re also accepting a lot of&amp;nbsp;limitations.&lt;/p&gt;
&lt;p&gt;For a particular scope the limitations in TogetherJS are reasonable, but my own goals have been more far-reaching.  I am interested in collaboration with as broad a scope as the web itself. (&lt;a href="http://www.ianbicking.org/blog/2014/02/saying-goodbye-to-python.html"&gt;But no broader than the web because I&amp;#8217;m kind of biased.&lt;/a&gt;)
&amp;#8220;Collaboration&amp;#8221; isn&amp;#8217;t quite the right term &amp;#8212; it implies a kind of active engagement in creation, but there&amp;#8217;s more ways to work together than collaboration.  TogetherJS was previously called TowTruck, but we wanted to rename it to something more meaningful.  While brainstorming we kept coming back to names that included some form of &amp;#8220;collaboration&amp;#8221; but I strongly resisted it because it&amp;#8217;s such a mush-mouthed term with too much baggage and too many&amp;nbsp;preconceptions.&lt;/p&gt;
&lt;p&gt;When we came up with &amp;#8220;together&amp;#8221; it immediately seemed right. Admittedly the word feels a little cheesy (&lt;em&gt;it&amp;#8217;s a web built out of hugs and holding hands!&lt;/em&gt;) but it covers the broad set of activities we want to&amp;nbsp;enable.&lt;/p&gt;
&lt;p&gt;With the experience from TogetherJS in mind I want to spend some time thinking about what a less limited tool would look like.  Much of this has become manifest in &lt;a href="https://github.com/mozilla/hotdish"&gt;Hotdish&lt;/a&gt;, and the notes below have informed its&amp;nbsp;design.&lt;/p&gt;
&lt;h2&gt;Degrees of&amp;nbsp;collaboration/interaction&lt;/h2&gt;
&lt;p&gt;Intense collaboration is cool, but it&amp;#8217;s not comprehensive.  I don&amp;#8217;t &lt;em&gt;want&lt;/em&gt; to always be watching over your shoulder.  What will first come to mind is privacy, but that&amp;#8217;s not interesting to me. I would rather address privacy by helping you scope your actions, let you interact with your peers or not and act appropriately with that in mind.  I don&amp;#8217;t want to engage with &lt;em&gt;my&lt;/em&gt; collaborators all the time because it&amp;#8217;s boring and unproductive and my eyes glaze over.  I want to engage with other people &lt;em&gt;appropriately&lt;/em&gt;: with all the intensity called for given the circumstances, but also all the passivity that is also sometimes called&amp;nbsp;for.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve started to think in terms of categories of&amp;nbsp;collaboration:&lt;/p&gt;
&lt;h3&gt;1. Asynchronous message-based&amp;nbsp;collaboration&lt;/h3&gt;
&lt;p&gt;This includes email of course, but also issue trackers, planning tools, any notification system. If you &lt;a href="https://www.google.com/search?q=collaboration+software"&gt;search for &amp;#8220;collaboration software&amp;#8221;&lt;/a&gt; this is most of what you find, and much of the innovation is in representing and organizing the&amp;nbsp;messages.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t think I have any particularly new ideas in this well-explored area.  That&amp;#8217;s not to say there aren&amp;#8217;t lots of important ideas, but the work I want to do is in complementing these tools rather than competing with them.  But I do want to note that they exist on this&amp;nbsp;continuum.&lt;/p&gt;
&lt;h3&gt;2. &lt;strong&gt;Ambient&amp;nbsp;awareness&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This is the awareness of a person&amp;#8217;s presence and activity. We have a degree of this with Instant Messaging and chat rooms (&lt;span class="caps"&gt;IRC&lt;/span&gt;, Campfire, etc).  But they don&amp;#8217;t show &lt;em&gt;what we are actively doing&lt;/em&gt;, just our presence or absence, and in the case of group discussions some of what we&amp;#8217;re discussing with other&amp;nbsp;people.&lt;/p&gt;
&lt;p&gt;Many tools that indicate presence also include status messages which would purport to summarize a person&amp;#8217;s current state and work.  I&amp;#8217;ve never worked with people who keep those status messages updated.  It&amp;#8217;s a very explicit approach.  At best it devolves into a record of what you &lt;em&gt;had been doing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A more interesting tool to make people&amp;#8217;s presence more &lt;em&gt;present&lt;/em&gt; is &lt;a href="https://www.sqwiggle.com/"&gt;Sqwiggle&lt;/a&gt;, a kind of always-on video conference.  It&amp;#8217;s not exactly always-on, there is a low-fidelity video with no audio until you start a conversation with someone and it goes to full video and audio.  This way you know not only if someone is actually sitting at the computer, but also if they are eating lunch, if they have the furrowed brows of careful concentration, or are frustrated or distracted.  Unfortunately most people&amp;#8217;s faces only show that they are looking at a screen, with the slightly studious but mostly passive facial expressions that we have when looking at&amp;nbsp;screens.&lt;/p&gt;
&lt;p&gt;Instant messaging has grown to include an additional the presence indicator: &lt;em&gt;I am currently typing a response&lt;/em&gt;.  A better fidelity version of this would indicate if I am typing right now, or if I forgot I started typing and switched tabs but left text in the input box, or if I am trying hard to compose my thoughts (typing and deleting), or if I&amp;#8217;m pasting something, or if I am about to deliver a soliloquy in the form of a giant message.  (Imagine a typing indicator that gives a sense of the number of words you have typed but not&amp;nbsp;sent.)&lt;/p&gt;
&lt;p&gt;I like that instant messaging &lt;em&gt;detects&lt;/em&gt; your state automatically, using something that you are already engaged with (the text input box).  Sqwiggle has a problem here: because you aren&amp;#8217;t trying to project any emotions to your computer screen, Sqwiggle catches expressions that don&amp;#8217;t mean anything.  We can engage with our computers in different ways, there&amp;#8217;s something there to express, it&amp;#8217;s just not revealed on our&amp;nbsp;faces.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;d like to add to the activity indicators we have.  Like the pages (and web apps) you are looking at (or some privacy-aware subset).  I&amp;#8217;d like to show &lt;em&gt;how&lt;/em&gt; you are interacting with those pages.  Are you flopping between tabs?  Are you skimming?  Scrolling through in a way that shows you are studying the page?  Typing?  Clicking&amp;nbsp;controls?&lt;/p&gt;
&lt;p&gt;I want to show something like the body language of how you are interacting with the computer.  First I wondered if we could interpret your actions and show them as things like &amp;#8220;reading&amp;#8221;, &amp;#8220;composing&amp;#8221;, &amp;#8220;being pissed off with your computer&amp;#8221;, etc.  But then I thought more about body language.  When I am angry there&amp;#8217;s no &amp;#8220;angry&amp;#8221; note that shows up above my head.  A furrowed brow isn&amp;#8217;t a message, or at least mostly not a message.  Body language is what we read from cues that aren&amp;#8217;t explicit.  And so we might be able to show &lt;em&gt;what&lt;/em&gt; a person is doing, and let the person watching figure out &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;3. Working in &lt;strong&gt;close&amp;nbsp;parallel&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This is where both people (or more than 2 people) are actively working on the same thing, same project, same goal, but aren&amp;#8217;t directly supporting each other at every&amp;nbsp;moment.&lt;/p&gt;
&lt;p&gt;When you&amp;#8217;ve entered into this level of collaboration you&amp;#8217;ve both agreed that you are working together &amp;#8212; you&amp;#8217;re probably actively talking through tasks, and may regularly be relying on each other (&amp;#8220;does what I wrote sound right?&amp;#8221; or &amp;#8220;did you realize this test is failing&amp;#8221; etc).  A good working meeting will be like this.  A bad meeting would probably have been better if you could have stuck to ambient awareness and promoted it to a more intense level of collaboration only as&amp;nbsp;needed.&lt;/p&gt;
&lt;h3&gt;4. &lt;strong&gt;Working&amp;nbsp;directly&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This is where you are both locked on a &lt;em&gt;single&lt;/em&gt; task.  When I write something and say &amp;#8220;does what I wrote sound right?&amp;#8221; we have to enter this mode: you have to look at exactly what I&amp;#8217;m talking about.  In some sense &amp;#8220;close parallel&amp;#8221; may mean &amp;#8220;prepared to work&amp;nbsp;directly&amp;#8221;.&lt;/p&gt;
&lt;p&gt;I have found that video calls are better than audio-only calls, more than I would have expected.  It&amp;#8217;s not because the video content is interesting.  But the video makes you work directly, while being slightly uncomfortable so you are encouraged to acknowledge when you should end the call.  In a way you want your senses filled.  Or maybe that&amp;#8217;s my propensity to&amp;nbsp;distraction.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s a lot more to video calls than this (like the previously mentioned body language).  But in each feature I suspect there are parallels in collaborative work.  Working directly together should show some of the things that video shows when we are focused on a &lt;em&gt;conversation&lt;/em&gt;, but can&amp;#8217;t show when we are focusing on &lt;em&gt;work&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;5. &lt;strong&gt;Demonstrating&lt;/strong&gt; to another&amp;nbsp;person&lt;/h3&gt;
&lt;p&gt;This is common for instruction and teaching, but that shouldn&amp;#8217;t be the only case we consider.  In Hotdish we have often called it &amp;#8220;presenting&amp;#8221; and &amp;#8220;viewing&amp;#8221;.  In this mode someone is the driver/presenter, and someone is the passenger/viewer.  When the presenter focuses on something, you want the viewer to be aware of that and follow along.  The presenter also wants to be confident that the viewer is following along.  Maybe we want something like how you might say &amp;#8220;uh huh&amp;#8221; when someone is talking to you &amp;#8212; if a listener says nothing it will throw off the talker, and these meaningless indications of active listening are&amp;nbsp;important.&lt;/p&gt;
&lt;p&gt;Demonstration could just be a combination of direct work and social convention.  Does it need to be specially mediated by tools? I&amp;#8217;m not sure.  Do we need a talking stick?  Can I take the talking stick? Are these interactions like a conversation, where sometimes one person enters into a kind of monologue, but the rhythm of the conversation will shift?  If we focus on the demonstration tools we could miss the social interactions we are trying to&amp;nbsp;support.&lt;/p&gt;
&lt;h3&gt;Switching&amp;nbsp;modes&lt;/h3&gt;
&lt;p&gt;Between each of these styles of interaction I think there must be some kind of positive action.  A natural promotion of demotion of your interaction with someone should be mutual.  (A counter example would be the dangling &lt;span class="caps"&gt;IM&lt;/span&gt; conversation, where you are never sure it&amp;#8217;s&amp;nbsp;over.)&lt;/p&gt;
&lt;p&gt;At the same time, the movement between modes also builds your shared context and your relationship with the other person.  You might be proofing an article with another person, and you say: &amp;#8220;clearly this paragraph isn&amp;#8217;t making sense, let me just rewrite it, one minute&amp;#8221; &amp;#8212; now you know you are leaving active collaboration, but you also both know you&amp;#8217;ll be reentering it soon.  You shouldn&amp;#8217;t have to record that expectation with the&amp;nbsp;tool.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m reluctant to put boundaries up between these modes, I&amp;#8217;d rather tools simply &lt;em&gt;inform&lt;/em&gt; people that modes are changing and not &lt;em&gt;ask&lt;/em&gt; if they can change.  This is part of the principles behind &lt;a href="http://www.ianbicking.org/blog/2014/02/defaulting-to-together.html"&gt;Defaulting To Together&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Ownership&lt;/h2&gt;
&lt;p&gt;At least in the context of computers we often have strong notions of &lt;em&gt;ownership&lt;/em&gt;.  Maybe we don&amp;#8217;t have to &amp;#8212; maybe it&amp;#8217;s because we have to hand off work explicitly, and maybe we have to hand off work explicitly because we lack fluid ways to interact, cooperate,&amp;nbsp;delegate.&lt;/p&gt;
&lt;p&gt;With good tools in hand I see &amp;#8220;ownership&amp;#8221; being exchanged more&amp;nbsp;regularly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I find some documentation, then show it to you, and now it&amp;#8217;s yours to make use&amp;nbsp;of.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I am working through a process, get stuck, and need your skills to finish it up.  Now it&amp;#8217;s yours.  But you might hand it back when you unstick&amp;nbsp;me.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You are working through something, but are not permitted to complete the operation, you have to hand it over to me for me to complete the last&amp;nbsp;step.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Layered on this we have the normal notions of ownership and control &amp;#8212; the login accounts and permissions of the applications we are using. Whether these are in opposition to cooperation or maybe complementary I have not&amp;nbsp;decided.&lt;/p&gt;
&lt;h2&gt;Screensharing vs.&amp;nbsp;Peer-to-Peer&lt;/h2&gt;
&lt;p&gt;Perhaps a technical aside, but when dealing with real-time collaboration (not asynchronous) there are two distinct&amp;nbsp;approaches.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screensharing&lt;/strong&gt; means one person (and one computer) is &amp;#8220;running&amp;#8221; the session &amp;#8212; that one person is logged in, their page or app is &amp;#8220;live&amp;#8221;, everyone else sees what they&amp;nbsp;see.&lt;/p&gt;
&lt;p&gt;Screensharing doesn&amp;#8217;t mean other people can&amp;#8217;t interact with the screen, but any interaction has to go through the owner&amp;#8217;s computer. In the case of a web page we can share the &lt;span class="caps"&gt;DOM&lt;/span&gt; (the current visual state of the page) with another person, but we can&amp;#8217;t share the Javascript handlers and state, cookies, etc., so most interactions have to go back through the original browser.  Any side effects have to make a round trip.  Latency is a&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s hard to figure out exactly what interactivity to implement in a screensharing situation. Doing a view-only interaction is not too hard.  There are a few things you can add after that &amp;#8212; maybe you let someone touch a form control, suggest that you follow a link, send clicks across the wire &amp;#8212; but there&amp;#8217;s no clear line to stop at. Worse, there&amp;#8217;s no clear line to &lt;em&gt;express&lt;/em&gt;.  You can implement certain &lt;em&gt;mechanisms&lt;/em&gt; (like a click), but these don&amp;#8217;t always map to what the user thinks they are doing &amp;#8212; something like a drag might involve a mousedown/mousemove/mouseup event, or it might be implemented &lt;a href="https://developer.mozilla.org/en-US/docs/DragDrop/Drag_and_Drop"&gt;directly as dragging&lt;/a&gt;. Implementing one of those interactions is a lot easier than the other, but the distinction means nothing to the&amp;nbsp;user.&lt;/p&gt;
&lt;p&gt;When you implement incomplete interactions you are setting up a situation where a person can do something in the original application that viewers can&amp;#8217;t do, even though it &lt;em&gt;looks&lt;/em&gt; like the real live application.  An uncanny valley of&amp;nbsp;collaboration.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve experimented with &lt;span class="caps"&gt;DOM&lt;/span&gt;-based screen sharing in &lt;a href="https://github.com/mozilla/browsermirror"&gt;Browser Mirror&lt;/a&gt;, and you can see this approach in a tool like &lt;a href="https://surfly.com/"&gt;Surfly&lt;/a&gt;. As I write this a minimal version of this is available in&amp;nbsp;Hotdish.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;peer-to-peer&lt;/strong&gt; collaboration both people are viewing their own version of the live page.  Everything works exactly like in the non-collaborative environment.  Both people are logged in as themselves.  This is the model &lt;a href="https://togetherjs.com"&gt;TogetherJS&lt;/a&gt; uses, and is also present as a separate mode in&amp;nbsp;Hotdish.&lt;/p&gt;
&lt;p&gt;This has a lot of obvious advantages over the problems identified above for screensharing.  The big disadvantage is that hardly anything is collaborative by default in this&amp;nbsp;model.&lt;/p&gt;
&lt;p&gt;In the context of the web the building blocks we &lt;em&gt;do&lt;/em&gt; have&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;URLs.  Insofar as a &lt;span class="caps"&gt;URL&lt;/span&gt; defines the exact interface you look at, then putting both people at the same &lt;span class="caps"&gt;URL&lt;/span&gt; gives a consistent experience.  This works great for applications that use lots of server-side logic.  Amazon is pretty great, for example, or Wikipedia. It falls down when content is substantially customized for each person, like the Facebook frontpage or a flight search&amp;nbsp;result.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Event echoing: events aren&amp;#8217;t based on any internal logic of the program, they are something initiated by the user.  So if the user can do something, a remote user can do something.  Form fields are the best example of this, as there&amp;#8217;s a clear protocol for doing form changes (change the value, fire a &lt;code&gt;change&lt;/code&gt; event).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But we &lt;em&gt;don&amp;#8217;t&lt;/em&gt;&amp;nbsp;have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Consistent event &lt;em&gt;results&lt;/em&gt;: events aren&amp;#8217;t state changes, and transferring events about doesn&amp;#8217;t necessarily lead to a consistent experience. Consider the modest toggle control, where a click on the toggler element shows or hides some other element.  If our hidden states are out of sync (e.g., my toggleable element is hidden, yours is shown), sending the click event between the clients &lt;em&gt;keeps&lt;/em&gt; them consistently and perfectly out of&amp;nbsp;sync.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consistent underlying object models.  In a single-page app of some sort, or a whatever fancy Javascript-driven webapp, a lot of what we see is based on Javascript state and models that are not necessarily consistent across peers.  This is in contrast to old-school server-side apps, where there&amp;#8217;s a good chance the &lt;span class="caps"&gt;URL&lt;/span&gt; contains enough information to keep everything consistent, and ultimately the &amp;#8220;state&amp;#8221; is held on a single server or database that both peers are connecting to. But we can&amp;#8217;t sync the client&amp;#8217;s object models, as they are not built to support arbitrary modification from the outside.  Apps that use a real-time database work&amp;nbsp;well.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make this work the application usually has to support peer-to-peer collaboration to some degree.  A &lt;a href="http://www.ianbicking.org/blog/2013/10/togetherjs-a-postmodern-tool.html"&gt;messy approach&lt;/a&gt; can help, but can never be enough, not complete enough, not robust&amp;nbsp;enough.&lt;/p&gt;
&lt;p&gt;So peer-to-peer collaboration offers potentially more powerful and flexible kinds of collaboration, but only with work on the part of each application.  We can try to make it as &lt;a href="https://hacks.mozilla.org/2013/10/introducing-togetherjs/"&gt;easy as possible&lt;/a&gt;, and maybe integrate with tools or libraries that support the kinds of higher-level synchronization we would want, but it&amp;#8217;s never reliably&amp;nbsp;easy.&lt;/p&gt;
&lt;h2&gt;Synchronized vs. Coordinated&amp;nbsp;Experiences&lt;/h2&gt;
&lt;p&gt;Another question: what kind of experiences do we &lt;em&gt;want&lt;/em&gt; to&amp;nbsp;create?&lt;/p&gt;
&lt;p&gt;The most obvious real-time experience is: everything sees the same thing. Everything is fully synchronized.  In the screensharing model this is what you always get and what you &lt;em&gt;have&lt;/em&gt; to&amp;nbsp;get.&lt;/p&gt;
&lt;p&gt;The obvious experience is probably a good starting point, but shouldn&amp;#8217;t be the end of our&amp;nbsp;thinking.&lt;/p&gt;
&lt;p&gt;The trivial example here is the cursor point.  We can both be editing content and viewing each other&amp;#8217;s edits (close to full sync), but we don&amp;#8217;t have to be at exactly the same place.  (This is something traditional screensharing has a hard time with, as you are sharing a &lt;em&gt;screen of pixels&lt;/em&gt; instead of a &lt;span class="caps"&gt;DOM&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;But other more subtle examples exist.  Maybe only one person has the permission to save a change.  A collaboration-aware application might allow both people to edit, while still only allowing one person to save. (Currently editors will usually be denied to people who don&amp;#8217;t have permission to&amp;nbsp;save.)&lt;/p&gt;
&lt;p&gt;I think there&amp;#8217;s fruit in playing with the timing of actions.  We don&amp;#8217;t have to replay remote actions exactly how they occurred.  For example, in a Demonstration context we might detect that when the driver clicks a link the page will change.  To the person doing the click the order of events is: find the link, focus attention on the link, move cursor to the link, click.  To the viewer the order of events is: cursor moves, maybe a short click indicator, and &lt;em&gt;boom&lt;/em&gt; you are at a new page. There&amp;#8217;s much less context given to the viewer.  But we don&amp;#8217;t have to display those events with the original timing for instance we could let the mouse hover over its target for a more extended amount of time on the&amp;nbsp;viewer.&lt;/p&gt;
&lt;p&gt;High-level (application-specific) representation of actions could be available.  Instead of trying to express what the other person is doing through every click and scroll and twiddling of a form, you might just say &amp;#8220;Bob created a new calendar&amp;nbsp;event&amp;#8221;.&lt;/p&gt;
&lt;p&gt;In the context of something like a bug tracker, you might not want to synchronize the comment field.  Instead you might want to show individual fields for all participants on a page/bug.  Then I can see the other person&amp;#8217;s in-progress comment, even add to it, but I can also compose my own comment as&amp;nbsp;myself.&lt;/p&gt;
&lt;p&gt;This is where the peer-to-peer model has advantages, as it will (by necessity) keep the application in the loop.  It does not demand that collaboration take one form, but it gives the application an environment in which to build a domain-specific form of&amp;nbsp;collaboration.&lt;/p&gt;
&lt;p&gt;We can imagine moving from screenshare to peer-to-peer through a series of enhancements.  The first might be: let applications opt-in to peer-to-peer collaboration, or implement a kind of transparent-to-the-application screensharing, and from there tweak. Maybe you indicate some scripts should run on the viewer&amp;#8217;s side, and some compound &lt;span class="caps"&gt;UI&lt;/span&gt; components can be manipulated.  I can imagine with a component system like &lt;a href="http://mozilla.github.io/brick/"&gt;Brick&lt;/a&gt; where you could identify safe ways to run rich components, avoiding&amp;nbsp;latency.&lt;/p&gt;
&lt;h2&gt;How do you package all&amp;nbsp;this?&lt;/h2&gt;
&lt;p&gt;Given tools and interactions, what is the actual context for&amp;nbsp;collaboration?&lt;/p&gt;
&lt;p&gt;TogetherJS has a model of a persistent session, and you invite people to that session.  Only for technical reasons the session is bound to a specific domain, but not a specific&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;In Hotdish we&amp;#8217;ve used a group approach: you join a group, and your work clearly happens in the group context or&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;One of the interesting things I&amp;#8217;ve noticed when getting feedback about TogetherJS is that people are most interested in controlling and adding to how the sessions are setup.  While, as an implementor, I find myself drawn to the tooling and specific experiences of collaboration, there&amp;#8217;s just as much value in allowing new and interesting groupings of people.  Ways to introduce people, ways to start and end collaboration, ways to connect to people by role instead of identity, and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Should this collaboration be a conversation or an environment?  When it is a &lt;em&gt;conversation&lt;/em&gt; you lead off with the introduction, the &amp;#8220;hello&amp;#8221; the &amp;#8220;so why did you call?&amp;#8221; and finish with &amp;#8220;talk to you later&amp;#8221; &amp;#8212; when it is an &lt;em&gt;environment&lt;/em&gt; you enter the environment and any coparticipants are just there, you don&amp;#8217;t preestablish any specific reason to&amp;nbsp;collaborate.&lt;/p&gt;
&lt;h2&gt;And in&amp;nbsp;conclusion&amp;#8230;&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m still developing these ideas.  And for each idea the real test is if we can create a useful experience.  For instance, I&amp;#8217;m pretty sure there&amp;#8217;s some ambient information we want to show, but I haven&amp;#8217;t figured out&amp;nbsp;what.&lt;/p&gt;
&lt;p&gt;Experience has shown that simple history (as in an activity stream) seems too noisy.  And is history shown by group or&amp;nbsp;person?&lt;/p&gt;
&lt;p&gt;In the past I unintentionally exposed all tab focus and unfocus in TogetherJS, and it felt weird to both expose my own distracted state and my collaborator&amp;#8217;s distraction.  But part of why it was weird was that in some cases it was simply distraction, but in other cases it was useful multitasking (like researching a question in another tab). Was tab focus too much information or too&amp;nbsp;little?&lt;/p&gt;
&lt;p&gt;I am still in the process of figuring out how and where I can explore these questions, build the next thing, and the next thing after that &amp;#8212; the tooling I envision doesn&amp;#8217;t feel impossibly far away, but still more than one iteration of work yet to be done, maybe many more than one but I can only see to the next&amp;nbsp;peak.&lt;/p&gt;
&lt;p&gt;Who else is thinking about these things?  And thinking about how to &lt;strong&gt;build&lt;/strong&gt; these things?  If you are, or you know someone who is, please &lt;a href="mailto:ian@ianbicking.org"&gt;get in contact&lt;/a&gt; &amp;#8212; I&amp;#8217;m eager to talk specifics with people who have been thinking about it too, but I&amp;#8217;m not sure how to find these&amp;nbsp;people.&lt;/p&gt;</content><category term="mozilla"></category><category term="hotdish"></category></entry><entry><title>A Product Journal: Conception</title><link href="https://ianbicking.org/blog/2015/01/product-journal-conception.html" rel="alternate"></link><published>2015-01-15T00:00:00-06:00</published><updated>2015-01-15T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-01-15:/blog/2015/01/product-journal-conception.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m going to try to journal the process of a new product that I&amp;#8217;m developing in &lt;a href="https://blog.mozilla.org/services/"&gt;Mozilla Cloud&amp;nbsp;Services&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When &lt;a href="http://www.ianbicking.org/blog/2014/09/professional-transitions.html"&gt;Labs closed and I entered management&lt;/a&gt; I decided not to do any programming for a while.  I had a lot to learn about management, and that&amp;#8217;s what …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m going to try to journal the process of a new product that I&amp;#8217;m developing in &lt;a href="https://blog.mozilla.org/services/"&gt;Mozilla Cloud&amp;nbsp;Services&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When &lt;a href="http://www.ianbicking.org/blog/2014/09/professional-transitions.html"&gt;Labs closed and I entered management&lt;/a&gt; I decided not to do any programming for a while.  I had a lot to learn about management, and that&amp;#8217;s what I needed to focus on.  Whether I learned what I need to I don&amp;#8217;t know, but I have been getting &lt;a href="http://www.ianbicking.org/blog/2015/01/being-a-manager-is-lonely.html"&gt;a bit tired&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We went through a fairly extensive planning process towards the end of 2014.  I thought it was a good process.  We didn&amp;#8217;t end up where we started, which is a good sign – often planning processes are just documenting the conventional wisdom and status quo of a group or project, but in a critically engaged process you are open to considering and reconsidering your goals and&amp;nbsp;commitments.&lt;/p&gt;
&lt;p&gt;Mozilla is undergoing some stress right now.  We &lt;a href="https://blog.mozilla.org/press/2014/11/yahoo-and-mozilla-form-strategic-partnership/"&gt;have a new search deal&lt;/a&gt;, which is good, but we&amp;#8217;ve been seeing &lt;a href="http://www.forbes.com/sites/antonyleather/2014/08/04/google-chrome-browser-market-share-tops-20-leaves-firefox-in-its-dust/"&gt;declining marketshare&lt;/a&gt; which is bad.  And then when you consider that desktop browsers are themselves a decreasing share of the market it looks&amp;nbsp;worse.&lt;/p&gt;
&lt;p&gt;The first planning around this has been to decrease attrition among our existing users.  Longer term much of the focus has been in increasing the quality of our product.  A noble goal of course, but does it lead to growth?  I suspect it can only address attrition, the people who don&amp;#8217;t use Firefox but could won&amp;#8217;t have an opportunity to see what we are making.  If you have other growth techniques then focusing on attrition can be sufficient.  Chrome for instance does significant advertising and has deals to side-load Chrome onto people&amp;#8217;s computers. Mozilla doesn&amp;#8217;t have the same resources for that kind of&amp;nbsp;growth.&lt;/p&gt;
&lt;p&gt;When finished up the planning process I realized, &lt;em&gt;damn&lt;/em&gt;, all our plans were about product quality.  And I liked our plan!  But something was&amp;nbsp;missing.&lt;/p&gt;
&lt;p&gt;This perplexed me for a while, but I didn&amp;#8217;t really know what to make of it.  Talking with a friend about it he asked &lt;em&gt;then what do you want to make?&lt;/em&gt; – a seemingly obvious question that no one had asked me, and somehow hearing the question coming at me was&amp;nbsp;important.&lt;/p&gt;
&lt;p&gt;Talking through ideas, I reluctantly kept coming back to sharing. It&amp;#8217;s the most incredibly obvious growth-oriented product area, since every use of a product is a way to implore non-users to switch.  But sharing is so competitive.  When I first started with Mozilla we would obsess over the problem of Facebook and Twitter and silos, and then think about it until we threw our hands up in&amp;nbsp;despair.&lt;/p&gt;
&lt;p&gt;But I&amp;#8217;ve had this trick up my sleeve that I pull out for one project after another because I think it&amp;#8217;s a really good trick: make a static copy of the live &lt;span class="caps"&gt;DOM&lt;/span&gt;.  Mostly you just iterate over the elements, get rid of scripts and stuff, do a few other clever things, use &lt;code&gt;&amp;lt;base href&amp;gt;&lt;/code&gt; and you are done!  It&amp;#8217;s like a screenshot, but it&amp;#8217;s also still a webpage.  I&amp;#8217;ve been trying to do something with this &lt;a href="http://pythonhosted.org/Deliverance/"&gt;for a long time&lt;/a&gt;.  This time let&amp;#8217;s use it for&amp;nbsp;sharing&amp;#8230;?&lt;/p&gt;
&lt;p&gt;So, the first attempt at a concept: freeze the page as though it&amp;#8217;s a fancy screenshot, upload it somewhere with a &lt;span class="caps"&gt;URL&lt;/span&gt;, maybe add some fun features because now it&amp;#8217;s disassociated from its original location. The resulting page won&amp;#8217;t 404, you can save personalized or dynamic content, we could add highlighting or other&amp;nbsp;features.&lt;/p&gt;
&lt;p&gt;The big difference with past ideas I&amp;#8217;ve encountered is that here we&amp;#8217;re not trying to compete with &lt;em&gt;how&lt;/em&gt; anyone shares things, this is a tool to improve &lt;em&gt;what&lt;/em&gt; you share.  That&amp;#8217;s compatible with Facebook and Twitter and &lt;span class="caps"&gt;SMS&lt;/span&gt; and &lt;em&gt;anything&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you think pulling a technology out of your back pocket and building a product around it is like putting the cart in front of the horse, well maybe&amp;#8230; but you have to start&amp;nbsp;somewhere.&lt;/p&gt;
&lt;p&gt;[The next post in the series is &lt;a href="http://www.ianbicking.org/blog/2015/01/product-journal-tech-demo.html"&gt;The Tech Demo&lt;/a&gt;]&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry><entry><title>A Product Journal: The Technology Demo</title><link href="https://ianbicking.org/blog/2015/01/product-journal-tech-demo.html" rel="alternate"></link><published>2015-01-22T00:00:00-06:00</published><updated>2015-01-22T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-01-22:/blog/2015/01/product-journal-tech-demo.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I’m going to try to journal the process of a new product that I’m developing in &lt;a href="https://blog.mozilla.org/services/"&gt;Mozilla Cloud Services&lt;/a&gt;.  My previous and first post was &lt;a href="http://www.ianbicking.org/blog/2015/01/product-journal-conception.html"&gt;&lt;em&gt;Conception&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As I &lt;a href="http://www.ianbicking.org/blog/2015/01/product-journal-conception.html"&gt;finished my last post&lt;/a&gt; I had a product idea built around a strategy (growth through social tools and sharing) and …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I’m going to try to journal the process of a new product that I’m developing in &lt;a href="https://blog.mozilla.org/services/"&gt;Mozilla Cloud Services&lt;/a&gt;.  My previous and first post was &lt;a href="http://www.ianbicking.org/blog/2015/01/product-journal-conception.html"&gt;&lt;em&gt;Conception&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As I &lt;a href="http://www.ianbicking.org/blog/2015/01/product-journal-conception.html"&gt;finished my last post&lt;/a&gt; I had a product idea built around a strategy (growth through social tools and sharing) and a technology (freezing or copying the &lt;a href="https://en.wikipedia.org/wiki/Document_Object_Model"&gt;markup&lt;/a&gt;).  But that&amp;#8217;s not a concise product definition centered around user value. It&amp;#8217;s not even &lt;em&gt;trying&lt;/em&gt;.  The result is a technology demo, not a&amp;nbsp;product.&lt;/p&gt;
&lt;p&gt;In my defense I&amp;#8217;m searching for some product, I don&amp;#8217;t know what it is, and I don&amp;#8217;t know if it exists.  I have to push this past a technology demo, but if I have to start with a technology demo then so it&amp;nbsp;goes.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve found a couple specific experiences that help me adapt the&amp;nbsp;product:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I demo the product and I sense an excitement for something I didn&amp;#8217;t expect.  For example, a view that I thought was just a logical necessity might be what most appeals to someone else.  To do this I have to show the tool to people, and it has to include things that &lt;em&gt;I&lt;/em&gt; think are somewhat superfluous.  And I have to be actively reading the person viewing the demo to sense their&amp;nbsp;excitement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remind myself continuously of the strategy.  It also helps when I remind other people, even if they don&amp;#8217;t need reminding – it centers the discussion and my thinking around the goal.  In this case there&amp;#8217;s a lot of personal productivity use cases for the technology, and it&amp;#8217;s easy to drift in that direction.  It&amp;#8217;s easy because &lt;em&gt;the technology&lt;/em&gt; facilitates those use cases.  And while it&amp;#8217;s cool to make something widely useful, that won&amp;#8217;t make this tool work the way I want as a product, or work for Mozilla.  (And because I plan to build this on Mozilla&amp;#8217;s dime it better work for Mozilla!  But that&amp;#8217;s a discussion for another&amp;nbsp;post.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;#8217;ll poorly paraphrase something I&amp;#8217;m sure someone can source in the comments: &lt;em&gt;a product that people love is one that makes those people feel great about themselves&lt;/em&gt;.  In this case, makes them feel like a journalist and not just a crank, or makes them feel like they are successfully posing as a professional, or makes them feel like what they are doing is appreciated by other people, or makes them feel like an efficient organizer.  In the product design you can exult the product, try to impress people, try to attract compliments on your own prowess, but love comes when a person is impressed with themselves when they use your product.  This advice helps keep me from valuing&amp;nbsp;cleverness.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A common way to pull people out of technology-focused thinking is to ask &amp;#8220;what problem does this solve?&amp;#8221;  While I appreciate this question more than I used to, it still makes me bristle.  Why must everything be focused on &lt;em&gt;problems&lt;/em&gt;?  Why not opportunities!  Why?  An answer: problems are cases where a person has already articulated a tension and an openness to resolution.  You have a customer in waiting.  But must we confine ourselves to the partially formed conventional wisdom that makes something a &amp;#8220;problem&amp;#8221;?  (One fair answer to this question is: yes.  I remain open to other answers.)  Maybe a more positive alternative to &amp;#8220;what problem does this solve?&amp;#8221; is &amp;#8220;what does this let people do that they couldn&amp;#8217;t do&amp;nbsp;before?&amp;#8221;&lt;/p&gt;
&lt;p&gt;What I&amp;#8217;m certain of is that you should constantly remember the people using your tool will care most about &lt;em&gt;their&lt;/em&gt; interests, goals, and perspective; and will not care much about the interests, goals, or perspective of the tool&amp;nbsp;maker.&lt;/p&gt;
&lt;p&gt;So what should this tool do?  If not technology, what defines it?  A pithy byline might be &lt;em&gt;share better&lt;/em&gt;.  I don&amp;#8217;t like pithy, but maybe a whole bag of&amp;nbsp;pithy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improving on the &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Own what you&amp;nbsp;share&lt;/li&gt;
&lt;li&gt;Share content, not&amp;nbsp;pointers&lt;/li&gt;
&lt;li&gt;Share what you see, anything you&amp;nbsp;see&lt;/li&gt;
&lt;li&gt;Every share is a message, make it your message&lt;br&gt; Dammit, why do I feel compelled to noun&amp;nbsp;&amp;#8220;share&amp;#8221;?&lt;/li&gt;
&lt;li&gt;Share the context, the journey, not just the web&amp;nbsp;destination&lt;/li&gt;
&lt;li&gt;Own your perspective, don&amp;#8217;t give it over to site&amp;nbsp;owners&lt;/li&gt;
&lt;li&gt;Know how and when people see what you&amp;nbsp;share&lt;/li&gt;
&lt;li&gt;Build better content, even if the publisher&amp;nbsp;doesn&amp;#8217;t&lt;/li&gt;
&lt;li&gt;Trade in content, not promises for&amp;nbsp;content&lt;/li&gt;
&lt;li&gt;Copy/enhance/share&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No&amp;#8230; quantity doesn&amp;#8217;t equal quantity I suppose.  Another&amp;nbsp;attempt:&lt;/p&gt;
&lt;p&gt;When you share, you are a publisher.  Your medium is the &lt;span class="caps"&gt;IM&lt;/span&gt; text input, or the Facebook status update, or the email composition window. It seems casual, it seems pithy, but that individual publishing is what the web is built on.  I respect everyone as a publisher, every medium as worthy of improvement, and this project will respect your efforts. We will try to make a tool that can make every instance just a little bit better, simple when all you need is simple, polished if you want.  We will defer your decisions because you should decide in context, not make decisions in the order that makes our work easier; we will be transparent to you, your audience, and your source; respect for the reader is part of our brand promise, and that adds to the quality of your shares; we believe content is a message, a relationship between you and your audience, and there is no universally appropriate representation; we believe there is order and structure in information, but only when that information is put to use; we believe our beliefs are always provisional and tomorrow it is our prerogative to rebelieve whatever we want&amp;nbsp;most.&lt;/p&gt;
&lt;p&gt;Who is &lt;em&gt;we&lt;/em&gt;?  Just me.  A pretentiously royal &lt;em&gt;we&lt;/em&gt;.  It can&amp;#8217;t stay that way for long though.  More on that&amp;nbsp;soon&amp;#8230;&lt;/p&gt;
&lt;p&gt;[The next post in this series is &lt;a href="http://www.ianbicking.org/blog/2015/01/product-journal-mvp.html"&gt;To &lt;span class="caps"&gt;MVP&lt;/span&gt; Or Not To &lt;span class="caps"&gt;MVP&lt;/span&gt;&lt;/a&gt;]&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry><entry><title>A Product Journal: To MVP Or Not To MVP</title><link href="https://ianbicking.org/blog/2015/01/product-journal-mvp.html" rel="alternate"></link><published>2015-01-27T00:00:00-06:00</published><updated>2015-01-27T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-01-27:/blog/2015/01/product-journal-mvp.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m going to try to journal the process of a new product that I&amp;#8217;m developing in &lt;a href="https://blog.mozilla.org/services/"&gt;Mozilla Cloud Services&lt;/a&gt;.  My previous post was &lt;a href="http://www.ianbicking.org/blog/2015/01/product-journal-tech-demo.html"&gt;&lt;em&gt;The Tech Demo&lt;/em&gt;&lt;/a&gt;, and the first in the series is &lt;a href="http://www.ianbicking.org/blog/2015/01/product-journal-conception.html"&gt;&lt;em&gt;Conception&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The Minimal Viable&amp;nbsp;Product&lt;/h2&gt;
&lt;p&gt;The Minimal Viable Product is a popular product development approach …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m going to try to journal the process of a new product that I&amp;#8217;m developing in &lt;a href="https://blog.mozilla.org/services/"&gt;Mozilla Cloud Services&lt;/a&gt;.  My previous post was &lt;a href="http://www.ianbicking.org/blog/2015/01/product-journal-tech-demo.html"&gt;&lt;em&gt;The Tech Demo&lt;/em&gt;&lt;/a&gt;, and the first in the series is &lt;a href="http://www.ianbicking.org/blog/2015/01/product-journal-conception.html"&gt;&lt;em&gt;Conception&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The Minimal Viable&amp;nbsp;Product&lt;/h2&gt;
&lt;p&gt;The Minimal Viable Product is a popular product development approach at Mozilla, and judging from Hacker News it is popular everywhere (but that is a wildly inaccurate way to judge common&amp;nbsp;practice).&lt;/p&gt;
&lt;p&gt;The idea is that you build the smallest thing that could be useful, and you ship it.  The idea isn&amp;#8217;t to make a great product, but to make &lt;em&gt;something&lt;/em&gt; so you can learn in the field.  A couple&amp;nbsp;definitions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Minimum Viable Product (&lt;span class="caps"&gt;MVP&lt;/span&gt;) is a key lean startup concept popularized by Eric Ries. The basic idea is to &lt;strong&gt;maximize validated learning for the least amount of effort&lt;/strong&gt;. After all, why waste effort building out a product without first testing if it’s worth&amp;nbsp;it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&amp;#8221;&amp;#8220;– from &lt;a href="http://practicetrumpstheory.com/how-i-built-my-minimum-viable-product/"&gt;How I built my Minimum Viable Product&lt;/a&gt; (emphasis in&amp;nbsp;original)&amp;#8221;&amp;#8220;&amp;#8221;&lt;/p&gt;
&lt;p&gt;I like this phrase &amp;#8220;validated learning.&amp;#8221;  Another&amp;nbsp;definition:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A core component of Lean Startup methodology is the build-measure-learn feedback loop. The first step is figuring out the problem that needs to be solved and then developing a minimum viable product (&lt;span class="caps"&gt;MVP&lt;/span&gt;) to begin the process of learning as quickly as possible. &lt;strong&gt;Once the &lt;span class="caps"&gt;MVP&lt;/span&gt; is established, a startup can work on tuning the engine.&lt;/strong&gt; This will involve measurement and learning and must include actionable metrics that can demonstrate cause and effect&amp;nbsp;question.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&amp;#8221;&amp;#8220;– &lt;a href="http://theleanstartup.com/principles"&gt;Lean Startup Methodology&lt;/a&gt; (emphasis&amp;nbsp;added)&amp;#8221;&amp;#8220;&amp;#8221;&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t like this model at all: &amp;#8220;once the &lt;span class="caps"&gt;MVP&lt;/span&gt; is established, a startup can work on &lt;strong&gt;tuning the engine&lt;/strong&gt;.&amp;#8221;  You &lt;em&gt;tune&lt;/em&gt; something that works the way you want it to, but isn&amp;#8217;t powerful or efficient or fast enough.  You&amp;#8217;ve established almost nothing when you&amp;#8217;ve created an &lt;span class="caps"&gt;MVP&lt;/span&gt;, no aspect of the product is validated, it would be premature to tune. But I see this antipattern happen frequently: get an &lt;span class="caps"&gt;MVP&lt;/span&gt; out quickly, often shutting down critically engaged deliberation in order to Just Get It Shipped, then use that product as the model for further incremental improvements.  Just Get It Shipped is okay, incrementally improving products is okay, but together they are boring and&amp;nbsp;uncreative.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s another broad discussion to be had another time about how to enable positive and constructive critical engagement around a project. It&amp;#8217;s not easy, but that&amp;#8217;s where learning happens, and the &lt;strong&gt;purpose of the &lt;span class="caps"&gt;MVP&lt;/span&gt; is to learn, not to produce&lt;/strong&gt;.  In contrast I find myself impressed by the shear willfulness of the &lt;a href="http://www.gamasutra.com/view/feature/131815/the_cabal_valves_design_process_.php"&gt;Halflife development process&lt;/a&gt; which apparently involved months of six hour design meetings, four days a week, producing large and detailed design documents.  Maybe I&amp;#8217;m impressed because it sounds &lt;em&gt;so exhausting&lt;/em&gt;, a feat of endurance.  And perhaps it implies that waterfall can work if you invest in it&amp;nbsp;properly.&lt;/p&gt;
&lt;h2&gt;Plan plan&amp;nbsp;plan&lt;/h2&gt;
&lt;p&gt;I have a certain respect for this development pattern that Dijkstra&amp;nbsp;describes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; In practice it often appears that pressures of production reward clever programming over good programming: how are we progressing in making the case that good programming is also cost&amp;nbsp;effective?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Well, it has been said over and over again that the tremendous cost of programming is caused by the fact that it is done by cheap labor, which makes it very expensive, and secondly that people rush into coding. One of the things people learn in colleges nowadays is to think first; that makes the development more cost effective. I know of at least one software house in France, and there may be more because this story is already a number of years old, where it is a firm rule of the house, that for whatever software they are committed to deliver, coding is not allowed to start before seventy percent of the scheduled time has elapsed. So if after nine months a project team reports to their boss that they want to start coding, he will ask: &amp;#8220;Are you sure there is nothing else to do?&amp;#8221; If they say yes, they will be told that the product will ship in three months. That company is highly&amp;nbsp;successful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&amp;#8221;&amp;#8220;– from &lt;a href="https://www.cs.utexas.edu/users/EWD/misc/vanVlissingenInterview.html"&gt;Interview Prof. Dr. Edsger W. Dijkstra, Austin, 04–03–1985&lt;/a&gt;&amp;#8220;&amp;#8221;&amp;#8220;&lt;/p&gt;
&lt;p&gt;Or, a warning &lt;a href="http://www.linfo.org/q_programming.html"&gt;from a page full of these kind of quotes&lt;/a&gt;: &amp;#8220;Weeks of programming can save you hours of planning.&amp;#8221;  The planning process Dijkstra describes is intriguing, it says something like: if you spend two weeks making a plan for how you&amp;#8217;ll complete a project in two weeks then it is an appropriate investment to spend another week of planning to save half a week of programming.  Or, if you spend a month planning for a month of programming, then you haven&amp;#8217;t invested enough in planning to justify that programming work – to ensure the quality, to plan the order of approach, to understand the pieces that fit together, to ensure the foundation is correct, ensure the staffing is appropriate, and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;I believe &amp;#8220;Waterfall Design&amp;#8221; gets much of its negative connotation from a lack of good design.  A Waterfall process requires the design to be &lt;em&gt;very very good&lt;/em&gt;.  With Waterfall the design is too important to leave it to the experts, to let the architect arrange technical components, the program manager to arrange schedules, the database architect to design the storage, and so on.  It&amp;#8217;s anti-collaborative, disengaged.  It relies on intuition and common sense, and those are not powerful enough.  I&amp;#8217;ll quote Dijkstra&amp;nbsp;again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The usual way in which we plan today for tomorrow is in yesterday&amp;#8217;s vocabulary. We do so, because we try to get away with the concepts we are familiar with and that have acquired their meanings in our past experience. Of course, the words and the concepts don&amp;#8217;t quite fit because our future differs from our past, but then we stretch them a little bit. Linguists are quite familiar with the phenomenon that the meanings of words evolve over time, but also know that this is a slow and gradual&amp;nbsp;process.&lt;/p&gt;
&lt;p&gt;It is the most common way of trying to cope with novelty: by means of metaphors and analogies we try to link the new to the old, the novel to the familiar. Under sufficiently slow and gradual change, it works reasonably well; in the case of a sharp discontinuity, however, the method breaks down: though we may glorify it with the name &amp;#8220;common sense&amp;#8221;, our past experience is no longer relevant, the analogies become too shallow, and the metaphors become more misleading than illuminating. This is the situation that is characteristic for the &amp;#8220;radical&amp;#8221;&amp;nbsp;novelty.&lt;/p&gt;
&lt;p&gt;Coping with radical novelty requires an orthogonal method. One must consider one&amp;#8217;s own past, the experiences collected, and the habits formed in it as an unfortunate accident of history, and one has to approach the radical novelty with a blank mind, consciously refusing to try to link it with what is already familiar, because the familiar is hopelessly inadequate. One has, with initially a kind of split personality, to come to grips with a radical novelty as a dissociated topic in its own right. Coming to grips with a radical novelty amounts to creating and learning a new foreign language that can not be translated into one&amp;#8217;s mother tongue. (Any one who has learned quantum mechanics knows what I am talking about.) Needless to say, adjusting to radical novelties is not a very popular activity, for it requires hard work. For the same reason, the radical novelties themselves are&amp;nbsp;unwelcome.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&amp;#8221;&amp;#8220;– from &lt;a href="https://www.cs.utexas.edu/~EWD/transcriptions/EWD10xx/EWD1036.html"&gt;&lt;span class="caps"&gt;EWD&lt;/span&gt; 1036, On the cruelty of really teaching computing science&lt;/a&gt;&amp;#8220;&amp;#8221;&amp;#8220;&lt;/p&gt;
&lt;h1&gt;Research&lt;/h1&gt;
&lt;p&gt;All this praise of planning implies you know what you are trying to make.&amp;nbsp;Unlikely!&lt;/p&gt;
&lt;p&gt;Coding can be a form of planning.  You can&amp;#8217;t research how interactions feel without having an actual interaction to look at.  You can&amp;#8217;t figure out how feasible some techniques are without trying them. Planning without collaborative creativity is dull, planning without research is just documenting someone&amp;#8217;s&amp;nbsp;intuition.&lt;/p&gt;
&lt;p&gt;The danger is that when you are planning with code, it &lt;em&gt;feels&lt;/em&gt; like execution.  You can &lt;a href="http://c2.com/cgi/wiki?PlanToThrowOneAway"&gt;plan to throw one away&lt;/a&gt; to put yourself in the right state of mind, but I think it is better to simply be clear and transparent about &lt;em&gt;why&lt;/em&gt; you are writing the code you are writing.  Transparent because the danger isn&amp;#8217;t just that &lt;em&gt;you&lt;/em&gt; confuse your coding with execution, but that anyone else is likely to confuse the two as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;So code up a storm to learn, code up something usable so people will use it and then you can learn from that&amp;nbsp;too.&lt;/p&gt;
&lt;h1&gt;My own&amp;nbsp;conclusion&amp;#8230;&lt;/h1&gt;
&lt;p&gt;I&amp;#8217;m not making an &lt;span class="caps"&gt;MVP&lt;/span&gt;.  I&amp;#8217;m not going to make a maximum viable product either – rather, the next step in the project is not to make a viable product.  The next stage is research and learning.  Code is going to be part of that.  Dogfooding will be part of it too, because I believe that&amp;#8217;s important for learning.  I fear thinking in terms of &amp;#8220;&lt;span class="caps"&gt;MVP&lt;/span&gt;&amp;#8221; would let us lose sight of the &lt;em&gt;why&lt;/em&gt; behind this iteration – it is a dangerous abstraction during a period of product&amp;nbsp;definition.&lt;/p&gt;
&lt;p&gt;Also, if you&amp;#8217;ve gotten this far, you&amp;#8217;ll see I&amp;#8217;m not creating minimal viable blog posts.  Sorry about&amp;nbsp;that.&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry><entry><title>A Product Journal: Building for a Demo</title><link href="https://ianbicking.org/blog/2015/02/product-journal-building-a-demo.html" rel="alternate"></link><published>2015-02-18T00:00:00-06:00</published><updated>2015-02-18T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-02-18:/blog/2015/02/product-journal-building-a-demo.html</id><summary type="html">&lt;p&gt;I&amp;#8217;ve been trying to work through a post on technology choices, as I had it in my mind that we should rewrite substantial portions of the product.  We&amp;#8217;ve just upped the team size to two, adding &lt;a href="http://donovanpreston.blogspot.com/"&gt;Donovan Preston&lt;/a&gt;, and it&amp;#8217;s an opportunity to share in some of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve been trying to work through a post on technology choices, as I had it in my mind that we should rewrite substantial portions of the product.  We&amp;#8217;ve just upped the team size to two, adding &lt;a href="http://donovanpreston.blogspot.com/"&gt;Donovan Preston&lt;/a&gt;, and it&amp;#8217;s an opportunity to share in some of these decisions. And get rid of code that was desperately expedient.  The server is only &lt;a href="https://github.com/mozilla-services/pageshot/blob/f3df30ccaf64b75426e87325addc6fac373ba220/appengine/pageshotpages/main.py"&gt;400ish lines&lt;/a&gt;, with some significant copy-and-paste, so we&amp;#8217;re not losing any big&amp;nbsp;investment.&lt;/p&gt;
&lt;p&gt;Now I wonder if part of the &lt;a href="http://www.joelonsoftware.com/articles/fog0000000069.html"&gt;danger of a rewrite&lt;/a&gt; isn&amp;#8217;t the effort, but that it&amp;#8217;s an excuse to go heads-down and starve your situational&amp;nbsp;awareness.&lt;/p&gt;
&lt;p&gt;In other news there has been a &lt;a href="http://blog.johnath.com/2015/02/17/home-for-a-rest/"&gt;major resignation&lt;/a&gt; at Mozilla.  I&amp;#8217;d read into it largely what Johnathan implies in his post: things seem to be on a good track, so he&amp;#8217;s comfortable leaving. But the &lt;span class="caps"&gt;VP&lt;/span&gt; of Firefox can&amp;#8217;t leave without some significant organizational impact.  Now is an important time for me to be situationally aware, and for the product itself to show situational awareness.  The technical underpinnings aren&amp;#8217;t that relevant at this&amp;nbsp;moment.&lt;/p&gt;
&lt;p&gt;So instead, if only for a few days, I want to move back into expedient demoable product mode.  Now is the time to explain the product to other people in&amp;nbsp;Mozilla.&lt;/p&gt;
&lt;p&gt;The choices this implies feel weird at times.  What is most important? Security bugs?  Hardly!  It needs to demonstrate some things to different&amp;nbsp;stakeholders:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are some technical parts that require demonstration.  Can we freeze the &lt;span class="caps"&gt;DOM&lt;/span&gt; and produce something usable?  Only an existence proof is really convincing.  Can we do a login system?  Of course!  So I build out the &lt;span class="caps"&gt;DOM&lt;/span&gt; freezing and fix bugs in it, but I&amp;#8217;m preparing to build a login system where you type in your email address.  I&amp;#8217;m sure you wouldn&amp;#8217;t lie so we&amp;#8217;ll just believe you are who you say you&amp;nbsp;are.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But I want to get to the interesting questions.  Do we require a login for this system?  If not, what can an anonymous user do?  I don&amp;#8217;t have an answer, but I want to engage people in the question.  I think one of the best outcomes of a demo is having people think about these questions, offer up solutions and criticisms.  If the demo makes everyone really impressed with how smart I am that is very self-gratifying, but it does not engage people with the product, and I want to build engagement.  To ask a good question I do need to build enough of the context to clarify the question.  I at least need fake&amp;nbsp;logins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;#8217;ve been getting design/user experience help from &lt;a href="http://www.brampitoyo.com/"&gt;Bram Pitoyo&lt;/a&gt; too, and now we have a number of interesting mockups.  More than we can implemented in short order.  I&amp;#8217;m trying to figure out how to integrate these mockups into the demo itself &amp;#8212; as simple as &amp;#8220;also look at this idea we have&amp;#8221;.  We should maintain a similar style (colors, basic layout), so that someone can look at a mockup and use all the context that I&amp;#8217;ve introduced from the live&amp;nbsp;demo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So far I&amp;#8217;ve put no effort into onboarding.  A person who picks up the tool may have no idea how it is supposed to be used.  Or maybe they would figure it out: I haven&amp;#8217;t even thought it through.  Since &lt;em&gt;I&lt;/em&gt; know how it works, and I&amp;#8217;m doing the demo, that&amp;#8217;s okay.  My in-person narration is the onboarding experience.  But even if I&amp;#8217;m trying to explain the product internally, I should recognize I&amp;#8217;m cutting myself off from an organic growth of&amp;nbsp;interest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are other stakeholders I keep forgetting about.  I need to speak to the &lt;a href="https://www.mozilla.org/en-US/about/manifesto/"&gt;Mozilla Mission&lt;/a&gt;. I think I have a good story to tell there, but it&amp;#8217;s not the conventional wisdom of what it means to embody the mission.  I see this as a tool of direct outward-facing individual empowerment, not the mediated power of federation, not the opting-out power of privacy, not the committee-mediated and developer driven power of&amp;nbsp;standards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another stakeholder: people who care about the Firefox brand and marketing our products.  Right now the tool lacks any branding, and it would be inappropriate to deploy this as a branded product right now. But I can &lt;em&gt;demo&lt;/em&gt; a branded product.  There may also be room to experiment with a &lt;a href="https://en.wikipedia.org/wiki/Call_to_action_(marketing)"&gt;call to action&lt;/a&gt;, and to start a discussion about what that would mean.  I shouldn&amp;#8217;t be afraid to do it really badly, because that starts the conversation, and I&amp;#8217;d rather attract the people who think deeply about these things than try to solve them&amp;nbsp;myself.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So I&amp;#8217;m off now on another iteration of really scrappy coding, along with some strategic&amp;nbsp;fakery.&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry><entry><title>A Product Journal: As A Working Manager</title><link href="https://ianbicking.org/blog/2015/03/product-journal-as-a-working-manager.html" rel="alternate"></link><published>2015-03-10T00:00:00-05:00</published><updated>2015-03-10T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-03-10:/blog/2015/03/product-journal-as-a-working-manager.html</id><summary type="html">&lt;p&gt;One of the bigger changes going from engineer to manager was to redefine what I meant by the question: &lt;em&gt;how are we going to do this?&lt;/em&gt;  As an engineer I would deconstruct that question to ask what is the software we need to build, and the technical barriers we need …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the bigger changes going from engineer to manager was to redefine what I meant by the question: &lt;em&gt;how are we going to do this?&lt;/em&gt;  As an engineer I would deconstruct that question to ask what is the software we need to build, and the technical barriers we need to remove, to achieve our goals.  As a manager I would deconstruct that question to ask what is the process by which we achieve our&amp;nbsp;goals.&lt;/p&gt;
&lt;p&gt;When I wear my manager hat and ask &amp;#8220;how are we going to do this?&amp;#8221; I get a little frustrated when I get the answer &amp;#8220;I don&amp;#8217;t know.&amp;#8221;  But that&amp;#8217;s unfair – there are always problems to which we do not know the answer.  What makes me frustrated is when the answer comes too quick, when someone says &amp;#8220;I don&amp;#8217;t know&amp;#8221; because they are missing something they feel they need to come up with an answer.  &lt;em&gt;I don&amp;#8217;t know&lt;/em&gt; because we have to write more code before we know if the idea is feasible.  &lt;em&gt;I don&amp;#8217;t know&lt;/em&gt; because the decision is someone else&amp;#8217;s, and so&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;You know!  If the decision is someone else&amp;#8217;s, then the answer to the question is: we are going to do this by asking that other person what they want and how they are going to make that decision.  If we don&amp;#8217;t know if the idea is feasible, then the answer to the question is: we are going to do this by exploring the feasibility of this technique, and doing another iteration of planning once we know more.  &amp;#8220;I don&amp;#8217;t know because&amp;#8230;&amp;#8221; is fine because it is an answer of sorts, it lets the team make an answer in the form of a process.  &amp;#8220;I don&amp;#8217;t know.&amp;#8221; – ended with a period – is even okay for a moment, if you treat it as meaning &amp;#8220;I don&amp;#8217;t know so we are going to do this by learning.&amp;#8221;  It&amp;#8217;s the &amp;#8220;I don&amp;#8217;t know, let&amp;#8217;s move on&amp;#8221; that I don&amp;#8217;t&amp;nbsp;like.&lt;/p&gt;
&lt;p&gt;But I&amp;#8217;m being a little unfair.  It&amp;#8217;s my job as a manager to answer at the process level.  While I try very hard not to pigeonhole people, maybe I should also work harder at accepting when people establish bounds to their role.  When you are trying to &lt;em&gt;produce&lt;/em&gt; it can make sense to stay focused, to resist going meta.  When you are working in a team, you should rely on the diverse skills of your teammates to let go of certain parts of the project.  It can be okay to go heads-down.  (Sometimes; and sometimes everyone on the team must lift their heads and respond to&amp;nbsp;circumstance.)&lt;/p&gt;
&lt;p&gt;This is a long-winded way of saying that I appreciate more of the difference in perspective of an engineer and a manager.  It&amp;#8217;s hard to hold both perspectives at once, and harder still to act on&amp;nbsp;both.&lt;/p&gt;
&lt;p&gt;In my new project I am returning to development, and entering into the role of &lt;em&gt;working manager&lt;/em&gt;, an odd way to say that I am performing the same tasks that I am also managing.  I &lt;a href="http://www.ianbicking.org/blog/2014/09/professional-transitions.html"&gt;cut myself off from programming&lt;/a&gt; when I started management so that I would not let myself be distracted from a new role and the considerable learning I had to do.  Returning to programming, I can tell I was right to do&amp;nbsp;so.&lt;/p&gt;
&lt;p&gt;Moving between these two mindsets, and two very different ways of working, is challenging.  In both I want to be proactive, but as a manager towards people, and as an engineer towards code.  With people I&amp;#8217;m investing my time in small chunks, trying to keep a good velocity of communication, watching for dropped balls, and the payoffs are largely indirect and deferred.  With code it takes time to navigate my next task, I want to focus, I&amp;#8217;m constantly trying to narrow that focus.  And the payoff is direct and immediate: working code.  This narrowed focus is a way to push forward much more reliably, so long as I know which way is&amp;nbsp;forward.&lt;/p&gt;
&lt;p&gt;But I&amp;#8217;m a working manager.  Is now the right time to investigate that odd log message I&amp;#8217;m seeing, or to think about who I should talk to about product opportunities?  There&amp;#8217;s no metric to compare the priority of two tasks that are so far&amp;nbsp;apart.&lt;/p&gt;
&lt;p&gt;If I am going to find time to do development I am a bit worried I have two&amp;nbsp;options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keep doing programming after&amp;nbsp;hours&lt;/li&gt;
&lt;li&gt;Start dropping some balls as a&amp;nbsp;manager&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;#8217;ve been doing a little of both.  To mitigate the effect of dropping balls I&amp;#8217;ve tried my best to be transparent about this.  It may have been effective: I am not doing my best work on X, because I&amp;#8217;m trying to do my best work on Y.  But I won&amp;#8217;t really know if this has worked until later, turnaround on relationship feedback takes a&amp;nbsp;while.&lt;/p&gt;
&lt;p&gt;An aside: I&amp;#8217;ve been learning a bit about &lt;a href="http://www.gv.com/lib/how-google-sets-goals-objectives-and-key-results-okrs"&gt;Objectives and Key Results&lt;/a&gt;, a kind of quarterly performance analysis structure, and I particularly appreciate how it asks people to attempt to achieve 70% of their identified goals, not 100%.  If you commit to 100% then you&amp;#8217;ve committed yourself to a plan you made at the beginning of the quarter.  You&amp;#8217;ve erased your agency to&amp;nbsp;prioritize.  &lt;/p&gt;
&lt;p&gt;Anyway, onward and upward, and wish me luck in letting the right balls&amp;nbsp;drop.&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry><entry><title>A Product Journal: The Evolutionary Prototype</title><link href="https://ianbicking.org/blog/2015/03/product-journal-evolutionary-prototype.html" rel="alternate"></link><published>2015-03-20T00:00:00-05:00</published><updated>2015-03-20T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-03-20:/blog/2015/03/product-journal-evolutionary-prototype.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I came upon a new (for me) term recently: &lt;a href="https://en.wikipedia.org/wiki/Software_prototyping#Evolutionary_prototyping"&gt;evolutionary prototyping&lt;/a&gt;.  This is in contrast to the &lt;a href="https://en.wikipedia.org/wiki/Software_prototyping#Throwaway_prototyping"&gt;rapid or throwaway prototype&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another term for the rapid prototype: the &amp;#8220;close-ended …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I came upon a new (for me) term recently: &lt;a href="https://en.wikipedia.org/wiki/Software_prototyping#Evolutionary_prototyping"&gt;evolutionary prototyping&lt;/a&gt;.  This is in contrast to the &lt;a href="https://en.wikipedia.org/wiki/Software_prototyping#Throwaway_prototyping"&gt;rapid or throwaway prototype&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another term for the rapid prototype: the &amp;#8220;close-ended prototype.&amp;#8221;  The prototype with a sunset, unlike the evolutionary prototype which is expected to become the final product, even if every individual piece of work will only end up as disposable scaffolding for the final&amp;nbsp;product.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The main goal when using Evolutionary Prototyping is to build a very robust prototype in a structured manner and constantly refine&amp;nbsp;it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first version of the product, written primarily late at night, was definitely a throwaway prototype.  All imperative jQuery &lt;span class="caps"&gt;UI&lt;/span&gt; and lots of copy-and-paste code.  It served its purpose.  I was able to extend that code reasonably well – and I played with many ideas during that initial stage – but it was unreasonable to ask anyone else to touch it, and even I hated the code when I had stepped away from it for a couple weeks.  So most of the code is being rewritten for the next&amp;nbsp;phase.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To minimize risk, the developer does not implement poorly understood features. The partial system is sent to customer sites. As users work with the system, they detect opportunities for new features and give requests for these features to developers. Developers then take these enhancement requests along with their own and use sound configuration-management practices to change the software-requirements specification, update the design, recode and&amp;nbsp;retest.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thinking about this, it&amp;#8217;s a lot like the &lt;a href="https://en.wikipedia.org/wiki/Minimum_viable_product"&gt;Minimal Viable Product&lt;/a&gt; approach.  Of which &lt;a href="http://www.ianbicking.org/blog/2015/01/product-journal-mvp.html"&gt;I am skeptical&lt;/a&gt;.  And maybe I&amp;#8217;m skeptical because I see &lt;span class="caps"&gt;MVP&lt;/span&gt; as reductive, encouraging the aggressive stripping down of a product, and in the process encouraging design based on conventional wisdom instead of critical engagement.  When people push me in that direction I get cagey and defensive (not a great response on my part, just acknowledging it).  The framing of the evolutionary prototype feels more humble to me.  I don&amp;#8217;t want to focus on the question &amp;#8220;how can we most quickly get this into users hands?&amp;#8221; but instead &amp;#8220;what do we know we should build, so we can &lt;a href="http://kiriakakis.net/comics/mused/a-day-at-the-park"&gt;collect&lt;/a&gt; a fuller list of questions we want to&amp;nbsp;answer?&amp;#8221;&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry><entry><title>A Product Journal: What Are We Making?</title><link href="https://ianbicking.org/blog/2015/04/product-journal-what-are-we-making.html" rel="alternate"></link><published>2015-04-21T00:00:00-05:00</published><updated>2015-04-21T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-04-21:/blog/2015/04/product-journal-what-are-we-making.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;ve managed to mostly avoid talking about what we&amp;#8217;re making here.  Perhaps shyness, we (the PageShot team) don&amp;#8217;t yet know where it&amp;#8217;s going, or if …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;ve managed to mostly avoid talking about what we&amp;#8217;re making here.  Perhaps shyness, we (the PageShot team) don&amp;#8217;t yet know where it&amp;#8217;s going, or if we&amp;#8217;ll manage to get this into&amp;nbsp;Firefox.&lt;/p&gt;
&lt;p&gt;We are making a tool for sharing on the web.  This tool creates a new kind of &lt;em&gt;thing&lt;/em&gt; to share, it&amp;#8217;s not a communication medium of any kind.  We&amp;#8217;re calling it &lt;strong&gt;PageShot&lt;/strong&gt;, similar to a screenshot but with all the power we can add to it since web pages are much more understandable than pixels.  (The things it makes we call a &lt;strong&gt;Shot&lt;/strong&gt;.)&lt;/p&gt;
&lt;p&gt;The tool emphasizes sharing clips or highlights from pages.  These can be screenshots (full or part of the screen) or text clippings.  Along with those clips we keep an archival copy of the entire web page, preserving the full context of the page you were looking at and the origin of each clip.  Generally we try to save as much information and context about the page as we can.  We are trying to avoid &lt;em&gt;choices&lt;/em&gt;, the burdensome effort to decide what you might want in the future.  The more effort you put into using this tool, the more information or specificity you can add to your Shot, but we do what we can to save &lt;em&gt;everything&lt;/em&gt; so you can sort it out later if you&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;I mentioned &lt;a href="http://www.ianbicking.org/blog/2015/01/product-journal-conception.html"&gt;earlier&lt;/a&gt; that I started this idea thinking about how to make use of frozen copies of the &lt;span class="caps"&gt;DOM&lt;/span&gt;.  What we&amp;#8217;re working on now looks much more like a screenshotting tool that happens to keep this copy of the page.  This changed happened in part because of &lt;a href="https://blog.mozilla.org/ux/2015/02/save-share-revisit/"&gt;user research done at Mozilla&lt;/a&gt; around saving and sharing, where I became aware of just how prevalent screenshots had become to many&amp;nbsp;people.&lt;/p&gt;
&lt;figure style="float: right; background-color: rgba(240, 240, 240, 0.4); padding: 5px; width: 50%; border: 1px solid #aaa; border-radius: 3px;"&gt;&lt;a href="/static/media/pageshot-early-screenshot.png"&gt;&lt;img style="width: 100%; height: auto" src="/static/media/pageshot-early-screenshot.png" /&gt;&lt;/a&gt;&lt;figcaption style="font-size: 80%; line-height: 1em; text-align: center;"&gt;The current (rough) state of the tool&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;It&amp;#8217;s not hard to understand the popularity of screenshots, specifically on mobile devices.  iPhone users at least have mostly figured out screenshotting, functionality that remains somewhat obscure on desktop devices (and for the life of me I can&amp;#8217;t get my Android device to make a screenshot).  Also screenshots are the one thing that works across applications – even with an application that supports sharing, you don&amp;#8217;t really know what&amp;#8217;s going to be shared, but you know what the screenshot will contain.  You can also share screenshots with confidence: the recipient won&amp;#8217;t have to log in or sign up, they can read it on any device they want, once it has arrived they don&amp;#8217;t need a network connection.  Screenshots are a reliable tool.  A lesson I try to regularly remind myself of: availability beats&amp;nbsp;fidelity.&lt;/p&gt;
&lt;p&gt;In a similar vein we&amp;#8217;ve seen the rise of the animated gif over the video (though video resurging now that it&amp;#8217;s &lt;em&gt;just a file&lt;/em&gt; again), and the smuggling in of long texts to Twitter via&amp;nbsp;images.&lt;/p&gt;
&lt;p&gt;A lot of this material moves through communication mediums via links and metadata, but those links and metadata are generally under the control of site owners.  It&amp;#8217;s up to the site owner what someone sees when they click a link, it&amp;#8217;s up to them what the metadata will suggest go into the image previous and description.  PageShot gives that control to the person sharing, since each Shot is &lt;em&gt;your link&lt;/em&gt;, your copy and your&amp;nbsp;perspective.&lt;/p&gt;
&lt;p&gt;As of this moment (April 2015) our designs are still ahead of our implementation, so there&amp;#8217;s not a lot to try out at this moment, but this is what we&amp;#8217;re putting&amp;nbsp;together.&lt;/p&gt;
&lt;p&gt;If you want to follow along, check out the &lt;a href="https://github.com/mozilla-services/pageshot"&gt;repository&lt;/a&gt;.&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry><entry><title>A Product Journal: As A Building Block</title><link href="https://ianbicking.org/blog/2015/04/product-journal-building-block.html" rel="alternate"></link><published>2015-04-23T00:00:00-05:00</published><updated>2015-04-23T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-04-23:/blog/2015/04/product-journal-building-block.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I teeter between thinking big about &lt;a href="http://www.ianbicking.org/blog/2015/04/product-journal-what-are-we-making.html"&gt;PageShot&lt;/a&gt; and thinking small.  The benefit of thinking small is: how can this tool provide value to people who wouldn&amp;#8217;t know if …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I teeter between thinking big about &lt;a href="http://www.ianbicking.org/blog/2015/04/product-journal-what-are-we-making.html"&gt;PageShot&lt;/a&gt; and thinking small.  The benefit of thinking small is: how can this tool provide value to people who wouldn&amp;#8217;t know if it would provide any value? And: how do we get it&amp;nbsp;done?&lt;/p&gt;
&lt;p&gt;Still I can&amp;#8217;t help but thinking big too.  The web gave us this incredible way to talk about how we experience the web: the &lt;span class="caps"&gt;URL&lt;/span&gt;.  An incredible amount of stuff has been built on that, search and sharing and archiving and ways to draw people into content and let people skim.  Indexes, summaries, APIs, and everyone gets to mint their own URLs and accept anyone else&amp;#8217;s URLs, pointing to&amp;nbsp;anything.&lt;/p&gt;
&lt;p&gt;But not everyone gets to mint URLs.  Developers and site owners get to do that.  If something doesn&amp;#8217;t have a &lt;span class="caps"&gt;URL&lt;/span&gt;, you can&amp;#8217;t point to it.  And every &lt;span class="caps"&gt;URL&lt;/span&gt; is a pointer, a kind of promise that the site owner has to deliver on, and sometimes doesn&amp;#8217;t choose to, or they lose&amp;nbsp;interest.&lt;/p&gt;
&lt;p&gt;I want PageShot to give a capability to users, the ability to address anything, because PageShot captures the state of any page at a moment, not an address so someone else can try to recreate that page.  The frozen page that PageShot saves is handy for things like capturing or highlighting parts of the page, which I think is the feature people will find attractive, but that&amp;#8217;s just a subset of what you might want to do with a snapshot of web content.  So I also hope it will be a building block.  When you put content into PageShot, you will know it is well formed, you will know it is static and available, you can point to exact locations and recover those locations later.  And all via a tool that is accessible to anyone, not just developers.  I think there are neat things to be built on that. (And if you do too, I&amp;#8217;d be interested in hearing about your&amp;nbsp;thoughts.)&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry><entry><title>A Product Journal: As We May Discuss</title><link href="https://ianbicking.org/blog/2015/05/product-journal-as-we-may-discuss.html" rel="alternate"></link><published>2015-05-08T00:00:00-05:00</published><updated>2015-05-08T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-05-08:/blog/2015/05/product-journal-as-we-may-discuss.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In a presentation &lt;a href="https://www.youtube.com/watch?v=2jTctBbX_kw"&gt;The Revolution Will Be Annotated&lt;/a&gt;, Dan Whaley begins with a very high-minded justification for annotation: that it is essential for our existence that we act wisely …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In a presentation &lt;a href="https://www.youtube.com/watch?v=2jTctBbX_kw"&gt;The Revolution Will Be Annotated&lt;/a&gt;, Dan Whaley begins with a very high-minded justification for annotation: that it is essential for our existence that we act wisely, and that we can achieve that through deliberation, and that annotation is a building block for open&amp;nbsp;deliberation.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/2jTctBbX_kw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In response, let me digress wildly, and talk about elementary&amp;nbsp;school.&lt;/p&gt;
&lt;p&gt;It is common to cite large class sizes as a problem, and small class sizes as an opportunity to improve education.  But there is debate about whether class size really matters; it certainly correlates with general privilege, but does it cause improvements?  At the same time I&amp;#8217;ve become much more familiar with the Montessori philosophy of education, and one of the surprising features is a relatively large ideal classroom size, in the 30s.  And why?  Dr. Montessori had positive theories about age mixture, community size, the culture of the classroom, and so forth – but I&amp;#8217;ll add what I think is a Montessori-style reason it&amp;#8217;s okay: it&amp;#8217;s okay to have less teachers because learning isn&amp;#8217;t caused by teachers.  Learning is ultimately an internal process, an assimilation and construction of knowledge.  Your environment can aid in that process, but the &lt;em&gt;cause&lt;/em&gt; is still&amp;nbsp;internal.&lt;/p&gt;
&lt;p&gt;I share Dan&amp;#8217;s enthusiasm about the importance of dialog to our collective wisdom.  But I see dialog as supportive of &lt;em&gt;personal growth&lt;/em&gt;, not of collective wisdom – our collective wisdom will increase as we individually&amp;nbsp;grow.&lt;/p&gt;
&lt;p&gt;Dan cites one problem with rationalism: we are good at constructing rational arguments to support what we already believed.  The annotation remedy is to suppose that what we conveniently leave out of our arguments can be applied later by a diverse set of participants.  Annotation makes it harder to make use of fallacies, harder to make use of limited narratives, because the annotator can add them back&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;I will cite another problem with rationalism: even a good rational argument is not good at convincing anyone of anything.  A good rational argument is like teaching arithmetic by telling someone that 39301+9402=48703.  Maybe even writing out the steps used to make that calculation.  You can lay that in front of someone, you can lay a hundred similar examples in front of someone, and they will not learn arithmetic.  If the person is disinterested they can just trust you – though then it hardly matters if you were right – but if they are interested I believe that the process of construction is necessary.  You have to solve your own math problems to learn&amp;nbsp;math.&lt;/p&gt;
&lt;p&gt;Annotation is interesting because it gives another avenue for people to publish their beliefs and enter into dialog.  But a global overlay of annotation is not a particularly appealing medium.  It&amp;#8217;s not a place to come to understanding, to practice the construction of ideas.  And I think our collective wisdom depends on an incredible &lt;em&gt;volume&lt;/em&gt; of discussion, not just on an increased quality, because you can&amp;#8217;t get large scale individual growth without large scale&amp;nbsp;discussion.&lt;/p&gt;
&lt;p&gt;I see two features in the typical annotation system: one feature is the ability to talk &lt;em&gt;about&lt;/em&gt; other things, with high fidelity.  URLs have been a great start to being able to talk about things on the web, but they have some limits.  The second feature is the ability to &lt;em&gt;view&lt;/em&gt; these annotations implicitly.  The second feature is the one I&amp;#8217;ve seldom found interesting as a reader, and disagree with as a goal.  Viewing annotations as a universal overlay of commentary asks too much of the annotations, provides too little to me as the reader, and I think is an attempt to pursue a kind of rational universal truth that I find little value in.  It&amp;#8217;s a sense that documents are there to teach us, and annotations make those documents even better&amp;nbsp;teachers.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mozilla-services/pageshot/"&gt;PageShot&lt;/a&gt; takes a different approach: it gives anyone the ability to talk about anything on the web, but each time you do that you create a new resource, &lt;em&gt;your&lt;/em&gt; discussion lives at &lt;em&gt;your&lt;/em&gt; document.  You can write your commentary for a specific audience, and then give it to that audience, without having your intended audience confused with the original author&amp;#8217;s intended audience.  You can throw away what you have to say.  The person who clicks on your link did it to see what you said, they aren&amp;#8217;t some passerby.  You can say implicitly through highlighting, &lt;em&gt;here is what I thought was interesting&lt;/em&gt;.  But PageShot applies no universality to what you say, it is a tool only of dialog.  This makes PageShot more modest, but intentionally&amp;nbsp;so.&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry><entry><title>A Product Journal: Community Participation</title><link href="https://ianbicking.org/blog/2015/05/product-journal-community-participation.html" rel="alternate"></link><published>2015-05-13T00:00:00-05:00</published><updated>2015-05-13T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-05-13:/blog/2015/05/product-journal-community-participation.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Generally at Mozilla we want to engage and activate our community to further what we do.  Because all our work is open source, and we default to open on …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Generally at Mozilla we want to engage and activate our community to further what we do.  Because all our work is open source, and we default to open on our planning, we have a lot of potential to include people in our work.  But removing barriers to participation doesn&amp;#8217;t make participation&amp;nbsp;happen.&lt;/p&gt;
&lt;p&gt;A couple reasons it&amp;#8217;s particularly&amp;nbsp;challenging:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Volunteers and employees work at different paces.  Employees can devote more time, and can have pressures to meet deadlines so that sometimes the work just needs to get done.  So everything is going fast and a volunteer can have a hard time keeping up.  Until the project is cancelled and then &lt;em&gt;wham&lt;/em&gt;, the employees are all&amp;nbsp;gone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Employees become acclimated to whatever processes are asked of them, because whether they like it or not that&amp;#8217;s the expectation that comes with their paycheck.  Sometimes employees put up with stupid shit as a result.  And sometimes volunteers aren&amp;#8217;t willing to make investments to their process even when it&amp;#8217;s the smart thing to do, &amp;#8216;cause who knows how long you&amp;#8217;ll stick&amp;nbsp;around?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Employee work has to satisfy organizational goals.  The organization can try to keep these aligned with mission goals, and keep the mission aligned with the community, but when push comes to shove the organization&amp;#8217;s goals – including the goals that come from the executive team – are going to take priority for&amp;nbsp;employees.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Volunteers are unlikely to be devoted to Mozilla&amp;#8217;s success.  Instead they have their own goals that may intersect with Mozilla&amp;#8217;s.  This overlap may only occur on one project.  And while that&amp;#8217;s serendipitous, limited overlap means a limit on the relationships those volunteers can build, and it&amp;#8217;s the relationships that are most likely to retain and reward&amp;nbsp;participation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have a theory that &lt;em&gt;agency&lt;/em&gt; is one of the most important attractors to open source participation.  Mozilla, because of its size and because it has a corporate structure, does not offer a lot of personal agency.  Though in return it does offer some potential of&amp;nbsp;leverage.&lt;/p&gt;
&lt;p&gt;I am not sure what to do with respect to participation in &lt;a href="https://github.com/mozilla-services/pageshot/"&gt;PageShot&lt;/a&gt;.  If I open things up more, will anyone care?  What would people care about?  Maybe people would care about building a product.  Maybe the &lt;a href="http://www.ianbicking.org/blog/2015/04/product-journal-building-block.html"&gt;building blocks&lt;/a&gt; would be more interesting.  We have an &lt;a href="https://github.com/mozilla-services/pageshot/#participation"&gt;&lt;span class="caps"&gt;IRC&lt;/span&gt; channel&lt;/a&gt;, but we also meet regularly over video, which I think has been important for us to assimilate the concept and goals of the project.  Are there other people who would care to show&amp;nbsp;up?&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m also somewhat conflicted about trying to bring people in.  Where will PageShot end up?  The project could be cancelled.  It&amp;#8217;s open source, sure, but is it &lt;em&gt;interesting&lt;/em&gt; as open source if it&amp;#8217;s a deadend addon with no backing site?  Our design is focused on making something broadly appealing such that it could be included in the browser – and if things go well, the addon will be part of the browser itself.  If that happens (and I hope it will!) even my own agency with respect to the project will be at threat.  That&amp;#8217;s what it means to get organizational&amp;nbsp;support.&lt;/p&gt;
&lt;p&gt;If the project was devolved into a set of libraries, it would be easier to contribute to, and easier for volunteers to find value in their participation.  Each piece could be improved on its own, and can live on even if the product that inspired the library does not continue.  People who use those libraries will maintain agency, because they can remix those libraries however they want, include them in whatever product of their own conception that they have.  The problem: I don&amp;#8217;t care about the libraries!  And I don&amp;#8217;t want this to be a &lt;a href="http://www.ianbicking.org/blog/2015/01/product-journal-tech-demo.html"&gt;technology demonstration&lt;/a&gt;, I want it to be a product demonstration, and libraries shift the focus to the wrong&amp;nbsp;part.&lt;/p&gt;
&lt;p&gt;Despite these challenges, I don&amp;#8217;t want to give up on the potential of participation.  I just doubt would look like normal open source participation.  I&amp;#8217;ve &lt;a href="https://github.com/mozilla-services/pageshot#participation"&gt;expanded our participation section&lt;/a&gt;, including an invitation to our standup meetings.  But mostly I need to know if anyone cares, and if you do: what do you care about and what do you want from your&amp;nbsp;participation?&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry><entry><title>A Product Journal: Objects</title><link href="https://ianbicking.org/blog/2015/07/product-journal-objects.html" rel="alternate"></link><published>2015-07-16T00:00:00-05:00</published><updated>2015-07-16T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-07-16:/blog/2015/07/product-journal-objects.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;ve been reading the &lt;a href="http://worrydream.com/EarlyHistoryOfSmalltalk/"&gt;Early History Of Smalltalk&lt;/a&gt;, notes by Alan Kay, and &lt;a href="http://worrydream.com/EarlyHistoryOfSmalltalk/#coda"&gt;this&lt;/a&gt; small note jumped out at&amp;nbsp;me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Another late-binding scheme that is already necessary is …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;ve been reading the &lt;a href="http://worrydream.com/EarlyHistoryOfSmalltalk/"&gt;Early History Of Smalltalk&lt;/a&gt;, notes by Alan Kay, and &lt;a href="http://worrydream.com/EarlyHistoryOfSmalltalk/#coda"&gt;this&lt;/a&gt; small note jumped out at&amp;nbsp;me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Another late-binding scheme that is already necessary is to get away from direct protocol matching when a new object shows up in a system of objects. In other words, if someone sends you an object from halfway around the world it will be unusual if it conforms to your local protocols. At some point it will be easier to have it carry even more information about itself–enough so its specifications can be “understood” and its configuration into your mix done by the more subtle matching of&amp;nbsp;inference.&lt;/p&gt;
&lt;p&gt;[&amp;#8230;]&lt;/p&gt;
&lt;p&gt;This higher computational finesse will be needed as the next paradigm shift–that of pervasive networking–takes place over the next five years. Objects will gradually become active agents and will travel the networks in search of useful information and tools for their managers. Objects brought back into a computational environment from halfway around the world will not be able to configure themselves by direct protocol matching as do objects today. Instead, the objects will carry much more information about themselves in a form that permits inferential docking. Some of the ongoing work in specification can be turned to this&amp;nbsp;task.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;An object, sent over the network; it does not exactly have a common protocol, class, or &lt;span class="caps"&gt;API&lt;/span&gt;, but enough information so it can be understood, matched up with some function or purpose according to inference.  We could also assume given this is from Alan Kay that the vision here is that code, not just data, is part of the object and information (though to consider &lt;em&gt;code&lt;/em&gt; to be &lt;em&gt;information&lt;/em&gt;: that is quite a challenge to our modern&amp;nbsp;sensibilities).&lt;/p&gt;
&lt;p&gt;When I read this, it struck me that we have these objects all around us.  The web page: remote, transferable, transformable, embodying functionality and data, with rich information suitable for&amp;nbsp;inference.&lt;/p&gt;
&lt;p&gt;The web page has a kind of minimal protocol, though nothing is entirely forbidden in how it is interpreted.  For instance the page is named in its &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;.  But probably it has a better name in its &lt;code&gt;&amp;lt;meta name=og:title&amp;gt;&lt;/code&gt;, should one exist; nothing is truly formal except by how it will be conventionally interpreted.  The protocol is flexible.  It has internal but opaque state.  The object can initiate activity in a few ways, primarily XMLHttpRequest and a small number of &lt;a href="https://developer.mozilla.org/en-US/docs/WebAPI"&gt;APIs&lt;/a&gt; available to it.  The page receives copious input in the form of&amp;nbsp;events.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s an impoverished object in so many ways.  And it&amp;#8217;s hardly what you would call universal, it&amp;#8217;s always representing visual pages for the browser.  When programming if the browser isn&amp;#8217;t our intended audience then we choose something like &lt;span class="caps"&gt;JSON&lt;/span&gt; or &lt;span class="caps"&gt;REST&lt;/span&gt;: one dead data, one a possessed and untransferable object (I would assert that in &lt;span class="caps"&gt;REST&lt;/span&gt; the object is the server and not the&amp;nbsp;document).&lt;/p&gt;
&lt;p&gt;And yet the web page is an incredible object!  Web pages are sophisticated and well cared for. Our understanding of them is meticulously documented, &lt;em&gt;including&lt;/em&gt; the ambiguity.  The web stack is something that has not just been &amp;#8220;defined&amp;#8221; or &amp;#8220;fixed&amp;#8221;, but also discovered.  Web pages contain gateways into a tremendous number of systems, defined around a surprisingly small set of&amp;nbsp;operations.&lt;/p&gt;
&lt;p&gt;But we don&amp;#8217;t look at them as objects, we don&amp;#8217;t try to deduce or infer much about them.  They don&amp;#8217;t look like the objects we would define were we to design such a system.  But if we shift our gaze from design to discovery then the wealth becomes apparent: these might not be the objects we would ask for, but given the breadth and comprehensiveness of web pages they are the objects we should use.  And they actually &lt;em&gt;work&lt;/em&gt;, they do a ton of useful&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;Stepping back from the specific product of &lt;a href="https://github.com/mozilla-services/pageshot"&gt;PageShot&lt;/a&gt;, this is the broad direction that excites me: to understand and make use of these objects that are all around us.  (Objects to which Mozilla, with its user agent, has unique access.)  But we need to look more broadly at what we can do with these objects.  PageShot tries one fairly small thing: capture the visual state at one moment, &lt;a href="http://www.ianbicking.org/blog/2015/04/product-journal-building-block.html"&gt;maybe do something with that state&lt;/a&gt;.  If we just had a handful of these operations, exposed properly (not trapped in the depths of monolithic browsers) I think there are some incredible things to be done.  Maybe even a way to bridge from the ad hoc to something more formal; as crazy as the web page execution model seems, it has some nice features, and is the widest deployed sandboxing execution model we&amp;nbsp;have.&lt;/p&gt;
&lt;p&gt;In this sense &lt;a href="http://www.2ality.com/2015/06/web-assembly.html"&gt;Web Assembly&lt;/a&gt; and &lt;a href="http://asmjs.org/"&gt;&lt;span class="caps"&gt;ASM&lt;/span&gt;.js&lt;/a&gt; are interesting as effectively competitors to JavaScript, but not competitors to the web platform or web-page-as-object.  That makes them different from &lt;a href="https://en.wikipedia.org/wiki/Google_Native_Client"&gt;Google Native Client&lt;/a&gt;.  Yes, Web Assembly is essentially another language for the web platform.  But Native Client uses &lt;a href="https://en.wikipedia.org/wiki/Google_Native_Client#Pepper"&gt;Pepper&lt;/a&gt; which is &lt;em&gt;not&lt;/em&gt; the web platform, it&amp;#8217;s a parallel platform that attempts to mimic the web platform.  &lt;span class="caps"&gt;ASM&lt;/span&gt;.js and Web Assembler are a demonstrations that we can change significant parts of the code execution while retaining the outward &lt;span class="caps"&gt;API&lt;/span&gt; of these&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;I find this all exciting, but I am somewhat half-hearted in my excitement.  Reading The Early History Of Smalltalk there&amp;#8217;s a certain spirit to their work that I love and often despair at recreating.  There is a visionary aspect, but I think more importantly they took a holistic approach.  There&amp;#8217;s something exciting about opening your mind to far off concepts (a vision) but then try to tie them together creatively, trying different approaches in an effort to maintain simplicity, avoid compromises.  The computing systems they worked on were like &lt;a href="http://edutechwiki.unige.ch/en/Microworld"&gt;Microworlds&lt;/a&gt; of their own creation, they could redefine problems, throw away state, reinvent any interface they chose.  And maybe that is also available to us: only when we hopelessly despair about problems we cannot fix are we trapped by our legacy.  That is, if you accept the web as it is there is a freedom, an agency in that, because you&amp;#8217;ve put aside the things you can&amp;#8217;t&amp;nbsp;change.&lt;/p&gt;
&lt;p&gt;I suspect Alan Kay would take a dim view of this whole notion.  He is not a fan of the web.  Another observation from that&amp;nbsp;history:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Four techniques used together—persistent state, polymorphism, instantiation, and methods-as-goals for the object—account for much of the power. None of these require an &amp;#8220;object-oriented language&amp;#8221; to be employed—&lt;span class="caps"&gt;ALGOL&lt;/span&gt; 68 can almost be turned to this style—an &lt;span class="caps"&gt;OOPL&lt;/span&gt; merely focuses the designer&amp;#8217;s mind in a particular fruitful direction. However, doing encapsulation right is a commitment not just to abstraction of state, but to eliminate state oriented metaphors from&amp;nbsp;programming.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can&amp;#8217;t even begin to phrase web pages in these terms.  State is a mess: much hosted on remote servers, some in the &lt;span class="caps"&gt;URL&lt;/span&gt;, some in the process of the running page, some in cookies or localStorage, all of it constantly being copied and thrown away.  Is the &lt;span class="caps"&gt;URL&lt;/span&gt; the class and the &lt;span class="caps"&gt;HTML&lt;/span&gt; served over &lt;span class="caps"&gt;HTTP&lt;/span&gt; the instantiation?  These are just painful contortions to find analogs.  Methods-as-goals is the one that seems most interesting and challenging, because I cannot quite identify the goals behind this whole endeavour.  Automation?  Insight?  Detection?  Creation?  Is it different from what Google is doing with its spiders?  Is there something distinct about interpretation in the context of a user agent?  And when the objects are not willing – I am proposing we bend pages to our will, wrestling control from the expectations of site owners – can you do any delegation?  Is there an object waiting to be smithed that encapsulates the&amp;nbsp;page?  &lt;/p&gt;
&lt;p&gt;More tensions than resolutions.  Wish I had time to bathe in those tensions a bit&amp;nbsp;longer.&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry><entry><title>Conway’s Corollary</title><link href="https://ianbicking.org/blog/2015/08/conways-corollary.html" rel="alternate"></link><published>2015-08-27T00:00:00-05:00</published><updated>2015-08-27T00:00:00-05:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-08-27:/blog/2015/08/conways-corollary.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.melconway.com/Home/Conways_Law.html"&gt;Conway&amp;#8217;s Law&lt;/a&gt;&amp;nbsp;states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;organizations which design systems are constrained to produce designs which are copies of the communication structures of these&amp;nbsp;organizations&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;ve always read this as an accusation: we are doomed to recreate the structure of our organizations in the structure of software projects.  And further: projects …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.melconway.com/Home/Conways_Law.html"&gt;Conway&amp;#8217;s Law&lt;/a&gt;&amp;nbsp;states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;organizations which design systems are constrained to produce designs which are copies of the communication structures of these&amp;nbsp;organizations&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;ve always read this as an accusation: we are doomed to recreate the structure of our organizations in the structure of software projects.  And further: projects cannot become their True Selves, cannot realize the most superior design, unless the organization is itself practically structureless.  That only without the constraints of structure can the engineer make the truly correct choices.  Michelangelo sculpted from marble, a smooth and uniform stone, not from an aggregate, where any hit with the chisel might reveal only the chaotic structure and fault lines of the rock and not his&amp;nbsp;vision.&lt;/p&gt;
&lt;p&gt;But most software is built, not revealed.  I&amp;#8217;m starting to believe that Conway&amp;#8217;s observation is a corollary, not so clearly cause-and-effect.  Maybe we should work with it, not struggle against it.  (With age I&amp;#8217;ve lost the passion for pointless struggle.)  It&amp;#8217;s not that developers can&amp;#8217;t imagine a design that goes contrary to the organizational structure, it&amp;#8217;s that they can&amp;#8217;t &lt;em&gt;ship&lt;/em&gt; those designs.  What we&amp;#8217;re seeing is natural selection.  And when through force of will such a design is shipped, that it survives and is maintained depends on whether that the organization changed in the process, whether a structure was created to support that&amp;nbsp;design.  &lt;/p&gt;
&lt;p&gt;A second skepticism: must a particular construction and modularity of code be paramount?  Code is malleable, and its modularity is for the purpose of humans.  Most of what we do disappears anyway when the machine takes over – functions are inlined, types erased, the pieces become linked, and the machine doesn&amp;#8217;t care one whit about everything we&amp;#8217;ve done to make the software comprehensible.  Modularity is to serve our purposes.  And sometimes organization structure serves a purpose; we change it to meet goals, and we shouldn&amp;#8217;t assume the people who change it are just busybodies.  But those changes are often aspirational, and so those changes are setting ourselves up for conflict as the new structure probably does not mirror the software&amp;nbsp;design.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the parts of an organization (e.g. teams, departments, or subdivisions) do not closely reflect the essential parts of the product, or if the relationship between organizations do not reflect the relationships between product parts, then the project will be in trouble&amp;#8230; Therefore: Make sure the organization is compatible with the product architecture
– &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_law#cite_note-5"&gt;Coplien and&amp;nbsp;Harrison&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So change the architecture!  There&amp;#8217;s more than one way to resolve these&amp;nbsp;tensions.&lt;/p&gt;
&lt;p&gt;A last speculation: as described in the &lt;a href="http://c2.com/cgi/wiki?SecondSystemEffect"&gt;Second System Effect&lt;/a&gt; we see teams rearchitect systems with excessive modularity and abstraction.  Maybe because they remember all these conflicts, they remember all the times organizational structure and product motivations didn&amp;#8217;t match architecture.  The team makes an incorrect response by creating an architecture that can simultaneously embody all imagined organizational structures, a granularity that embodies not just current organizational tensions but also organizational boundaries that have come and gone.  But the value is only in predicting future changes in structure, and only then if you are&amp;nbsp;lucky.&lt;/p&gt;
&lt;p&gt;Maybe we should look at Conway&amp;#8217;s Law as a prescription: projects &lt;em&gt;should only&lt;/em&gt; have hard boundaries where there are organizational boundaries.  Soft boundaries and definitions still exist everywhere: just like we give local variables meaningful names (even though outside the function no one can tell the difference), we might also create abstractions and modularity that serve immediate and concrete purposes.  But they should only be built for the moment and the task at hand.  Extra effort should be applied to being &lt;em&gt;ready&lt;/em&gt; to refactor in the future, not predicting and embodying those predictions in present modularity.  Perhaps this is another rephrasing of Agile and &lt;a href="http://martinfowler.com/bliki/Yagni.html"&gt;&lt;span class="caps"&gt;YAGNI&lt;/span&gt;&lt;/a&gt;.  Code is a liability, agency over that code is an&amp;nbsp;asset.&lt;/p&gt;</content><category term="mozilla"></category></entry><entry><title>A Product Journal: CSS Object Model</title><link href="https://ianbicking.org/blog/2015/12/product-journal-css-object-model.html" rel="alternate"></link><published>2015-12-29T00:00:00-06:00</published><updated>2015-12-29T00:00:00-06:00</updated><author><name>Ian Bicking</name></author><id>tag:ianbicking.org,2015-12-29:/blog/2015/12/product-journal-css-object-model.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And now for something entirely&amp;nbsp;technical!&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve had a contributor from &lt;a href="https://outernet.is/"&gt;Outernet&lt;/a&gt; exploring ways of using PageShot for capturing pages for distribution on their network.  Outernet satellite-based content …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;m blogging about the development of a new product in Mozilla, &lt;a href="http://www.ianbicking.org/tag/product-journal.html"&gt;look here for my other posts in this&amp;nbsp;series&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And now for something entirely&amp;nbsp;technical!&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve had a contributor from &lt;a href="https://outernet.is/"&gt;Outernet&lt;/a&gt; exploring ways of using PageShot for capturing pages for distribution on their network.  Outernet satellite-based content distribution network.  It&amp;#8217;s a neat idea, but one challenge is that it&amp;#8217;s &lt;em&gt;very&lt;/em&gt; one-way – anyone (given the equipment) can listen in to what the satellites broadcast, but that&amp;#8217;s it (at least for the most interesting use cases).  Lots of modern websites aren&amp;#8217;t setup well for that, so acquiring content can be&amp;nbsp;tricky.&lt;/p&gt;
&lt;p&gt;Given that interest I started thinking more about inlining resources.  We&amp;#8217;ve been hotlinking to resources simply out of laziness.  Some things are easy to handle, but &lt;span class="caps"&gt;CSS&lt;/span&gt; is a bit more annoying because of the indirection of &lt;code&gt;@import&lt;/code&gt; and yet more relatively URLs.  Until I started poking around I had no idea that there is a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model"&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt; Object Model&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Given this there is now experimental support for inlining all &lt;span class="caps"&gt;CSS&lt;/span&gt; rules into the captured page in PageShot.  The support is still incomplete, and my understanding of everything you can do with &lt;span class="caps"&gt;CSS&lt;/span&gt; is still incomplete.  But the code isn&amp;#8217;t very hard.  One fun thing is that we can test each &lt;span class="caps"&gt;CSS&lt;/span&gt; rule against the page and see if it is needed.  Doing this typically allows 80% of rules to be&amp;nbsp;omitted.&lt;/p&gt;
&lt;p&gt;Some highlights of what I&amp;#8217;ve learned so&amp;nbsp;far:&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s two interesting objects: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStylesheet"&gt;CSSStylesheet&lt;/a&gt; (which inherits from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Stylesheet"&gt;Stylesheet&lt;/a&gt;) and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule"&gt;CSSRule&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;document.styleSheets&lt;/code&gt;: a list of all stylesheets, both remote (&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;), inline, and imported (&lt;code&gt;@import&lt;/code&gt;)&amp;nbsp;stylesheets.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;styleSheet.href&lt;/code&gt;: the &lt;span class="caps"&gt;URL&lt;/span&gt; of the stylesheet (&lt;code&gt;null&lt;/code&gt; if it was&amp;nbsp;inline).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;styleSheet.cssRules&lt;/code&gt;: a list of all the rules in the&amp;nbsp;stylesheet.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;cssRule.type&lt;/code&gt;: there&amp;#8217;s &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSRule#Type_constants"&gt;several types of rules&lt;/a&gt;.  I&amp;#8217;ve chosen to ignore everything but &lt;code&gt;STYLE_RULE&lt;/code&gt; and &lt;code&gt;MEDIA_RULE&lt;/code&gt; out of&amp;nbsp;laziness.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cssRule.cssRules&lt;/code&gt;: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media"&gt;media rules&lt;/a&gt; (like &lt;code&gt;@media (max-width: 600px) {.nav {display: none}}&lt;/code&gt;) contain sub-rules (&lt;code&gt;.nav {display: none}&lt;/code&gt; in this&amp;nbsp;case).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cssRule.parentRule&lt;/code&gt;: points back to a media rule if there is&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cssRule.parentStyleSheet&lt;/code&gt;: points back to the parent stylesheet.  There are probably ways of nesting media rules and stylesheets (that can have &lt;code&gt;media&lt;/code&gt; attributes) in ways to create compound media rules that I haven&amp;#8217;t accounted&amp;nbsp;for.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cssRule.cssText&lt;/code&gt;: the text of the rule.  This includes both selectors and style, or media queries and all the sub-rules.  I just split on &lt;code&gt;{&lt;/code&gt; to separate the selector or query.  I &lt;em&gt;assume&lt;/em&gt; these are representations of the parsed &lt;span class="caps"&gt;CSS&lt;/span&gt;, and so normalized, but I haven&amp;#8217;t explored that in&amp;nbsp;detail.&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s all sorts of ways to create trees of media restrictions and other complexities that I know I haven&amp;#8217;t taken account of, but things Mostly Work&amp;nbsp;Anyway.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an example that makes use of this to create a single inline stylesheet for a page containing only necessary rules (using &lt;span class="caps"&gt;ES6&lt;/span&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;allRules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// CSS rules, some of which may be media queries, form a kind of tree; this gets&lt;/span&gt;
&lt;span class="c1"&gt;// this puts all the style rules in a flat list&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addRules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;sheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssRules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MEDIA_RULE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;addRules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STYLE_RULE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;allRules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Then we traverse all the stylesheets and grab rules from each:&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;styleSheet&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;styleSheets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;styleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;styleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;screen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This is a stylesheet for some media besides screen&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;addRules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styleSheet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Then we collect the rules up again, clustered by media queries (with&lt;/span&gt;
&lt;span class="c1"&gt;// rulesByMedia[&amp;quot;&amp;quot;] for no media query)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rulesByMedia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;allRules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Skip selectors that don&amp;#39;t match anything&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mediaType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentRule&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentRule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MEDIA_RULE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mediaType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentRule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;rulesByMedia&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rulesByMedia&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nx"&gt;rulesByMedia&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Now we can create a new clean stylesheet:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mediaType&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;rulesByMedia&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; {&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;rulesByMedia&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;padding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mediaType&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;padding&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;style&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/style&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously there could be rules that apply to &lt;span class="caps"&gt;DOM&lt;/span&gt; elements that aren&amp;#8217;t present &lt;em&gt;right now&lt;/em&gt; but could be created.  And I&amp;#8217;m sure it&amp;#8217;s omitting fonts and animations.  But it&amp;#8217;s fun to hack around&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;It might be fun to use this hooked up to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"&gt;mutation observers&lt;/a&gt; during your testing and find orphaned&amp;nbsp;rules.&lt;/p&gt;</content><category term="mozilla"></category><category term="product-journal"></category></entry></feed>